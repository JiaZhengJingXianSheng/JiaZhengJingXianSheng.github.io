<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java多线程笔记-2</title>
      <link href="/2022/03/11/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2022/03/11/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<h1><span id="java多线程2">Java多线程(2)</span></h1><p><strong>部分代码：<a href="https://github.com/JiaZhengJingXianSheng/Java-Study-Notes">https://github.com/JiaZhengJingXianSheng/Java-Study-Notes</a></strong></p><!-- TOC --><p>[TOC]</p><h2><span id="线程停止">线程停止</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试线程停止</span></span><br><span class="line"><span class="comment">// 建议使用标志位</span></span><br><span class="line"><span class="comment">// 不建议使用 stop 或 destroy 等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 设置标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置公开方法，停止线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestStop</span> <span class="variable">testStop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestStop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用自定义stop 方法，切换标志位，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2><span id="线程休眠">线程休眠</span></h2><p><strong>Thread.sleep(int ms)</strong></p><hr><h2><span id="线程礼让">线程礼让</span></h2><p><strong>Thread.yield()</strong></p><hr><h2><span id="线程强制执行-join">线程强制执行 join</span></h2><p><strong>thread.join()  其中thread是一个线程</strong></p><hr><h2><span id="同步方法和同步块">同步方法和同步块</span></h2><p><strong>由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是 synchronized 关键字，它包括两种用法： synchronized 方法和 synchronized 块</strong></p><p><strong>synchronized方法控制对 “对象” 的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</strong></p><p><strong>缺陷： 会影响效率</strong></p><hr><h2><span id="copyonwritearraylist">CopyOnWriteArrayList</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 JUC 安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                    ()-&gt;&#123;</span><br><span class="line">                        list.add(Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">            ).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2><span id="死锁">死锁</span></h2><p><strong>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程</strong></p><hr><h2><span id="lock锁">Lock锁</span></h2><p><strong>显式锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line">try&#123;</span><br><span class="line">lock.lock(); // 加锁</span><br><span class="line">// 处理</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">lock.unlock(); // 解锁</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 Lock 锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestLock2</span> <span class="variable">testLock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestLock2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLock2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">tickNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 lock 锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (tickNums&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(tickNums--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  未加锁</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void run() &#123;</span></span><br><span class="line"><span class="comment">//        while(true)&#123;</span></span><br><span class="line"><span class="comment">//            if (tickNums&gt;0)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                System.out.println(tickNums--);</span></span><br><span class="line"><span class="comment">//            &#125;else&#123;</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2><span id="生产者消费者问题">生产者消费者问题</span></h2><p><strong>生产者消费者问题，也称有限缓冲问题。生产者和消费者共享一个资源</strong></p><p><strong>对于生产者，没有生产产品之前，要通知消费者等待，而生产了产品之后，又要马上通知消费者消费。</strong></p><p><strong>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品以供消费。</strong></p><p><strong>在生产者消费者问题中，仅有synchronized 是不够的</strong></p><p><strong>synchronized 可阻止并发更新同一个共享资源，实现了同步</strong></p><p><strong>synchronized 不能用来实现不同线程之间的消息传递（通信）</strong></p><p><strong>Java 提供了几个方法解决线程之间的通信问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait(); <span class="comment">// 表示线程一直等待，与sleep不同，会释放锁。</span></span><br><span class="line">notify(); <span class="comment">// 唤醒一个处于等待状态的线程</span></span><br><span class="line">notifyAll(); <span class="comment">// 唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度。</span></span><br></pre></td></tr></table></figure><h3><span id="解决方法一-管程法">解决方法一 （管程法）</span></h3><ul><li><p><strong>生产者：负责生产数据的模块</strong></p></li><li><p><strong>消费者：负责处理数据的模块</strong></p></li><li><p><strong>缓冲区：消费者不能直接使用生产者的数据，他们之间有个 “ 缓冲区 ”</strong></p></li></ul><p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试生产者-消费者模型 --&gt; 利用缓冲区解决：管程法</span></span><br><span class="line"><span class="comment">// 生产者、消费者、产品、缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SynContainer container= <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 生产 100 个产品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            container.push(<span class="keyword">new</span> <span class="title class_">Product</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了--&gt;&quot;</span> + container.pop().id + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="type">int</span> id; <span class="comment">// 产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">    <span class="comment">// 需要一个容器大小</span></span><br><span class="line">    Product[] products = <span class="keyword">new</span> <span class="title class_">Product</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者放入产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果容器满了，等待消费者消费</span></span><br><span class="line">        <span class="comment">// if语句中醒来的线程 不会再一次进行判断了 而while会重新再判断</span></span><br><span class="line">        <span class="keyword">while</span> (count == products.length) &#123;</span><br><span class="line">            <span class="comment">// 通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有满，生产产品</span></span><br><span class="line">        products[count] = product;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Product <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断能否消费</span></span><br><span class="line">        <span class="comment">// if语句中醒来的线程 不会再一次进行判断了 而while会重新再判断</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待生产者生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果可以消费</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            count--;</span><br><span class="line">            product = products[count];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 吃完了，通知生产者生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="解决方法二-信号灯法">解决方法二 （信号灯法）</span></h3><p><strong>设置标志位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试生产者-消费者问题2： 信号灯法，设置标志位</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Player</span>(tv).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者 --&gt; 演员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;快乐大本营&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;抖音：记录美好生活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者 --&gt; 观众</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品 --&gt; 节目</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span> &#123;</span><br><span class="line">    <span class="comment">// 演员表演，观众等待</span></span><br><span class="line">    <span class="comment">// 观众观看，演员等待</span></span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表演</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String voice)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了&quot;</span> + voice);</span><br><span class="line">        <span class="comment">// 通知观众观看</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll(); <span class="comment">// 唤醒</span></span><br><span class="line">        <span class="built_in">this</span>.voice = voice;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了&quot;</span> + voice);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知演员表演</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2><span id="线程池">线程池</span></h2><p><strong>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。线程池可以实现复用。</strong></p><p>**JDK 5.0 起提供了线程池相关的API ：ExecutorService 和 Executors **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建线程池</span></span><br><span class="line">        <span class="comment">//    newFixedThreadPool 参数为线程池大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯法则</title>
      <link href="/2022/03/02/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%95%E5%88%99/"/>
      <url>/2022/03/02/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%95%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1><span id="贝叶斯法则和机器人学">贝叶斯法则和机器人学</span></h1><!-- toc --><ul><li><a href="#%E5%9F%BA%E7%A1%80">基础</a><ul><li><a href="#%E4%BC%A0%E6%84%9F%E5%99%A8">传感器</a></li><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90">举个栗子（😄）</a></li></ul></li><li><a href="#%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87">条件概率</a><ul><li><a href="#%E5%9F%BA%E7%A1%80-1">基础</a></li><li><a href="#%E7%A2%B0%E6%92%9E%E7%9A%84%E6%A6%82%E7%8E%87-%E7%BB%83%E4%B9%A0%E5%8C%BA">碰撞的概率 [练习区]</a></li><li><a href="#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-1">举个栗子（😄）</a></li><li><a href="#%E6%A0%97%E5%AD%902">栗子2（😄）</a></li></ul></li></ul><!-- tocstop --><p>[TOC]</p><hr><h2><span id="基础">基础</span></h2><p><strong>在给定的初始预测下，我们就可以改进预测。</strong></p><p><strong>假设我们的初始预测（先验信息）是对汽车在道路上位置的估计，我们获得的是不太准确的卫星定位，我们可以根据汽车周边的数据和汽车移动方式的数据来改进我们的预测。</strong></p><hr><h3><span id="传感器">传感器</span></h3><p>无人驾驶汽车主要使用以下三种传感器观察世界：</p><ul><li><strong>摄像头</strong> ：可以拍摄视频，</li><li><strong>光学雷达</strong> ：是基于光学的传感器，</li><li><strong>雷达</strong> ：使用无线电波。</li></ul><p>无人驾驶汽车也有许多 <strong>内部传感器</strong> ，可以测量汽车行驶的速度和方向、车轮方向，甚至是车内温度！</p><hr><h3><span id="举个栗子">举个栗子（😄）</span></h3><p>假设我们的传感器探测到地形和汽车行驶的具体信息，如下：</p><ul><li><p>这辆汽车可能在方圆半径 5 米的任何地方，</p></li><li><p>汽车正在爬坡行驶，</p></li><li><p>汽车左侧有棵树，</p></li><li><p>汽车车轮指向右边。</p></li><li><p>这条路是单行道</p></li></ul><p><img src="https://s4.ax1x.com/2022/03/01/blKqv6.png" alt="blKqv6.png"></p><h3><span id></span></h3><p><strong>那么显而易见车在A位置的概率最大。</strong></p><hr><h2><span id="条件概率">条件概率</span></h2><h3><span id="基础">基础</span></h3><p>如果让我们估计一年之后的天气情况，这可以近似看作一个独立事件。相反估计一分钟后的天气，你得出的结果会因为现在的天气状况做出判断。</p><p><strong>这种利用收集起来的数据得出概率估计就是条件概率。利用我们已知的信息，对未知信息做出更好的估计。</strong></p><hr><h3><span id="碰撞的概率-练习区">碰撞的概率 [练习区]</span></h3><table><thead><tr><th>车辆1\车辆2</th><th align="center">左转</th><th align="right">直行</th><th>右转</th></tr></thead><tbody><tr><td>左转</td><td align="center">0.5</td><td align="right">0.25</td><td>0.1</td></tr><tr><td>直行</td><td align="center">0.25</td><td align="right">0.02</td><td>0.1</td></tr><tr><td>右转</td><td align="center">0.1</td><td align="right">0.1</td><td>0.01</td></tr></tbody></table><p>上面显示的真值表列出了两辆车同时尝试移动，则两辆车在十字路口发生碰撞的概率。例如，如果车辆 1 直行，车辆 2 左转，则碰撞概率为 0.25。</p><hr><h3><span id="举个栗子">举个栗子（😄）</span></h3><p>你希望得出一辆汽车看见 <em>黄色</em> 的交通信号灯就停下来的概率是多少。</p><ul><li><p>经验数据告诉你，一辆汽车在交通灯交叉路口停车的概率是 $P(S) &#x3D; 0.40$ 。</p></li><li><p>同时你了解到，基于经验数据，交通灯是黄色（而不是红色或绿色）的概率是 $P(Y) &#x3D; 0.10$ 。</p></li></ul><p><img src="https://s4.ax1x.com/2022/03/01/bllm3n.png" alt="bllm3n.png"></p><p><strong>已知 P(Y|S) &#x3D; 0.12 ,如果交通信号灯为黄色，那么汽车停下的可能性为</strong><br>$$<br>P(S|Y) &#x3D;  \frac {P(S,Y)}{P(Y)} &#x3D; \frac {P(Y|S)P(S)} {P(Y)} &#x3D; \frac {0.12*0.04} {0.10} &#x3D; 0.48<br>$$</p><hr><h3><span id="栗子2">栗子2（😄）</span></h3><p>在一条四车道的高速公路上，汽车行驶速度要么快，要么不快。 快的汽车应该在最左边的车道。</p><ul><li>在任何时候，都有 20% 的车辆在最左边的车道。</li><li>总体上，高速公路上有 40% 的车辆被归类为快速行驶。</li><li>在最左边车道的所有车辆中，90% 的车辆正在快速行驶。</li></ul><h3><span id></span></h3><p><strong>如果汽车行驶速度很快，那么它位于最左边车道的概率为：</strong></p><p><strong>设最左边车道为事件A，快速行驶为事件B,  P(A) &#x3D; 0.2,  P(B) &#x3D; 0.4,  P(B|A) &#x3D; 0.9</strong><br>$$<br>P(A|B) &#x3D; \frac {P(A,B)} {P(B)} &#x3D; \frac {P(A)P(B|A)} {P(B)} &#x3D; \frac {0.2*0.9} {0.4} &#x3D; 0.45<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2022/02/28/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/28/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="html-超文本标记语言">HTML 超文本标记语言</span></h1><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/HTML-Study-Notes">JiaZhengJingXianSheng&#x2F;HTML-Study-Notes (github.com)</a></strong></p><!-- toc --><ul><li><a href="#%E7%BD%91%E9%A1%B5%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF">网页基本信息</a><ul><li><a href="#%E6%B3%A8%E9%87%8A">注释</a></li><li><a href="#doctype">DOCTYPE</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F">基本格式</a></li></ul></li><li><a href="#%E7%BD%91%E9%A1%B5%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE">网页基本标签</a><ul><li><a href="#%E5%9B%BE%E5%83%8F%E6%A0%87%E7%AD%BE">图像标签</a></li><li><a href="#%E9%93%BE%E6%8E%A5%E6%A0%87%E7%AD%BE">链接标签</a></li><li><a href="#%E9%94%9A%E9%93%BE%E6%8E%A5">锚链接</a></li><li><a href="#%E5%8A%9F%E8%83%BD%E6%80%A7%E9%93%BE%E6%8E%A5">功能性链接</a></li><li><a href="#%E5%88%97%E8%A1%A8">列表</a></li><li><a href="#%E8%A1%A8%E6%A0%BC">表格</a></li><li><a href="#%E5%AA%92%E4%BD%93">媒体</a></li></ul></li><li><a href="#%E9%A1%B5%E9%9D%A2%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90">页面结构分析</a></li><li><a href="#iframe%E5%86%85%E8%81%94%E6%A1%86%E6%9E%B6">iframe内联框架</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E8%AF%AD%E6%B3%95">表单语法</a><ul><li><a href="#%E6%96%87%E6%9C%AC%E6%A1%86%E5%92%8C%E5%8D%95%E9%80%89%E6%A1%86">文本框和单选框</a><ul><li><a href="#%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E6%A0%BC%E5%BC%8F">表单元素格式</a></li><li><a href="#%E6%96%87%E6%9C%AC%E8%BE%93%E5%85%A5%E6%A1%86">文本输入框</a></li></ul></li><li><a href="#%E5%88%97%E8%A1%A8%E6%A1%86%E5%92%8C%E6%96%87%E6%9C%AC%E5%9F%9F">列表框和文本域</a></li><li><a href="#%E6%90%9C%E7%B4%A2%E6%A1%86%E6%BB%91%E5%9D%97%E5%92%8C%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81">搜索框滑块和简单验证</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E5%88%9D%E7%BA%A7%E9%AA%8C%E8%AF%81">表单初级验证</a></li></ul></li></ul><!-- tocstop --><p>[TOC]</p><h2><span id="网页基本信息">网页基本信息</span></h2><h3><span id="注释">注释</span></h3><blockquote><!-- --></blockquote><h3><span id="doctype">DOCTYPE</span></h3><blockquote><p>告诉浏览器使用什么规范</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3><span id="基本格式">基本格式</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- head 标签表示网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- meta 一般用来做SEO --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- title 标签代表网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body 标签代表网页主体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2><span id="网页基本标签">网页基本标签</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标题标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，两只老虎，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快，跑得快，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有眼睛，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有尾巴，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>真奇怪！真奇怪！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 水平线标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 换行标签 --&gt;</span></span><br><span class="line">两只老虎，两只老虎，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">跑得快，跑得快，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">一只没有眼睛，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">一只没有尾巴，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">真奇怪！真奇怪！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 粗体， 斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">粗体 ： <span class="tag">&lt;<span class="name">strong</span>&gt;</span>I Love U <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体 ： <span class="tag">&lt;<span class="name">em</span>&gt;</span>I Love U <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 特殊符号 --&gt;</span>.</span><br><span class="line"><span class="comment">&lt;!-- 用转义字符 --&gt;</span></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br></pre></td></tr></table></figure><h3><span id="图像标签">图像标签</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;text&quot;</span> <span class="attr">title</span>=<span class="string">&quot;text&quot;</span> <span class="attr">width</span>=<span class="string">&quot;x&quot;</span> <span class="attr">height</span>=<span class="string">&quot;y&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- src 路径， alt 图像的代替文字， title 鼠标悬停提示文字， width 图像宽度， height 图像高度 --&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="链接标签">链接标签</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;path&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口位置&quot;</span>&gt;</span>链接文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- href 链接路径， target 链接在哪个窗口打开 常用值： _self _blank --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    a 标签</span></span><br><span class="line"><span class="comment">    href: 必填，表示要跳转到哪个页面</span></span><br><span class="line"><span class="comment">    target: 表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击我跳转到页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击我跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="锚链接">锚链接</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用name 作为标记 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 锚链接</span></span><br><span class="line"><span class="comment">    1. 需要一个标记</span></span><br><span class="line"><span class="comment">    2. 跳转到标记</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="功能性链接">功能性链接</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 功能性链接</span></span><br><span class="line"><span class="comment">    邮件链接： mailto</span></span><br><span class="line"><span class="comment">    QQ链接：  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:the_unique_guy@outlook.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="列表">列表</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- order list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表</span></span><br><span class="line"><span class="comment">    dl: 标签</span></span><br><span class="line"><span class="comment">    dt: 列表名称</span></span><br><span class="line"><span class="comment">    dd: 列表内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="表格">表格</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格 table</span></span><br><span class="line"><span class="comment">    行 tr</span></span><br><span class="line"><span class="comment">    列 td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- colspan 跨列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rowspan 跨行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rowspan 跨行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="媒体">媒体</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 音频和视频</span></span><br><span class="line"><span class="comment">    src: 资源路径</span></span><br><span class="line"><span class="comment">    controls: 控制条</span></span><br><span class="line"><span class="comment">    autoplay: 自动播放</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    注： chrome默认禁用自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/神奇女侠.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resources/audio/孙燕姿-我怀念的.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2><span id="页面结构分析">页面结构分析</span></h2><blockquote><p>header:     标题头部区域的内容（用于页面或页面中的一块区域）</p><p>footer:       标记脚部区域的内容（用于页面或页面中的一块区域）</p><p>section:     Web页面中的一块独立区域</p><p>article:       独立的文章内容</p><p>aside:         相关内容或应用</p><p>nav:            导航类辅助内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="iframe内联框架">iframe内联框架</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;iframe src=&quot;path&quot; name=&quot;mainFrame&quot;&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="comment">src: 引用地址页面</span></span><br><span class="line"><span class="comment">name: 框架标识名</span></span><br><span class="line"><span class="comment">width: 宽度</span></span><br><span class="line"><span class="comment">height: 高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转链接也可以定位到iframe打开 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.quarkhacker.top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="表单语法">表单语法</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单参数</span></span><br><span class="line"><span class="comment">    hidden: 隐藏域</span></span><br><span class="line"><span class="comment">    readonly: 只读</span></span><br><span class="line"><span class="comment">    disabled: 禁用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单form</span></span><br><span class="line"><span class="comment">    action: 表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">    method: post、 get 提交方式</span></span><br><span class="line"><span class="comment">    get 方式提交我们可以在url中看到我们提交的信息，不安全，但高效</span></span><br><span class="line"><span class="comment">    post 方式提交比较安全，可以传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本输入框： input type=&quot;text&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 密码框： input type=&quot;password&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="文本框和单选框">文本框和单选框</span></h3><h4><span id="表单元素格式">表单元素格式</span></h4><blockquote><p>type:  指定元素的类型，text, password, checkbox, radio, submit, reset, file, hidden, image 和 button, 默认为text</p><p>name:  指定表单元素的名称</p><p>value:  元素的初始值，type 为 radio 时必须指定一个值</p><p>size:  指定表单元素的初始宽度 （一般用 CSS 修改）</p><p>maxlength:  type 为 text 或 password 时，输入的最大字符数</p><p>checked:  type 为  radio 或 checkbox 时，指定按钮是否是被选中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本输入框： input type=&quot;text&quot;</span></span><br><span class="line"><span class="comment">     value=&quot;帅&quot;      默认初始值</span></span><br><span class="line"><span class="comment">     maxlength=&quot;8&quot;   最长能写几个字符</span></span><br><span class="line"><span class="comment">     size=&quot;30&quot;       文本框长度</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="文本输入框">文本输入框</span></h4><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本输入框： input type=&quot;text&quot;</span></span><br><span class="line"><span class="comment">  value=&quot;帅&quot;      默认初始值</span></span><br><span class="line"><span class="comment">  maxlength=&quot;8&quot;   最长能写几个字符</span></span><br><span class="line"><span class="comment">  size=&quot;30&quot;       文本框长度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 密码框： input type=&quot;password&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单选框标签</span></span><br><span class="line"><span class="comment">input type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment"> value: 单选框的值</span></span><br><span class="line"><span class="comment">name: 表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多选框</span></span><br><span class="line"><span class="comment"> input type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 按钮</span></span><br><span class="line"><span class="comment">普通按钮： input type=&quot;button&quot;</span></span><br><span class="line"><span class="comment">图片按钮： input type=&quot;image&quot; src=&quot;&quot;</span></span><br><span class="line"><span class="comment">提交按钮： input type=&quot;submit&quot;</span></span><br><span class="line"><span class="comment">重置按钮： input type=&quot;reset&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3><span id="列表框和文本域">列表框和文本域</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下拉框，列表框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>下拉框</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;USA&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Switzerland&quot;</span> <span class="attr">selected</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;India&quot;</span>&gt;</span>印度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本域</span></span><br><span class="line"><span class="comment">    textarea name=&quot;textarea&quot; cols=&quot;10&quot; rows=&quot;3&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        文本内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件域</span></span><br><span class="line"><span class="comment">    input type=&quot;file&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="搜索框滑块和简单验证">搜索框滑块和简单验证</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 邮件验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- url验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>URL:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数字验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数字:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 滑块</span></span><br><span class="line"><span class="comment">    input type=&quot;range&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;volume&quot;</span> <span class="attr">min</span>=<span class="string">&quot;10&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增强鼠标可用性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mark&quot;</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">mark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="表单初级验证">表单初级验证</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单参数</span></span><br><span class="line"><span class="comment">    hidden: 隐藏域</span></span><br><span class="line"><span class="comment">    readonly: 只读</span></span><br><span class="line"><span class="comment">    disabled: 禁用</span></span><br><span class="line"><span class="comment">    placeholder: 提示信息，用在文本框</span></span><br><span class="line"><span class="comment">    required: 非空判断，用在文本框</span></span><br><span class="line"><span class="comment">    pattern: 正则表达式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境</title>
      <link href="/2022/01/13/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/01/13/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-虚拟环境">Python 虚拟环境</span></h1><!-- toc --><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9">查看帮助</a></li><li><a href="#%E5%88%9B%E5%BB%BA">创建</a></li><li><a href="#%E6%BF%80%E6%B4%BB">激活</a></li><li><a href="#%E6%BF%80%E6%B4%BB%E5%8E%9F%E7%90%86">激活原理</a></li><li><a href="#%E5%9C%A8ide%E4%B8%AD%E9%85%8D%E7%BD%AE">在IDE中配置</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E5%92%8C%E5%A4%8D%E5%88%B6%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">保存和复制虚拟环境</a></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="查看帮助">查看帮助</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv -h</span><br></pre></td></tr></table></figure><p>其中 –system-site-packages 是引用系统级别的库</p><h2><span id="创建">创建</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv venvdemo</span><br></pre></td></tr></table></figure><p>创建好后会在用户目录下创建一个 venvdemo 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\lyz\venvdemo&gt;dir</span><br><span class="line"> 驱动器 C 中的卷是 系统</span><br><span class="line"> 卷的序列号是 5291-6C8F</span><br><span class="line"></span><br><span class="line"> C:\Users\lyz\venvdemo 的目录</span><br><span class="line"></span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          .</span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          ..</span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          Include</span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          Lib</span><br><span class="line">2022/01/11  11:31                76 pyvenv.cfg</span><br><span class="line">2022/01/11  11:39    &lt;DIR&gt;          Scripts</span><br><span class="line">               1 个文件             76 字节</span><br><span class="line">               5 个目录 79,062,708,224 可用字节</span><br></pre></td></tr></table></figure><h2><span id="激活">激活</span></h2><p>进入到Scripts文件夹下，执行activate</p><h2><span id="激活原理">激活原理</span></h2><p>在 Scripts 目录下会有 activate 激活文件 , deactivate 去激活文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\lyz\venvdemo\Scripts&gt;dir</span><br><span class="line"> 驱动器 C 中的卷是 系统</span><br><span class="line"> 卷的序列号是 5291-6C8F</span><br><span class="line"></span><br><span class="line"> C:\Users\lyz\venvdemo\Scripts 的目录</span><br><span class="line"></span><br><span class="line">2022/01/11  11:39    &lt;DIR&gt;          .</span><br><span class="line">2022/01/11  11:39    &lt;DIR&gt;          ..</span><br><span class="line">2022/01/11  11:31             2,268 activate</span><br><span class="line">2022/01/11  11:31               962 activate.bat</span><br><span class="line">2022/01/11  11:31            19,332 Activate.ps1</span><br><span class="line">2022/01/11  11:31               368 deactivate.bat</span><br><span class="line">2022/01/11  11:39           106,351 pip.exe</span><br><span class="line">2022/01/11  11:39           106,351 pip3.8.exe</span><br><span class="line">2022/01/11  11:39           106,351 pip3.exe</span><br><span class="line">2022/01/11  11:31           537,776 python.exe</span><br><span class="line">2022/01/11  11:31           536,752 pythonw.exe</span><br><span class="line">2022/01/11  11:31           710,144 pythonw_d.exe</span><br><span class="line">2022/01/11  11:31           711,168 python_d.exe</span><br><span class="line">              11 个文件      2,837,823 字节</span><br><span class="line">               2 个目录 79,060,901,888 可用字节</span><br></pre></td></tr></table></figure><blockquote><p>其中 activate 是linux下的可执行程序，</p><p>activate.bat 是windows 下的可执行程序，</p><p>activate.ps1 是powershell下的可执行程序</p></blockquote><p>在对应虚拟文件夹下，可以在Scripts 文件夹下直接启动虚拟环境，具体实现方式是将虚拟环境加入到PATH</p><p>全局 PATH：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;&#x27;, &#x27;C:\\Python38\\python38.zip&#x27;, &#x27;C:\\Python38\\DLLs&#x27;, &#x27;C:\\Python38\\lib&#x27;, &#x27;C:\\Python38&#x27;, &#x27;C:\\Python38\\lib\\site-packages&#x27;]</span><br></pre></td></tr></table></figure><p>在虚拟环境 Scripts 下打开python 显示PATH :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;&#x27;, &#x27;C:\\Python38\\python38.zip&#x27;, &#x27;C:\\Python38\\DLLs&#x27;, &#x27;C:\\Python38\\lib&#x27;, &#x27;C:\\Python38&#x27;, &#x27;C:\\Users\\lyz\\venvdemo&#x27;, &#x27;C:\\Users\\lyz\\venvdemo\\lib\\site-packages&#x27;]</span><br></pre></td></tr></table></figure><p>激活实际上是把虚拟环境加入到环境变量第一条，因为系统调用是找第一个可以找见的python.exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venvdemo) C:\Users\lyz\venvdemo\Scripts&gt;echo %PATH%</span><br><span class="line">C:\Users\lyz\venvdemo\Scripts;C:\Python38\Scripts\;C:\Python38\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files (x86)\NetSarang\Xshell 7\;C:\Program Files (x86)\NetSarang\Xftp 7\;C:\Program Files\Microsoft VS Code\bin;C:\Users\lyz\AppData\Local\Microsoft\WindowsApps;C:\JetBrains\IntelliJ IDEA 2021.1\bin</span><br></pre></td></tr></table></figure><h2><span id="在ide中配置">在IDE中配置</span></h2><p>只需要在IDE中选择Scripts&#x2F;python.exe 即可</p><h2><span id="保存和复制虚拟环境">保存和复制虚拟环境</span></h2><p>可以利用 pip 的 freeze 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>这样就可以导出到 requirements.txt文件中</p><p>还原时只需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程笔记(1)</title>
      <link href="/2021/12/30/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2021/12/30/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h1><span id="java多线程">Java多线程</span></h1><!-- toc --><ul><li><a href="#%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA">线程创建</a><ul><li><a href="#%E4%B8%80-%E7%BB%A7%E6%89%BFthread%E7%B1%BB">一、继承Thread类</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E4%B8%8B%E8%BD%BD%E5%99%A8">实现简单下载器</a></li></ul></li><li><a href="#%E4%BA%8C-%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3">二、实现Runnable接口</a></li><li><a href="#%E4%B8%89-%E5%AE%9E%E7%8E%B0callable%E6%8E%A5%E5%8F%A3">三、实现Callable接口</a></li></ul></li><li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8">线程不安全</a></li><li><a href="#%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91%E4%BE%8B%E5%AD%90">龟兔赛跑例子</a></li><li><a href="#%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">静态代理模式</a></li><li><a href="#lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F">Lamda表达式</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3">函数式接口：</a></li><li><a href="#%E7%AE%80%E5%8C%96">简化</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><!-- tocstop --><p>[TOC]</p><h2><span id="线程创建">线程创建</span></h2><blockquote><p>继承Thread类</p><p>实现Runnable接口</p><p>实现Callable接口 （了解）</p></blockquote><h3><span id="一-继承thread类">一、继承Thread类</span></h3><blockquote><ol><li>自定义线程类继承Thread类</li><li>重写run() 方法， 编写线程执行体</li><li>创建线程对象， 调用start() 方法启动线程</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程方式一： 继承Thread类, 重写run() 方法， 调用start开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run 方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// main 线程 主线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个线程对象</span></span><br><span class="line">        <span class="type">TestThread1</span> <span class="variable">testThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread1</span>();</span><br><span class="line">        <span class="comment">// 调用start方法开启线程</span></span><br><span class="line">        testThread1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="实现简单下载器">实现简单下载器</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习Thread ， 实现多线程同步下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 保存文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestThread2</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为： &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog2.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span> &#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="二-实现runnable接口">二、实现Runnable接口</span></h3><blockquote><ol><li>定义MyRunnable类实现Runnable接口</li><li>实现run() 方法， 编写线程执行体</li><li>创建线程对象， 调用start() 方法启动线程</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/ 创建线程方式<span class="number">2</span>： 实现runnable接口， 重写run方法， 执行线程须丢入runnable接口实现类。调用start方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run 方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建runnable接口的实现类对象</span></span><br><span class="line">        <span class="type">TestThread3</span> <span class="variable">testThread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象， 通过线程对象来开启我们的线程 -- 代理</span></span><br><span class="line"><span class="comment">//        Thread thread = new Thread(testThread3);</span></span><br><span class="line"><span class="comment">//        thread.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简写</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread3).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="三-实现callable接口">三、实现Callable接口</span></h3><blockquote><pre><code>    1. 实现callable接口， 需要返回值类型    1. 重写call方法， 需要抛出异常    1. 创建目标对象    4. 创建执行服务  ExecutorService ser = Executors.newFixedThreadPool(3);    1. 提交执行 Future&lt;Boolean&gt; r1 = ser.submit(t1);    1. 获取结果  Boolean rs1 = r1.get();    1. 关闭服务  ser.shutdownNow();</code></pre></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Callable好处： 可以定义返回值， 可以抛出异常   </span></span><br><span class="line"><span class="comment">// 线程创建方式三： 实现callable接口 &lt;Boolean&gt;是返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 保存文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestCallable</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为： &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog2.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建执行服务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ser</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">rs1</span> <span class="operator">=</span> r1.get();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">rs2</span> <span class="operator">=</span> r2.get();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">rs3</span> <span class="operator">=</span> r3.get();</span><br><span class="line">        </span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        System.out.println(rs2);</span><br><span class="line">        System.out.println(rs3);</span><br><span class="line">        <span class="comment">// 关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span> &#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="小结">小结</span></h2><p><strong>不建议使用 继承Thread类 ： 避免OOP单继承局限性</strong></p><p><strong>推荐使用 实现Runnable接口 ： 方便灵活，方便同一个对象被多个线程使用</strong></p><p><strong>Callable好处： 可以定义返回值， 可以抛出异常</strong></p><h2><span id="线程不安全">线程不安全</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个线程同时操作同一个对象</span></span><br><span class="line"><span class="comment">// 买火车票的例子</span></span><br><span class="line"><span class="comment">// 发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread4</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread4</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread4</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket, <span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket, <span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket, <span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="龟兔赛跑例子">龟兔赛跑例子</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i%<span class="number">10</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断比赛是否结束</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameOver(i);</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;跑了&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否完成比赛</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>) &#123;<span class="comment">//已经存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(steps &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;winner is &quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="静态代理模式">静态代理模式</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代理模式总结</span></span><br><span class="line"><span class="comment">// 真实对象和代理对象都要实现同一个接口</span></span><br><span class="line"><span class="comment">// 代理对象要代理真实角色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 好处：</span></span><br><span class="line"><span class="comment">//      代理对象可以做很多真实对象做不了的事</span></span><br><span class="line"><span class="comment">//      真实对象专注做自己的事</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; System.out.println(<span class="string">&quot;I LOVE YOU&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>(); <span class="comment">// 你要结婚</span></span><br><span class="line">        <span class="type">WeddingCompany</span> <span class="variable">weddingCompany</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(you);</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实角色， 你去结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师要结婚了，超开心&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理角色，帮助你结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="comment">// 代理真实目标角色</span></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="built_in">this</span>.target.HappyMarry(); <span class="comment">// 真实对象</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之后， 收尾款&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="lamda表达式">Lamda表达式</span></h2><blockquote><p><strong>避免匿名内部类定义过多</strong></p><p><strong>实质属于函数式编程的概念</strong></p><p><strong>(params) -&gt; expression[表达式]</strong></p><p><strong>(params) -&gt;statement[语句]</strong></p><p><strong>(params) -&gt; {statements}</strong></p><blockquote><p><strong>避免匿名内部类定义过多</strong></p></blockquote><blockquote><p><strong>只留下核心代码</strong></p></blockquote></blockquote><h3><span id="函数式接口">函数式接口：</span></h3><p><strong>任何接口，如果只包含唯一一个抽象方法，那他就是一个函数式接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> (<span class="type">int</span> a) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">520</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Ilove</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">love</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="简化">简化</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简化1. 参数类型</span></span><br><span class="line"><span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> (a)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line">love.love(<span class="number">520</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化2. 简化括号</span></span><br><span class="line"><span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> a-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line">love.love(<span class="number">520</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化3. 去掉花括号  (代码只有一行可简化)</span></span><br><span class="line"><span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> a-&gt; System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">love.love(<span class="number">520</span>);</span><br></pre></td></tr></table></figure><h3><span id="总结">总结</span></h3><p><strong>lambda表达式只有一行代码的情况下才能简化成为1行，如果有多行，用 {} 包裹</strong></p><p><strong>前提是： 接口为函数式接口</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EPnP</title>
      <link href="/2021/12/30/EPnP/"/>
      <url>/2021/12/30/EPnP/</url>
      
        <content type="html"><![CDATA[<h1><span id="epnp">EPnP</span></h1><!-- toc --><ul><li><a href="#pnp%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%9A%E4%B9%89">PnP问题的定义</a></li><li><a href="#control-points-barycentric-coordinates">Control Points &amp; Barycentric Coordinates</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E7%82%B9%E5%92%8C%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87">控制点和重心坐标</a></li><li><a href="#control-points%E7%9A%84%E9%80%89%E6%8B%A9">control points的选择</a></li><li><a href="#%E6%B1%82%E8%A7%A3%E6%8E%A7%E5%88%B6%E7%82%B9%E5%9C%A8%E6%91%84%E5%83%8F%E6%9C%BA%E5%9D%90%E6%A0%87%E4%B8%8B%E7%9A%84%E5%9D%90%E6%A0%87">求解控制点在摄像机坐标下的坐标</a></li><li><a href="#-%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD-">——————————–未完待续————————————</a></li></ul><!-- tocstop --><p>[TOC]</p><p>参考链接：<a href="https://blog.csdn.net/jessecw79/article/details/82945918">深入EPnP算法</a></p><p>针对以上链接，提取个人可以看懂的部分</p><h2><span id="pnp问题的定义">PnP问题的定义</span></h2><p>Perspective-n-Point问题(PnP)的已知条件：</p><blockquote><ol><li><p>n个世界坐标系中的3D参考点(3D reference points)坐标;</p></li><li><p>与这n个3D点对应的、投影在图像上的2D参考点(2D reference points)坐标;</p></li><li><p>摄像头的内参K;<br>求解PnP问题可以得到摄像头的位姿。</p></li></ol></blockquote><p>大多数非迭代的PnP算法会首先求解特征点的深度，以获得特征点在相机坐标系中的3D坐标，而EPnP算法将世界坐标系中的3D坐标表示为一组虚拟的控制点的加权和。对于一般情形，EPnP算法要求控制点的数目为4，且这4个控制点不能共面。因为摄像头的外参未知，这四个控制点在摄像头参考坐标系下的坐标是未知的。而如果能求解出这四个控制点在摄像头参考坐标系下的坐标，我们就可以计算出摄像头的位姿。</p><h2><span id="control-points-amp-barycentric-coordinates">Control Points &amp; Barycentric Coordinates</span></h2><h2><span id="控制点和重心坐标">控制点和重心坐标</span></h2><p>4个控制点在世界坐标系中的坐标为  $c_j^w  ,   j &#x3D; 1 , … , 4$ </p><p>在摄像头参考坐标系中的坐标为 $c_j^c ,   j &#x3D; 1 ,…, 4 $</p><p>需要指出，在EPnP论文和本文中，$ p_i^w , c_j^w , p_i^c 和c_j^c $ 均非齐次坐标。</p><p><strong>EPnP算法将参考点的坐标表示为控制点坐标的加权和：</strong><br>$$<br>p_i^w&#x3D; \sum_{j&#x3D;1}^4 α_{ij}c_{jw},\qquad  with \sum_{j&#x3D;1}^4 α_{ij}&#x3D;1<br>$$<br>其中 $α_i^j$ 是齐次barycentric坐标。</p><p>进一步，<br>$$<br>p_i^c &#x3D; \sum_{j&#x3D;1}^4 α_{ij}c_{jc}<br>$$<br>在上述推导过程中，用到了EPnP对权重 $α_i^j$ 的重要约束条件 $\sum_{j&#x3D;1}^4 α_{ij}&#x3D;1$ 。如果没有这个约束条件，上述推导将不成立。</p><p><strong>本质上就是：3D参考点的齐次坐标是控制点齐次坐标的线性组合。</strong></p><p>从上述分析过程中，我们也可以得到barycentric coodinates的计算方法：<br>$$<br>\begin{bmatrix}<br>α_{i1}  \ α_{i2} \  α_{i3} \  α_{i4}<br>\end{bmatrix}<br>&#x3D;C^{-1}<br>\begin{bmatrix}<br>P_i^w  \ 1<br>\end{bmatrix}<br>$$</p><h2><span id="control-points的选择">control points的选择</span></h2><p>原则上，只要控制点满足 C 可逆就可以，但是论文中给出了一个具体的控制点确定方法。</p><p>3D参考点集为 $ {p_i^w , i &#x3D; 1 , ⋯ ,n }$ , 选择3D参考点的重心为第一个控制点：<br>$$<br>c_1^w &#x3D; \frac 1n \sum_{i&#x3D;1} ^ n p_i^w<br>$$<br>进而得到矩阵：<br>$$<br>A &#x3D;<br>\begin{bmatrix}<br>p_1^{w^T} - c_1 ^{w^T} \<br>…\<br>p_n^{w^T} - c_1 ^{w^T}<br>\end{bmatrix}<br>$$<br>记 $A^T A$  的特征值为 $λ_{c,i} ,  i &#x3D; 1 , 2 , 3$ , 对应的特征向量为 $v_{c , i} , i &#x3D; 1 , 2 , 3 $ , 那么剩余的三个控制点可以按照下面的公式来确定：</p><p>$$<br>c_j^w &#x3D; c_1^w + λ_{c,j-1}^{\frac12} v_{c,j-1} ,\qquad j&#x3D;2,3,4<br>$$</p><h2><span id="求解控制点在摄像机坐标下的坐标">求解控制点在摄像机坐标下的坐标</span></h2><p>设K是摄像头的内参矩阵，可以通过标定获得。</p><p>$ { u_i }<em>i&#x3D;1,⋯,n  是参考点   {p_i}</em>{i&#x3D;1,2…,n}$  是的2D投影，那么<br>$$<br>∀i,  w_i<br>\begin{bmatrix}<br>u_i \ 1<br>\end{bmatrix}<br>&#x3D;Kp <em>i ^c &#x3D;K  \sum</em>{j&#x3D;1}^4 α _{ij} c _j^c<br>$$<br>把所有n个点串联起来，我们可以得到一个线性方程组：<br>$$<br>Mx&#x3D;0<br>$$<br>其中 $x &#x3D; [c_1^{c^T},c_2^{c^T}, c_3^{c^T},c_4^{c^T}]^T$  , x就是控制点在摄像头坐标系下的坐标，显然这是一个12 × 1 的向量，且 x 在M 的右零空间中。</p><h2><span id="未完待续">——————————–未完待续————————————</span></h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF转图片</title>
      <link href="/2021/12/25/PDF%E8%BD%AC%E5%9B%BE%E7%89%87/"/>
      <url>/2021/12/25/PDF%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1><span id="pdf转图片">PDF转图片</span></h1><!-- toc --><pre><code>+ [x86-64 可执行文件：](#x86-64-可执行文件)</code></pre><ul><li><a href="#%E6%B3%A8%E6%84%8F">注意：</a></li></ul><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E6%A0%B8%E5%BF%83">程序核心</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C">执行效果</a></li></ul><!-- tocstop --><p>[toc]</p><p><strong>完整源码：<a href="https://github.com/JiaZhengJingXianSheng/PDF2Image">https://github.com/JiaZhengJingXianSheng/PDF2Image</a></strong></p><h4><span id="x86-64-可执行文件">x86-64 可执行文件：</span></h4><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Qk_SCLNtnYLSxfu0ArF5-Q">https://pan.baidu.com/s/1Qk_SCLNtnYLSxfu0ArF5-Q</a><br>提取码：at0c</p></blockquote><p>执行源码须自己配置依赖，需配置traits，请自行搜索解决。打包后的可执行程序链接如上。</p><h3><span id="注意">注意：</span></h3><p>程序因未作错误判定，请选择PDF文件夹时，保证文件夹下仅有pdf文件。</p><h2><span id="程序核心">程序核心</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">pdf = fitz.<span class="built_in">open</span>(self.path + <span class="string">&quot;/&quot;</span> + file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐页读取PDF</span></span><br><span class="line"><span class="keyword">for</span> pg <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, pdf.page_count):</span><br><span class="line">page = pdf[pg]</span><br><span class="line">pm = page.get_pixmap()</span><br><span class="line"><span class="comment"># 开始写图像</span></span><br><span class="line">pm.save(self.path + <span class="string">&quot;/../Image/&quot;</span> + <span class="built_in">str</span>(file) + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(pg) + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">pdf.close()</span><br></pre></td></tr></table></figure><p>程序会在pdf文件夹同目录下生成Image文件夹，对应图片会放在以对应pdf名称为文件名的目录下。</p><h2><span id="执行效果">执行效果</span></h2><p><img src="https://s2.loli.net/2021/12/25/1URoFBX2d7Cb6ZK.png" alt="1.PNG"></p><ol><li>点击选择路径，选择PDF所在文件夹，当下方提示PDF路径即为成功。</li></ol><p><img src="https://s2.loli.net/2021/12/25/auhvk6TJrjBlINY.png" alt="2.PNG"></p><ol start="2"><li><p>点击开始执行，下方会显示执行进度，在执行结束后会出现成功的弹窗。</p><p><img src="https://s2.loli.net/2021/12/25/k4WYLpeaRGQrwTz.png" alt="3.PNG"></p></li></ol><p><img src="https://s2.loli.net/2021/12/25/nFvVCeWobpqml49.png" alt="4.PNG"></p><ol start="3"><li>接下来就可以去Image中找图片文件了，生活愉快😄</li></ol>]]></content>
      
      
      <categories>
          
          <category> 自编小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小工具 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听徐宗本院士SLM所记</title>
      <link href="/2021/12/18/%E5%90%AC%E5%BE%90%E5%AE%97%E6%9C%AC%E9%99%A2%E5%A3%ABSLM%E6%89%80%E8%AE%B0/"/>
      <url>/2021/12/18/%E5%90%AC%E5%BE%90%E5%AE%97%E6%9C%AC%E9%99%A2%E5%A3%ABSLM%E6%89%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="听徐宗本院士slm所记">听徐宗本院士SLM所记</span></h1><!-- toc --><ul><li><a href="#%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%8C%96">数据自动化</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E8%87%AA%E8%B0%83%E8%8A%82">网络自调节</a></li><li><a href="#%E5%BA%A6%E9%87%8F%E8%87%AA%E6%9E%84%E5%BB%BA">度量自构建</a></li><li><a href="#%E7%AE%97%E6%B3%95%E8%87%AA%E5%8A%A8%E5%8C%96">算法自动化</a></li></ul><!-- tocstop --><p>[toc]</p><p>起初是在大湾区科学论坛听到徐宗本院士所讲迁移学习，故作笔记如下</p><ol><li><p>新的学习任务是否和过去的任务有关联，或关联程度如何</p></li><li><p>学习机器模型搭建是否好</p></li><li><p>原训练集和现在的训练集是否在一个阈值内。</p></li></ol><h2><span id="数据自动化">数据自动化</span></h2><p>数据自选择</p><p>数据自校正</p><p>数据自生成</p><p>数据建模</p><h2><span id="网络自调节">网络自调节</span></h2><p>特征自调节</p><p>网络剪枝</p><p>自适应降维</p><p>信息单元参数化设计</p><p>结构组装</p><h2><span id="度量自构建">度量自构建</span></h2><p>样本相关损失函数确定</p><p>自适应损失函数确定</p><p>模型选择</p><h2><span id="算法自动化">算法自动化</span></h2><p>学习率自适应</p><p>Learning to optimize</p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> AutoML </tag>
            
            <tag> 迁移学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下模拟实现简单的Shell</title>
      <link href="/2021/12/15/Linux%E4%B8%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Shell/"/>
      <url>/2021/12/15/Linux%E4%B8%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Shell/</url>
      
        <content type="html"><![CDATA[<h1><span id="linux下模拟实现简单的shell">Linux下模拟实现简单的Shell</span></h1><!-- toc --><ul><li><a href="#%E4%B8%80-fork">一、 fork</a><ul><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li></ul></li><li><a href="#%E4%BA%8C-execvp">二、 execvp</a></li><li><a href="#%E4%B8%89-waitwaitpid">三、 wait&#x2F;waitpid</a></li><li><a href="#%E5%9B%9B-%E5%AE%9E%E7%8E%B0">四、 实现</a><ul><li><a href="#1-%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0">1. 相关函数</a></li><li><a href="#2-%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">2. 具体实现</a></li><li><a href="#3-%E7%BB%93%E6%9E%9C">3. 结果</a></li></ul></li></ul><!-- tocstop --><p>[toc]</p><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/Linux_Shell">https://github.com/JiaZhengJingXianSheng/Linux_Shell</a></strong> </p><h2><span id="一-fork">一、 fork</span></h2><p>fork系统调用用于创建一个新进程，称为<strong>子进程</strong>，它与进程（称为系统调用fork的进程）同时运行，此进程称为<strong>父进程</strong>。创建新的子进程后，两个进程将执行fork（）系统调用之后的下一条指令。子进程使用相同的<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/3219536">程序计数器</a>，相同的CPU寄存器，在父进程中使用的相同打开文件。</p><h3><span id="特点">特点</span></h3><p>  <strong>1）在父进程中，fork返回新创建子进程的进程ID；</strong><br>  <strong>2）在子进程中，fork返回0；</strong><br>  <strong>3）如果出现错误，fork返回一个负值；</strong></p><p>如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。因此我们可以通过判断fork返回值来确定进程是子进程还是父进程。</p><h2><span id="二-execvp">二、 execvp</span></h2><p><strong>execvp()</strong> 会从PATH所指的目录中查找符合参数file 的文件名，找到后便执行该文件，然后将第二个参数 <strong>argv</strong> 传给该欲执行的文件。</p><p>如果执行成功则函数不会返回，执行失败则直接返回-1，失败原因存于errno中。我们可以通过 <strong>perror()</strong> 函数来打印错误。</p><h2><span id="三-waitx2fwaitpid">三、 wait&#x2F;waitpid</span></h2><p><strong>wait:</strong>  父进程一旦调用了wait就立即阻塞自己，由wait自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回；如果没有找到这样一个子进程，wait就会一直阻塞在这里，直到有一个出现为止。</p><p><strong>waitpid:</strong>  暂时停止目前进程的执行, 直到有信号来到或子进程结束. 如果在调用时子进程已经结束, 则会立即返回子进程结束状态值. 子进程的结束状态值会由参数status 返回, 而子进程的进程识别码也会一快返回.</p><h2><span id="四-实现">四、 实现</span></h2><h3><span id="1-相关函数">1. 相关函数</span></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> pid = fork();</span><br></pre></td></tr></table></figure><p>调用fork函数可创建一个子进程，这边说的子进程就是我们平时所讲的线程。只不过在Linux下线程是用拷贝进程的形式实现，所以这边称为子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__file, <span class="type">char</span> *<span class="type">const</span> *__argv)</span></span><br></pre></td></tr></table></figure><p>execvp函数可以调用PATH下的命令，其中参数1为操作码（命令），参数2为操作码+操作数（命令+参数）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perror(<span class="string">&quot;fork error&quot;</span>);</span><br></pre></td></tr></table></figure><p>eperror函数用来打印错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wait(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>在父进程中调用wait函数，会阻塞父进程，并检查子进程是否退出，未退出则杀死子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir();</span><br></pre></td></tr></table></figure><p>由于父进程和子进程并不共享环境变量，子进程修改了当前工作目录的环境变量对父进程也没有什么影响，所以cd命令是无法简单用execvp函数实现的，这边会用到chdir函数。</p><h3><span id="2-具体实现">2. 具体实现</span></h3><p>首先从键盘读取一行命令。并将命令根据空格划分开，第一个参数即为命令，后续为参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> cmd[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(cmd, <span class="number">64</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *command[<span class="number">64</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *s = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="type">char</span> *token;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取第一个子字符串 */</span></span><br><span class="line">token = strtok(cmd, s);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">/* 继续获取其他的子字符串 */</span></span><br><span class="line"><span class="keyword">while</span> (token != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">      command[i] = token;</span><br><span class="line">      token = strtok(<span class="literal">NULL</span>, s);</span><br><span class="line">      i++;</span><br><span class="line">&#125;</span><br><span class="line">command[i] = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>至此我么就将命令按格式全部划分。</p><p>接下来我们去创建一个子线程，在子线程内，判断命令如果为cd则调用chdir()， 否则调用execvp() , 并用perror(), 打印错误。在父进程调用wait() 函数来回收子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(command[<span class="number">0</span>], <span class="string">&quot;exit&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid = fork(); <span class="comment">// 创建子进程（线程）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) <span class="comment">// 子进程</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(command[<span class="number">0</span>], <span class="string">&quot;cd&quot;</span>) == <span class="number">0</span>) <span class="comment">// cd命令用chdir函数</span></span><br><span class="line">        chdir(command[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        execvp(command[<span class="number">0</span>], command);</span><br><span class="line">        perror(<span class="string">&quot;fork error&quot;</span>); <span class="comment">// execvp未执行成功，fork失败</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wait(<span class="literal">NULL</span>); <span class="comment">// 子进程死亡回收</span></span><br></pre></td></tr></table></figure><h3><span id="3-结果">3. 结果</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework2$ g++ MyShell.cpp -o SHELL</span><br><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework2$ ./SHELL </span><br><span class="line">Shell&gt;&gt; pwd</span><br><span class="line">/home/lyz/Desktop/LinuxHomework2</span><br><span class="line">Shell&gt;&gt; ls </span><br><span class="line">MyShell.cpp  SHELL</span><br><span class="line">Shell&gt;&gt; cd ..</span><br><span class="line">Shell&gt;&gt; pwd</span><br><span class="line">/home/lyz/Desktop</span><br><span class="line">Shell&gt;&gt; exit</span><br><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework2$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们的shell运行正常</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯分类器</title>
      <link href="/2021/12/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
      <url>/2021/12/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1><span id="朴素贝叶斯分类器">朴素贝叶斯分类器</span></h1><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/Naive-Bayes-Classify">https://github.com/JiaZhengJingXianSheng/Naive-Bayes-Classify</a></strong></p><!-- toc --><ul><li><a href="#%E5%9F%BA%E7%A1%80">基础</a></li><li><a href="#%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87">条件概率</a></li><li><a href="#%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86">贝叶斯定理</a><ul><li><a href="#%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86">基础原理</a></li><li><a href="#%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86-1">贝叶斯定理</a></li></ul></li><li><a href="#%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB">贝叶斯分类</a><ul><li><a href="#%E5%A4%9A%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98">多分类问题</a></li></ul></li><li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB">代码实现 - 手写数字识别</a><ul><li><a href="#%E4%B8%80-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">一、 准备工作</a></li><li><a href="#%E4%BA%8C-%E5%85%B7%E4%BD%93%E5%AE%9E%E6%96%BD">二、 具体实施</a><ul><li><a href="#1%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E5%8C%85">1.导入相关包</a></li><li><a href="#2-%E8%AE%BE%E5%AE%9A%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0">2. 设定相关参数</a></li><li><a href="#3-%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E9%9B%86">3. 下载数据集</a></li><li><a href="#4-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86">4. 数据预处理</a></li><li><a href="#5-%E8%AE%AD%E7%BB%83">5. 训练</a></li><li><a href="#6-%E9%A2%84%E6%B5%8B">6. 预测</a></li><li><a href="#7-%E8%AF%84%E4%BC%B0">7. 评估</a></li></ul></li></ul></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="基础">基础</span></h2><p>贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况下，如何完成推理和决策任务。 而朴素贝叶斯分类器是基于独立假设的，即假设样本每个特 征与其他特征都不相关。 朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习 的样本集中能获取得非常好的分类效果。</p><h2><span id="条件概率">条件概率</span></h2><p>假设A,B是两个随机变量，它们的联合概率 <strong>P(A&#x3D;x,B&#x3D;y)</strong> 是指 <strong>A&#x3D;x和B&#x3D;y同时</strong> 发生的概率。</p><p>如果A和B是两个随机变量，且 <strong>P(B)≠0</strong> 。那么B条件下，A 的条件概率为<br>$$<br>P(A|B)&#x3D;\frac{P(A,B)}{P(B)}<br>$$<br>我们用Ω代表总样本空间，P(A|B)的隐含假设是，B确定要发生。当确定B发生时， 样本空间不再是Ω，而是缩小成B。我们在B样本空间中 寻找A发生的概率。</p><h2><span id="贝叶斯定理">贝叶斯定理</span></h2><p>贝叶斯定理 <strong>（Bayes theorem）</strong> ，是一种对属性集 <strong>X</strong>（现象，事件，特征向量）和类变量 <strong>Y</strong>（条件，原因，类）的概率关系建模的方法，是一种把类的先验知识和从数据中收集的新证据相结合的统计原理。</p><h3><span id="基础原理">基础原理</span></h3><p>$$<br>P(X|Y)P(Y)&#x3D;P(X,Y)&#x3D;P(Y|X)P(X)<br>$$</p><h3><span id="贝叶斯定理">贝叶斯定理</span></h3><p>$$<br>P(Y|X)&#x3D;\frac{P(X|Y)P(X)}{P(X)}<br>$$</p><h2><span id="贝叶斯分类">贝叶斯分类</span></h2><p>利用贝叶斯公式来计算样本属于各类的后验概率 $P(w_i |x)$<br>$$<br>P(w_i|x)&#x3D;\frac{P(x|w_i)P(w_i)}{P(x)}<br>$$<br>其中，x是特征向量， $w_i$ 是类标签。</p><p><strong>先验概率：</strong>   $P(w_i)$ 可以由大量的重复实验所获得的各类样本出 现的频率来近似获得，其基础是“大数定律”。</p><p>从测量中获得了样本的特征向量后，依照 $x和w_i$ 的组合确定似然函数 $P(x|w_i)$  ，再运用贝叶斯公式计算后验概率 $P(x|w_i)$ ，通过找出使后验概率 $P(x|w_i)$  最大的类 $w_i$ ，对样本进行分类； </p><p><strong>前提条件：</strong> 假设属性之间条件独立。</p><h3><span id="多分类问题">多分类问题</span></h3><p>已知样本分为 m 类 $w_1,w_2,…,w_m$ ，各类的先验概 率 $P(w_1),P(w_2),…,P(w_m)$  </p><p><strong>核心步骤：</strong> </p><ol><li><p>计算对应的各类条件概率 $P(x|w_k)$ </p></li><li><p>求出对应的后验概率 $P(w_k|x)$  ，即M 个判别函数 </p></li><li><p>寻找最大值：<br>$$<br>P(w_k|x) &#x3D; P(w_k)P(x|w_k)&#x3D;max{ P(w_j)P(x|w_j) }  \qquad 1 \le j \le m<br>$$</p></li><li><p>把x归于概率最大的那个类。</p></li></ol><h2><span id="代码实现-手写数字识别">代码实现 - 手写数字识别</span></h2><h3><span id="一-准备工作">一、 准备工作</span></h3><p>我们需要调用 <strong>sklearn.naive_bayes</strong> 下 <strong>GaussianNB</strong> 的包</p><p> <strong>GaussianNB</strong> 的定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">    --------</span><br><span class="line">    &gt;&gt;&gt; import numpy as np</span><br><span class="line">    &gt;&gt;&gt; X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])</span><br><span class="line">    &gt;&gt;&gt; Y = np.array([1, 1, 1, 2, 2, 2])</span><br><span class="line">    &gt;&gt;&gt; from sklearn.naive_bayes import GaussianNB</span><br><span class="line">    &gt;&gt;&gt; clf = GaussianNB()</span><br><span class="line">    &gt;&gt;&gt; clf.fit(X, Y)</span><br><span class="line">    GaussianNB()</span><br><span class="line">    &gt;&gt;&gt; print(clf.predict([[-0.8, -1]]))</span><br></pre></td></tr></table></figure><p>可以看出是将image和对应的label 分别传入fit函数，而fit函数定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def fit(self, X, y, sample_weight=None):</span><br><span class="line">    &quot;&quot;&quot;Fit Gaussian Naive Bayes according to X, y.</span><br><span class="line"></span><br><span class="line">    Parameters</span><br><span class="line">    ----------</span><br><span class="line">    X : array-like of shape (n_samples, n_features)</span><br><span class="line">        Training vectors, where `n_samples` is the number of samples</span><br><span class="line">        and `n_features` is the number of features.</span><br><span class="line"></span><br><span class="line">    y : array-like of shape (n_samples,)</span><br><span class="line">        Target values.</span><br></pre></td></tr></table></figure><p>这意味着我们必须把单个图片tensor全部转为一行，再把所有的图片拼接起来。</p><h3><span id="二-具体实施">二、 具体实施</span></h3><h4><span id="1导入相关包">1.导入相关包</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.naive_bayes import GaussianNB</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import torchvision</span><br><span class="line">import torch</span><br><span class="line">from torchvision import transforms</span><br></pre></td></tr></table></figure><h4><span id="2-设定相关参数">2. 设定相关参数</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">batch_size = 32</span><br></pre></td></tr></table></figure><h4><span id="3-下载数据集">3. 下载数据集</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data = torchvision.datasets.MNIST(<span class="string">&quot;data&quot;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transforms.ToTensor())</span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">val_data = torchvision.datasets.MNIST(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transforms.ToTensor())</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>这边我们使用pytorch下载并读取数据集，并转为tensor -&gt; <strong>transform&#x3D;transforms.ToTensor()</strong> 。</p><h4><span id="4-数据预处理">4. 数据预处理</span></h4><p><strong>MNIST数据集</strong> 包含 <strong>60000个训练样本和10000个测试样本</strong> ，每张图片都是 <strong>28x28</strong> 像素。事实上，上面的数据集尺寸并不是我们想要的，以训练集距离我们的尺寸是 <strong>[60000&#x2F;batch_size ， batch_size , 28 , 28 ]</strong> 的数据，我们要将其转换为 <strong>[60000, 28x28 ]</strong> 的形式。<strong>label的尺寸为60000行</strong>。</p><p>接下来我们定义预处理函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pretreatment</span>(<span class="params">data, batch_size</span>):</span><br><span class="line">    image = []</span><br><span class="line">    label = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        x, y = <span class="built_in">next</span>(<span class="built_in">iter</span>(data))</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">            image.append(x[ii].reshape(<span class="number">1</span>, -<span class="number">1</span>)[<span class="number">0</span>].tolist())</span><br><span class="line">            label.append(y[ii].item())</span><br><span class="line"></span><br><span class="line">    image = np.array(image)</span><br><span class="line">    label = np.array(label)</span><br><span class="line">    <span class="keyword">return</span> image, label</span><br></pre></td></tr></table></figure><p>我们对每一个迭代出的 <strong>x，y</strong> 实际上是 <strong>batch_size张图片</strong> ，我们遍历图片并将每张图片<strong>展平成一行</strong>。对于label我们只需要拿出他们的值即可，最终 <strong>转为numpy并返回</strong> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_image, train_label = pretreatment(train_loader, batch_size)</span><br><span class="line">val_image, val_label = pretreatment(val_loader, batch_size)</span><br></pre></td></tr></table></figure><p>至此我们就可以得到所需格式的数据</p><p><img src="https://s4.ax1x.com/2021/12/08/oWS0e0.png" alt="oWS0e0.png"></p><h4><span id="5-训练">5. 训练</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classify = GaussianNB().fit(train_image, train_label)</span><br></pre></td></tr></table></figure><p>训练相对容易，只需要将对应值传入即可。</p><h4><span id="6-预测">6. 预测</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_label = classify.predict(val_image)</span><br></pre></td></tr></table></figure><p>调用predict函数并传入预测数据集即可得到预测结果</p><p>我们这边打印10张图片，并在前面打印预测结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(1)</span><br><span class="line">print(&quot;预测结果为：&quot;,end=&quot; &quot;)</span><br><span class="line">for i in range(10):</span><br><span class="line">    plt.subplot(1, 10, i + 1)</span><br><span class="line">    plt.imshow(val_image[i].flatten().reshape(28, 28))</span><br><span class="line">    print(predict_label[i], end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;\n初始标签为：&quot;,end=&quot; &quot;)</span><br><span class="line">for i in range(10):</span><br><span class="line">    print(val_label[i],end=&quot; &quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/08/oWCv01.png" alt="oWCv01.png"></p><h4><span id="7-评估">7. 评估</span></h4><p>我们计算预测结果等于本身label的数量，除以总数即为预测精度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val_loader)):</span><br><span class="line">    <span class="keyword">if</span> val_label[i] == predict_label[i]:</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测精度为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>/<span class="built_in">len</span>(val_loader))</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/08/oWC3o6.png" alt="oWC3o6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉SLAM十四讲 Chapter4</title>
      <link href="/2021/12/08/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-4/"/>
      <url>/2021/12/08/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-4/</url>
      
        <content type="html"><![CDATA[<h1><span id="李群与李代数">李群与李代数</span></h1><!-- toc --><ul><li><a href="#%E4%B8%80-%E6%9D%8E%E7%BE%A4%E4%B8%8E%E6%9D%8E%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80">一、 李群与李代数基础</a><ul><li><a href="#1-%E6%9D%8E%E7%BE%A4">1. 李群</a></li><li><a href="#2-%E6%9D%8E%E4%BB%A3%E6%95%B0">2. 李代数</a></li></ul></li></ul><!-- tocstop --><p>[toc]</p><p><strong>参考书目 《视觉SLAM十四讲》 高翔 张涛 等著</strong> </p><p><strong>参考链接： <a href="https://zhuanlan.zhihu.com/p/33156814">https://zhuanlan.zhihu.com/p/33156814</a></strong> </p><h2><span id="一-李群与李代数基础">一、 李群与李代数基础</span></h2><h3><span id="1-李群">1. 李群</span></h3><p>三维旋转矩阵构成了 <strong>特殊正交群</strong>  $SO(3)$ ，变换矩阵构成了 <strong>特殊欧式群</strong> $SE(3)$<br>$$<br>SO(3)&#x3D;{R \in R^{3 \times 3} |RR^T&#x3D;I,det(R)&#x3D;1}<br>$$</p><p>$$<br>SE(3)&#x3D;{ T &#x3D; \begin{bmatrix} R &amp; t \ 0^T &amp; 1 \end{bmatrix} \in R^{4\times4} | R \in SO(3),t \in R^3}<br>$$</p><p><strong>它们对于加法是不封闭的</strong>，换句话说两个变换矩阵相加后得到的矩阵并不是一个变换矩阵。</p><p><strong>定义</strong>：<em>李群</em>就是具有 <strong>连续（光滑）</strong> 性质的群。</p><p>前面举的整数的加法的例子显然不是连续的，因而它不是李群。但SO(3) 和SE(3) 在实数空间上是<strong>连续</strong>的（机器人在三维空间中显然是连续地运动，而不会进行“瞬移”）。</p><p><strong>问题：</strong> 为什么要用到李群和李代数？避免一直是数学上的推导。我们用一个比较实际的例子。假设某个时刻我们预测机器人的位姿为  $T$ （待定值）, 它观测到了一个惯性坐标系下的点  $p$ 而产生了一个观测数据 $z$ ，它是该点在相机坐标系下的坐标，则可得<br>$$<br>z&#x3D;Tp+w<br>$$</p><p>其中，$w$ 是观测噪声。由于观测噪声的存在， $z$  无法严格满足式 $z&#x3D;Tp$  。因此而产生的误差  $e$  为<br>$$<br>e&#x3D;z-Tp<br>$$<br>若共有N 个观测值，那么就有N 个这样的式子。机器人的位姿估计就转变成寻找一个最优的 $T$ 使得整体的误差最小化：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathop%7B%5Cmin%7D_%7BT%7D+J(%5Cmathbf%7BT%7D)=%5Csum%5Climits%5EN_%7Bi=1%7D%7C%7C%5Cmathbf%7Bz%7D_i-%5Cmathbf%7BT%7D%5Cmathbf%7Bp%7D_i%7C%7C%5E2_2" alt="[公式]"></p><p>通常，直接求解上式得出最优的 $T$ 是很困难的（或计算量很大）。我们常常先给定一个猜测值（初始值） $T_0$  ，然后不断地对它进行迭代更新。而这个过程需要用到导数（可以想想梯度下降法)。</p><p>导数的定义，</p><p> <img src="https://www.zhihu.com/equation?tex=%5Cdot%7Bf(x)%7D=%5Clim_%7B%5CDelta+x+%5Cto+0%7D+%5Cfrac%7Bf(x+%5CDelta+x)-f(x)%7D%7B%5CDelta+x%7D" alt="[公式]"> </p><p>显然计算导数和进行更新时都要用到加法。但SO(3) 和SE(3) 上对矩阵加法的运算并不封闭。如果要继续采取这个迭代更新的策略势必要再想想办法，使得导数“可行”。而这就可以通过李群及其对应的李代数来实现。</p><h3><span id="2-李代数">2. 李代数</span></h3>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> SLAM </tag>
            
            <tag> 视觉SLAM十四讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉SLAM十四讲 Chapter3</title>
      <link href="/2021/12/03/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-3/"/>
      <url>/2021/12/03/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-3/</url>
      
        <content type="html"><![CDATA[<h1><span id="三维空间刚体运动">三维空间刚体运动</span></h1><!-- toc --><ul><li><a href="#%E4%B8%80-%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5">一、 旋转矩阵</a><ul><li><a href="#1-%E7%82%B9-%E5%90%91%E9%87%8F%E5%92%8C%E5%9D%90%E6%A0%87%E7%B3%BB">1. 点、向量和坐标系</a></li><li><a href="#2-%E5%9D%90%E6%A0%87%E7%B3%BB%E9%97%B4%E7%9A%84%E6%AC%A7%E5%BC%8F%E5%8F%98%E6%8D%A2">2. 坐标系间的欧式变换</a></li><li><a href="#3-%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%92%8C%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87">3. 变换矩阵和齐次坐标</a></li></ul></li><li><a href="#%E4%BA%8C-%E6%97%8B%E8%BD%AC%E5%90%91%E9%87%8F%E5%92%8C%E6%AC%A7%E6%8B%89%E8%A7%92">二、 旋转向量和欧拉角</a><ul><li><a href="#1-%E6%97%8B%E8%BD%AC%E5%90%91%E9%87%8F">1. 旋转向量</a></li><li><a href="#2-%E6%AC%A7%E6%8B%89%E8%A7%92">2. 欧拉角</a></li></ul></li><li><a href="#%E4%B8%89-%E5%9B%9B%E5%85%83%E6%95%B0">三、 四元数</a></li></ul><!-- tocstop --><p>[toc]</p><p><strong>参考书目 《视觉SLAM十四讲》 高翔 张涛 等著</strong> </p><p><strong>参考链接 <a href="https://zhuanlan.zhihu.com/p/32937868">https://zhuanlan.zhihu.com/p/32937868</a></strong> </p><h2><span id="一-旋转矩阵">一、 旋转矩阵</span></h2><h3><span id="1-点-向量和坐标系">1. 点、向量和坐标系</span></h3><p>我们一般用三维空间中的点来表示我们的物体，向量来表示点在空间中的移动，简单定义在这边不再赘述。</p><p>假定我们现在有向量 $a和b$ 用 <strong>$&lt;a,b&gt;$</strong> 表示向量之间夹角，那么对外积而言我们定义 <strong>a与b的外积 &#x3D; a^b</strong> ，外积的结果是一个向量，根据右手定则方向垂直于这两向量形成的平面，大小为 <strong>$|a||b|sin&lt;a,b&gt;$</strong>  ,我们把 <strong>a^</strong> 称为 <strong>反对称矩阵</strong> 。</p><h3><span id="2-坐标系间的欧式变换">2. 坐标系间的欧式变换</span></h3><p>对于两个坐标系之间的变化，我们可以用 <strong>一个旋转和一个平移</strong> 表示，这种运动称为 <strong>刚体运动</strong> 。</p><p>我们的 <strong>欧式变换</strong> 就是由 <strong>旋转和平移</strong> 组成。假定我们某点在 $[e_1,e_2,e_3]^T$ 坐标系下坐标为 $[a_1,a_2,a_3]^T$ , 在 $[{e_1}^{‘},{e_2}^{‘},{e_3}^{‘}]$ 下坐标为 $[{a_1}^{‘},{a_2}^{‘},{a_3}^{‘}]^T$ 。</p><p><img src="https://s2.loli.net/2021/12/04/tDuKlVjxX52rpA7.png" alt="1.PNG"></p><p>我们对左右两边同乘 $[{e_1}^{T},{e_2}^{T},{e_3}^{T}]^T$  ,左边的系数就变成了单位矩阵。</p><p><img src="https://s2.loli.net/2021/12/04/fK2dItVUuYaMw5p.png" alt="2.PNG"></p><p>我们把中间的矩阵定义为 <strong>$R旋转矩阵(Rotation \quad Matrix)$</strong>  , 该矩阵各分量是两个坐标系基的内积，由于基向量模长为1，所以实际上为各基向量夹角的余弦值，所以这个矩阵也称为 <strong>方向余弦矩阵(Direction  Cosine Matrix)</strong> ，或者 <strong>旋转矩阵</strong> 。</p><p>旋转矩阵是行列式为1的正交矩阵，反之，行列式为1的矩阵也是一个旋转矩阵。 我们可以将旋转矩阵的集合定义如下，称为 <strong>特殊正交群</strong> 。<br>$$<br>SO(n) &#x3D; { R \in R^{n \times n} |RR^T&#x3D;I, det(R)&#x3D;1 }<br>$$<br>通过旋转矩阵，就可以直接谈论两个坐标系之间的旋转变化，而不用再从基谈起。</p><p>在欧式变换中当我们把旋转和平移写在一个式子中，如下<br>$$<br>a_1 &#x3D; R_{12} a_2 + t_{12}<br>$$<br>其中 <strong>$a_1,a_2$</strong> 分别代表 <strong>a</strong> 在两个坐标系下的坐标， <strong>$R_{12}$</strong> 为把坐标系2的向量变换到坐标系1， <strong>$t_{12}$</strong> 代表平移向量。这样我们就可以实现一个点在两个坐标系下的转换。</p><h3><span id="3-变换矩阵和齐次坐标">3. 变换矩阵和齐次坐标</span></h3><p>我们上面引入的变换公式不是线性关系，当进行多次变换的话，算出的结果会很复杂，所以我们引入齐次坐标和变换矩阵。</p><p><img src="https://s2.loli.net/2021/12/04/lRWAKCkwQMzEsPU.png" alt="3.PNG"></p><p>这样写的好处是可以把旋转和平移写在一个矩阵内，使得整个关系变成线性关系。矩阵 <strong>T</strong> 称为 <strong>变换矩阵（Transform Matrix）</strong> 。这个矩阵又被称为 <strong>特殊欧式群（Special Euclidean Group）</strong> 。</p><p><img src="https://s2.loli.net/2021/12/04/hPIK9Syaerjp7Cc.png" alt="4.PNG"></p><h2><span id="二-旋转向量和欧拉角">二、 旋转向量和欧拉角</span></h2><h3><span id="1-旋转向量">1. 旋转向量</span></h3><p>在三维空间中，任意旋转都可以用 <strong>一个旋转轴和一个旋转角</strong> 来刻画，我们定义一个向量，方向与旋转轴一致，长度等于旋转角，这种向量被称为 <strong>旋转向量（轴角&#x2F;角轴，Axis-Angle）</strong> ，只需要一个三维向量即可描述旋转。</p><p>假定旋转轴为一个单位长度的向量 <strong>n</strong> ，角度为 <strong>$\theta$</strong> ,那么向量 <strong>$\theta n$</strong>  可表示这个旋转。从旋转向量到旋转矩阵的转换公式由 <strong>罗德里格斯公式（Rodrigues’s Formula）</strong> 表明。<br>$$<br>R &#x3D; cos \theta I + (1-cos \theta )nn^T+ sin \theta \hat n<br>$$<br>我们也可以反推出 <strong>$ \theta $</strong>  公式。<br>$$<br>\theta &#x3D; arccos \frac {tr(R)-1}{2}<br>$$<br>关于转轴 <strong>n</strong> 在旋转之后不发生改变<br>$$<br>Rn &#x3D; n<br>$$</p><h3><span id="2-欧拉角">2. 欧拉角</span></h3><p>除了旋转向量，我们也可以用 <strong>欧拉角</strong> 来紧凑地描述旋转。一个旋转可以分解成3次分别绕X，Y，Z 轴的旋转来表示，在航空摄影测量中，一般用 <strong>“翻转 - 航偏 - 俯仰”（roll - yaw - pitch)</strong> ，也即 <strong>XZY</strong> 来表示。先绕X 轴旋转roll 角度，再绕Y 轴旋转yaw 角度，最后按照Z 轴旋转pitch 角度。这三个旋转矩阵相乘就得到了总的旋转矩阵。</p><p>此时，就可以用 <strong>$[r,p,y]^T$</strong> 这三个量来描述任意旋转，这种表示方式会比其他方式更直观、更易理解。</p><p>但欧拉角会有一个重大缺点，就是著名的 <strong>万向锁问题（Gimbal Lock）</strong> ，在俯仰角为正负90度时，第一次旋转与第三次旋转将使用同一个轴，使得系统失去一个自由度，这被称为 <strong>奇异性</strong> 问题。</p><h2><span id="三-四元数">三、 四元数</span></h2><p>既然我们已经有了旋转向量和欧拉角，为什么还有个四元数（Quaternion）？因为欧拉角和旋转向量具有奇异性（万向锁问题）。<strong>不存在不带有奇异性的三维向量描述方式</strong>。因此我们需要用到四元数，<strong>它既是紧凑的，也没有奇异性</strong>。</p><p><strong>定义</strong>：一个四元数包含一个实部和三个虚部。<br>$$<br>q &#x3D; q_0 + q_1i + q_2j + q_3k &#x3D; [s,v]<br>$$<br>其中，后面的等式将四元数表达成一个标量和一个向量， $i,j,k$  表示四元数的三个虚部，满足：</p><p><img src="https://s2.loli.net/2021/12/04/ZRvmPhgfOMQIzbX.png" alt="5.PNG"></p><p>若一个四元数虚部全为0，则它是一个<strong>实四元数</strong>；如其实部为零，则称它为<strong>虚四元素</strong>。而且，<strong>一个虚四元数对应一个空间点</strong>。</p><p>我们能用<strong>单位四元数</strong>来表示三维空间中的任意一个旋转。我们先考虑下复数。在负数中，乘以i 表示在复平面内旋转90度。但在四元数中，情形却有微妙的不同：乘以i 表示旋转180度，这样才能保证 <strong>$ij&#x3D;-k$</strong>  的性质。而 <strong>$i^2 &#x3D; -1$</strong>  ，说明绕i 轴旋转360度后得到一个相反的东西，而要旋转720度（两周）才能得到它原先的样子。</p><p>假设某个旋转的旋转向量为 <strong>$ \theta n$</strong>  , 则<br>$$<br>q&#x3D;[cos \frac {\theta}{2} ,n_x sin \frac {\theta}{2}, n_ysin \frac {\theta}{2},n_zsin\frac {\theta}{2}]^T<br>$$<br>反之则有<br>$$<br>\theta &#x3D; 2 arccosq_0<br>$$</p><p>$$<br>[n_x,n_y,n_z]^T&#x3D;[q_1,q_2,q_3]^T&#x2F;sin \frac {\theta}{2}<br>$$</p><p>上式给人一种“转了一半”的感觉。将上式中的 $\theta$ 加上 $2\pi$ 后得到一个相同的旋转，但是对应的四元数却变成了 $-q$  . 所以，在四元数中，<strong>任意的旋转都可以由两个互为相反数的四元数表示</strong>。</p><p>而四元数和旋转矩阵的关系为：</p><p><img src="https://s2.loli.net/2021/12/04/fbWQDSNHvZ9aOo2.png" alt="6.PNG"></p><p>设矩阵 <strong>$ R&#x3D;{m_{ij},i,j \in [1,2,3]} $</strong>  , 则由上式可以推得：</p><p><img src="https://s2.loli.net/2021/12/04/UVvgmAPQ4qzs8wk.png" alt="7.PNG"></p><p><strong>NOTE</strong>: 由于 <strong>$q和-q$</strong> 表示同一个旋转，所以一个旋转矩阵对应的四元数表示<strong>并不惟一</strong>且存在其他转换公式。在实际中，如果 $q_0$ 接近于0，会造成其他3个数的解<strong>不稳定</strong>，应采用其他公式。</p><p><strong>总之：</strong> 四元数到旋转向量的转换公式为<br>$$<br>\theta &#x3D; 2arccosq_0<br>$$</p><p>$$<br>[n_x,n_y,n_z]^T &#x3D; [q_1,q_2,q_3]^T&#x2F;sin \frac {\theta}{2}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> SLAM </tag>
            
            <tag> 视觉SLAM十四讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下模仿实现readelf部分功能</title>
      <link href="/2021/12/02/ReadELF/"/>
      <url>/2021/12/02/ReadELF/</url>
      
        <content type="html"><![CDATA[<h1><span id="模仿实现linux下-readelf-工具部分功能">模仿实现Linux下 $readelf$ 工具部分功能</span></h1><!-- toc --><pre><code>+ [完整实现：](#完整实现)</code></pre><ul><li><a href="#%E5%A4%B4%E6%96%87%E4%BB%B6-h%E5%8A%9F%E8%83%BD">头文件 -h功能</a></li><li><a href="#%E6%AE%B5%E8%A1%A8-s%E5%8A%9F%E8%83%BD">段表 -S功能</a></li><li><a href="#-s-%E5%8A%9F%E8%83%BD">-s 功能</a></li><li><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接：</a></li><li><a href="#%E5%8F%82%E8%80%83%E4%B9%A6%E7%9B%AE">参考书目：</a></li></ul><!-- tocstop --><p>[toc]</p><h4><span id="完整实现">完整实现：</span></h4><p><strong><a href="https://github.com/JiaZhengJingXianSheng/ReadELF">https://github.com/JiaZhengJingXianSheng/ReadELF</a></strong> </p><p><strong>ELF</strong> 目标文件格式的最前部是 <strong>ELF文件头 (ELF  Header)</strong> ,它包含了描述整个文件的基本属性，比如 ELF 文件版本、目标机器型号、程序入口地址等。紧接是 ELF 文件各个段。其中ELF 文件中与段有关的重要结构就是 <strong>段表 (Section Header Table)</strong> ,该表描述了ELF 文件包含的所有段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其他属性。</p><p><img src="https://z3.ax1x.com/2021/12/02/otJO3j.png" alt="otJO3j.png"></p><p>在 <strong>linux</strong> 下elf的定义存放在  $&#x2F;usr&#x2F;include$ 下, 我们可以用 $readelf -h$ 命令加上文件来查看ELF头文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/include/elf.h</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/12/02/otJLCQ.png" alt="otJLCQ.png"></p><p>ELF 的文件头中定义了 ELF 魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF 重定位类型、硬件平台、硬件平台版本，入口地址、程序头入口和长度、段表的位置和长度及段的数量等。</p><p><strong>详细请参照： <a href="https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow">https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow</a></strong> </p><h2><span id="头文件-h功能">头文件 -h功能</span></h2><p><img src="https://z3.ax1x.com/2021/12/02/otJHUS.png" alt="otJHUS.png"></p><p>我们拿 ELF 文件头结构跟前面readelf输出的 ELF 文件头信息相比照，可以看到输出的信息与 ELF 文件头中的结构很多都一一对应。有点例外的是 “Elf64_ Ehdr” 中的e_ident这个成员对应了readelf 输出结果中的“Class”、Data”、“Version”、“OS&#x2F;ABI”和“ABI Version”这5个参数。剩下的参数与“EIf64_ Ehdr”中的成员都一一对应。</p><p><strong>细节请参照：<a href="https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html">https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html</a></strong> </p><p>所以我们在c语言实现时，只需要按照结构体定义依次取值，并判断输出。下面提供简单部分代码，完整代码会附在文章开头。其中reinterpret_cast运算符是用来处理无关类型之间的转换；它会产生一个新的值，这个值会有与原始参数（expression）有完全相同的比特位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> Elf64_Ehdr *header;</span><br><span class="line">      header = reinterpret_cast&lt;Elf64_Ehdr *&gt;(programMMap);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Magic:\t\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, header-&gt;e_ident[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;类型:\t\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="keyword">switch</span> (header-&gt;e_ident[<span class="number">4</span>])</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;无效\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;ELF32\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Elf64\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;错误\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;数据存储方式:\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="keyword">switch</span> (header-&gt;e_ident[<span class="number">5</span>])</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;未知格式\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;二进制补码 小端存储\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;二进制补码 大端存储\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;错误\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;版本:\t\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)header-&gt;e_ident[<span class="number">8</span>]);</span><br><span class="line">      <span class="comment">//部分代码</span></span><br></pre></td></tr></table></figure><h2><span id="段表-s功能">段表 -S功能</span></h2><p><img src="https://z3.ax1x.com/2021/12/02/otJb4g.png" alt="otJb4g.png"></p><p>ELF 文件中有很多各种各样的段，这个段表 (Section Header Table）就是保存这些段的基本属性的结构。段表是 ELF 文件中除了文件头以外最重要的结构，它描述了ELF 的各个段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其他属性。也就是说，ELF 文件的段结构就是由段表决定的，编译器、链接器和装载器都是依靠段表来定位和访问各个段的属性的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework1/build$ readelf -S print </span><br><span class="line">There are 31 section headers, starting at offset 0x3978:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .interp           PROGBITS         0000000000000318  00000318</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     1</span><br><span class="line">  [ 2] .note.gnu.propert NOTE             0000000000000338  00000338</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     8</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE             0000000000000358  00000358</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 4] .note.ABI-tag     NOTE             000000000000037c  0000037c</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="line">  [ 5] .gnu.hash         GNU_HASH         00000000000003a0  000003a0</span><br><span class="line">       0000000000000024  0000000000000000   A       6     0     8</span><br><span class="line">  [ 6] .dynsym           DYNSYM           00000000000003c8  000003c8</span><br><span class="line">       00000000000000a8  0000000000000018   A       7     1     8</span><br><span class="line">  [ 7] .dynstr           STRTAB           0000000000000470  00000470</span><br><span class="line">       00000000000000b7  0000000000000000   A       0     0     1</span><br><span class="line">  [ 8] .gnu.version      VERSYM           0000000000000528  00000528</span><br><span class="line">       000000000000000e  0000000000000002   A       6     0     2</span><br><span class="line">  [ 9] .gnu.version_r    VERNEED          0000000000000538  00000538</span><br><span class="line">       0000000000000020  0000000000000000   A       7     1     8</span><br><span class="line">  [10] .rela.dyn         RELA             0000000000000558  00000558</span><br><span class="line">       00000000000000c0  0000000000000018   A       6     0     8</span><br><span class="line">  [11] .rela.plt         RELA             0000000000000618  00000618</span><br><span class="line">       0000000000000018  0000000000000018  AI       6    24     8</span><br><span class="line">  [12] .init             PROGBITS         0000000000001000  00001000</span><br><span class="line">       000000000000001b  0000000000000000  AX       0     0     4</span><br><span class="line">  [13] .plt              PROGBITS         0000000000001020  00001020</span><br><span class="line">       0000000000000020  0000000000000010  AX       0     0     16</span><br><span class="line">  [14] .plt.got          PROGBITS         0000000000001040  00001040</span><br><span class="line">       0000000000000010  0000000000000010  AX       0     0     16</span><br><span class="line">  [15] .plt.sec          PROGBITS         0000000000001050  00001050</span><br><span class="line">       0000000000000010  0000000000000010  AX       0     0     16</span><br><span class="line">  [16] .text             PROGBITS         0000000000001060  00001060</span><br><span class="line">       0000000000000185  0000000000000000  AX       0     0     16</span><br><span class="line">  [17] .fini             PROGBITS         00000000000011e8  000011e8</span><br><span class="line">       000000000000000d  0000000000000000  AX       0     0     4</span><br><span class="line">  [18] .rodata           PROGBITS         0000000000002000  00002000</span><br><span class="line">       0000000000000004  0000000000000004  AM       0     0     4</span><br><span class="line">  [19] .eh_frame_hdr     PROGBITS         0000000000002004  00002004</span><br><span class="line">       0000000000000044  0000000000000000   A       0     0     4</span><br><span class="line">  [20] .eh_frame         PROGBITS         0000000000002048  00002048</span><br><span class="line">       0000000000000108  0000000000000000   A       0     0     8</span><br><span class="line">  [21] .init_array       INIT_ARRAY       0000000000003d98  00002d98</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [22] .fini_array       FINI_ARRAY       0000000000003da0  00002da0</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [23] .dynamic          DYNAMIC          0000000000003da8  00002da8</span><br><span class="line">       0000000000000210  0000000000000010  WA       7     0     8</span><br><span class="line">  [24] .got              PROGBITS         0000000000003fb8  00002fb8</span><br><span class="line">       0000000000000048  0000000000000008  WA       0     0     8</span><br><span class="line">  [25] .data             PROGBITS         0000000000004000  00003000</span><br><span class="line">       0000000000000010  0000000000000000  WA       0     0     8</span><br><span class="line">  [26] .bss              NOBITS           0000000000004010  00003010</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     1</span><br><span class="line">  [27] .comment          PROGBITS         0000000000000000  00003010</span><br><span class="line">       000000000000002a  0000000000000001  MS       0     0     1</span><br><span class="line">  [28] .symtab           SYMTAB           0000000000000000  00003040</span><br><span class="line">       0000000000000618  0000000000000018          29    46     8</span><br><span class="line">  [29] .strtab           STRTAB           0000000000000000  00003658</span><br><span class="line">       0000000000000203  0000000000000000           0     0     1</span><br><span class="line">  [30] .shstrtab         STRTAB           0000000000000000  0000385b</span><br><span class="line">       000000000000011a  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure><p>我们通过起始地址加上e_shoff来指向我们的段表，并根据具体细节判断输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sTable = <span class="built_in">reinterpret_cast</span>&lt;Elf64_Shdr *&gt;(programMMap + header-&gt;e_shoff);</span><br></pre></td></tr></table></figure><h2><span id="-s-功能">-s 功能</span></h2><p>ELF符号表定义如下</p><p>接下来我们用段表的段偏移当作索引去找拿出他的symbol_table，并判断是否为 $.dynamic和.symtab$ 根据具体对应值输出即可。</p><p>详细对应关系在 $&#x2F;usr&#x2F;include&#x2F;elf.h$ 宏定义的备注。</p><p><a href="https://imgtu.com/i/otJ7E8"><img src="https://z3.ax1x.com/2021/12/02/otJ7E8.png" alt="otJ7E8.png"></a></p><p>细节可参考：<a href="https://bbs.pediy.com/thread-255670.htm">https://bbs.pediy.com/thread-255670.htm</a></p><h2><span id="参考链接">参考链接：</span></h2><p><strong><a href="https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow">https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow</a></strong> </p><p><strong><a href="https://bbs.pediy.com/thread-255670.htm">https://bbs.pediy.com/thread-255670.htm</a></strong> </p><p><strong><a href="https://github.com/cyyzero/readelf">https://github.com/cyyzero/readelf</a></strong> </p><p><strong><a href="https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html">https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html</a></strong> </p><h2><span id="参考书目">参考书目：</span></h2><p>《程序员的自我修养》 俞甲子、石凡、潘爱民著</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简单策略模式</title>
      <link href="/2021/11/30/Java%E7%AE%80%E5%8D%95%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/11/30/Java%E7%AE%80%E5%8D%95%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1><span id="java策略模式">Java策略模式</span></h1><p>参考书目 《大话设计模式》 程杰 清华大学出版社</p><p><strong>代码链接</strong> <strong><a href="https://github.com/JiaZhengJingXianSheng/Calculate_By_Java_Version2">https://github.com/JiaZhengJingXianSheng/Calculate_By_Java_Version2</a></strong></p><p>本文是对上篇 <strong>Java简单工厂模式</strong> 的重写，以达到代码更易于维护的目的。</p><!-- toc --><ul><li><a href="#%E4%B8%80-%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3">一、 定义接口</a></li><li><a href="#%E4%BA%8C-%E5%AE%9A%E4%B9%89%E8%BF%90%E7%AE%97">二、 定义运算</a></li><li><a href="#%E4%B8%89-%E7%AD%96%E7%95%A5%E5%AE%9A%E4%B9%89">三、 策略定义</a></li><li><a href="#%E5%9B%9B-%E6%B5%8B%E8%AF%95">四、 测试</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><!-- tocstop --><p>[TOC]</p><h2><span id="一-定义接口">一、 定义接口</span></h2><p>与上篇不同，这篇我们选择定义接口，并在后续功能实现中， $implement$ 我们的接口。</p><p>接口定义加上参数，方便后期调用，定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="二-定义运算">二、 定义运算</span></h2><p>接下来定义各种方法，来实现我们的接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class OperationAdd implements OperationInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getResult(double A, double B) &#123;</span><br><span class="line">        return A + B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSub</span> <span class="keyword">implements</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A - B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationMul</span> <span class="keyword">implements</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A * B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationDiv</span> <span class="keyword">implements</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (B == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;除数不能为0 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A / B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，还是去判断除数是否为0，为零抛出异常。</p><h2><span id="三-策略定义">三、 策略定义</span></h2><p>接下来我们在策略结构体中，定义我们的操作接口，并书写构造函数。</p><p>再根据我们的具体策略，返回其对应计算函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    OperationInterface strategy;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Operation</span><span class="params">(OperationInterface strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据具体策略对象，调用其方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">ContextInterface</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.getResult(A,B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="四-测试">四、 测试</span></h2><p>在主函数中定义策略，并传入数值 $A,B$ 与操作符 $operate$ 。</p><p>根据操作符，生成对应运算，并构造策略。</p><p>最终调用具体策略对应的计算函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Operation</span> <span class="variable">operation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">A</span> <span class="operator">=</span> in.nextDouble();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operate</span> <span class="operator">=</span> in.next();</span><br><span class="line">        <span class="type">double</span> <span class="variable">B</span> <span class="operator">=</span> in.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (operate) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationAdd</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationSub</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationMul</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationDiv</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(A + <span class="string">&quot; + &quot;</span> + B + <span class="string">&quot; = &quot;</span> + operation.ContextInterface(A, B));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line">1 + 2</span><br><span class="line">1.0 + 2.0=3.0</span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2><p>策略模式和工厂模式是比较类似的，工厂模式是通过继承抽象计算函数，并实现，本质来说和接口基本一样。 <strong>策略模式是用来封装算法的，但在实际中，我们发现可以用它来封装几乎任何类型的规则。</strong></p><p> <strong>在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的 $Context$  对象。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简单工厂模式</title>
      <link href="/2021/11/26/Java%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/11/26/Java%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1><span id="java简单工厂模式">Java简单工厂模式</span></h1><p>参考书目 《大话设计模式》 程杰 清华大学出版社</p><p><strong>代码链接</strong>  <strong><a href="https://github.com/JiaZhengJingXianSheng/Calculator_By_Java">https://github.com/JiaZhengJingXianSheng/Calculator_By_Java</a></strong> </p><p>我们在编写程序时为了容易修改，通常会用 <strong>封装、继承、多态</strong> 来降低程序的耦合度。</p><p>比如我们要实现一个简单的计算器功能，具体功能为传入两个数值和一个操作符，返回计算结果。</p><!-- toc --><ul><li><a href="#%E4%B8%80-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%88%9B%E5%BB%BA">一、 抽象类创建</a></li><li><a href="#%E4%BA%8C-%E5%AE%9A%E4%B9%89%E8%BF%90%E7%AE%97">二、 定义运算</a></li><li><a href="#%E4%B8%89-%E5%B7%A5%E5%8E%82%E5%AE%9A%E4%B9%89">三、 工厂定义</a></li><li><a href="#%E5%9B%9B-%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0">四、 计算函数</a></li><li><a href="#%E4%BA%94-%E6%B5%8B%E8%AF%95">五、 测试</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="一-抽象类创建">一、 抽象类创建</span></h2><p>通常我们会在一个抽象类内部定义主要的信息，比如输出输出等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">_numberA</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">_numberB</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get_numberA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _numberA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_numberA</span><span class="params">(<span class="type">double</span> _numberA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._numberA = _numberA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get_numberB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _numberB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_numberB</span><span class="params">(<span class="type">double</span> _numberB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._numberB = _numberB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义一个抽象计算函数，方便我们在不同操作下覆写这个操作。</p><h2><span id="二-定义运算">二、 定义运算</span></h2><p>接下来我们分别定义各种运算，继承Operation的信息，并覆写计算函数 $getResult()$ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationAdd</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() + get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSub</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() - get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationMul</span> <span class="keyword">extends</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() * get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationDiv</span> <span class="keyword">extends</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(get_numberB() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;除数不能为0 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() / get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在除法过程中判断被除数是否为0，为零抛出异常。</p><h2><span id="三-工厂定义">三、 工厂定义</span></h2><p>接下来定义一个简单的工厂，传入我们的运算符，进行判断，并返回第二步所定义的操作类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title function_">createOperation</span><span class="params">(String operate)</span> &#123;</span><br><span class="line">        <span class="type">Operation</span> <span class="variable">oper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operate) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationAdd</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationSub</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationMul</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationDiv</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="四-计算函数">四、 计算函数</span></h2><p>定义计算函数，传入操作数以及操作符，在函数内部用第三步的工厂生成操作类，并设置 _ $ numberA$  和 _ $numberB$  ，最终调用计算函数并返回，即可实现所有功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> numberA , <span class="type">double</span> numberB, String operate)</span>&#123;</span><br><span class="line">        Operation oper;</span><br><span class="line">        oper = SimpleFactory.createOperation(operate);</span><br><span class="line">        oper.set_numberA(numberA);</span><br><span class="line">        oper.set_numberB(numberB);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> oper.getResult();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="五-测试">五、 测试</span></h2><p>在主函数中调用 $calculate()$ 函数并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(calculate(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;+&quot;</span>));</span><br><span class="line">        System.out.println(calculate(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        System.out.println(calculate(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line">3.0</span><br><span class="line">0.5</span><br><span class="line">0.0</span><br><span class="line">java.lang.Exception: 除数不能为0 </span><br><span class="line">at OperationDiv.getResult(OperationDiv.java:9)</span><br><span class="line">at Calculator.calculate(Calculator.java:12)</span><br><span class="line">at Calculator.main(Calculator.java:22)</span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2><p>用工厂模式我们可以降低维护成本，比如我们想增加一种运算，只需要用新运算去继承我们初始的抽象类，覆写计算函数，并在工厂中加入我们的操作即可，这大大降低了我们代码的耦合度。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2021/11/25/%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/11/25/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1><span id="c常用排序">C++常用排序</span></h1><!-- toc --><ul><li><a href="#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序</a></li><li><a href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序</a></li><li><a href="#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">直接插入排序</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a></li><li><a href="#%E5%A0%86%E6%8E%92%E5%BA%8F">堆排序</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F">自定义排序</a></li></ul><!-- tocstop --><p>[toc]</p><p><strong>代码链接</strong> <strong><a href="https://github.com/JiaZhengJingXianSheng/SortByCPlusPlus">https://github.com/JiaZhengJingXianSheng/SortByCPlusPlus</a></strong></p><h2><span id="选择排序">选择排序</span></h2><p>选择排序可以将序列看作有序序列和无序序列的结合。如何理解这句话，我们拿第一个值当作标定，和后面所有值对比，找出小于标定的结果并进行交换。那么一轮交换就可以选出一个最小值，当我们标定不断后移就可实现排序。<strong>当然，标定应该在倒数第二个值终止，因为最后一个值并无后续。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectSort</span><span class="params">(<span class="type">int</span>* &amp;arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到第一层遍历，是从第一个值到倒数第二个值，第二层遍历是从 $i+1$ 的值到最后一个值。对内部进行判断，如果$i$对应的结果大于 $j$ 的结果，进行交换。当然如果想逆序，只需要将 $&lt;$ 改为 $&gt;$ </p><h2><span id="冒泡排序">冒泡排序</span></h2><p>冒泡排序是用相邻的两个值不断比较，将两个相邻的结果按照 <strong>[由大到小、由小到大]</strong> 交换 ，那么每次都可一冒出一个最小的结果，或最大的结果，这也是冒泡排序名字的由来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span>* &amp;arr,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;len<span class="number">-1</span>-i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层遍历的 $i$ 和上面的选择排序不同，这边 $i$ 的含义是需要对长度为 $len$ 的数组冒泡 $len-1$ 次。</p><h2><span id="直接插入排序">直接插入排序</span></h2><p>直接插入排序是从第二个值开始，不断去前面有序序列中寻找自己位置并插入的过程，原理比较简单。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">directInsertSort</span><span class="params">(<span class="type">int</span> *&amp;arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, pivot;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        pivot = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> <span class="keyword">and</span> pivot &lt; arr[j]; j--) &#123; <span class="comment">// 后移并判断位置</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = pivot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现是从第2个值开始遍历，不断去寻找自己所在位置。其中第二个 $for$ 循环，是  $arr[i]$ 从后往前找应该插入的位置，并实现后移操作，把插入的位置让出来。</p><h2><span id="快速排序">快速排序</span></h2><p>快速排序是选取一个数当作基准 $pivot$ ，原理是将比他大的值放在 $pivot$ 右边，小的值放在左边。具体如何实现，比如我们常用第一个值当作初始基准，<strong>从右边往左找，找到第一个小于基准的值</strong>，将他与基准交换，然后从基准交换前的位置，<strong>从左往右找第一个大于基准的值</strong>，进行交换，依次往复，基准的位置就可以确定。<strong>所有左边的结果都小于他，右边都大于他</strong>。</p><p>而事实上我们真正使用时并不需要实时交换，我们用一个变量 $pivot$ 备份了基准，当最终结束的时候才写入确定的位置，然后换个基准，重复上述操作。有点类似于 $cache-memory$ 系统中的写回法。当然在实际实现中，我们一般选择对左右两边进行递归，这样能大大减少代码量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span>* &amp;arr,<span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left&lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = left, j = right, pivot = arr[left];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j]&gt;= pivot) <span class="comment">// 从右向左找第一个小于基准的值</span></span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) <span class="comment">//防止越过自己本身</span></span><br><span class="line">                arr[i++] = arr[j];</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i]&lt; pivot) <span class="comment">// 从左向右找第一个大于等于基准的值</span></span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) <span class="comment">//防止越过自己本身</span></span><br><span class="line">                arr[j--] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = pivot;</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, left, i - <span class="number">1</span>); <span class="comment">//左边递归</span></span><br><span class="line">        <span class="built_in">quickSort</span>(arr, i + <span class="number">1</span>, right); <span class="comment">//右边递归</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中 $i$ 和 $j$ 是用来查找位置，我们没有必要来回写入 $pivot$ 的值，只需要记录他的位置，最终写入就可以。而 $left$ 和 $right$ 是记录标定的，在这个代码里因为我们的初始标定选择是最左边的值，所以 $left$ 就是我们基准交换前的位置。</p><h2><span id="堆排序">堆排序</span></h2><p>我们对于堆排序算法，本质上是通过调整 <strong>[大根堆&#x2F;小根堆]</strong> 来寻找 <strong>[最大值&#x2F;最小值]</strong> 的过程。</p><p>对于二叉树而言，我们如果根节点索引从 $1$ 开始，那么左子树索引等于双亲索引 $&#x2F;2$ ，右子树索引等于双亲索引 $&#x2F;2$ 向下取整。如果根节点索引从 $0$ 开始，那么左子树索引等于双亲索引 $&#x2F;2+1$ ， 右子树索引为双亲索引 $&#x2F;2+2$ 。</p><p>我们以大根堆的调整算法举例，我们令 $i$ 等于最后一个无序值的双亲索引，查看左右子树中键值大于双亲的节点，与双亲交换，然后 $i$ - -  ，我们就可以将最大的值调整到根节点。然后将根节点的值与最后一个无序节点交换，将换下来的最大值记录为有序序列。这样每次都可以找到一个最值，有点类似于选择排序，只不过选取最值的方法不同，这样不断重复就可以得到有序序列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adjust</span><span class="params">(<span class="type">int</span>* &amp;arr, <span class="type">int</span> len, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span>*index + <span class="number">1</span>; <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span>*index + <span class="number">2</span>;<span class="comment">// 右孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> midIndex = index;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;len &amp;&amp; arr[left] &gt; arr[midIndex])</span><br><span class="line">        midIndex = left;</span><br><span class="line">    <span class="keyword">if</span>(right&lt;len &amp;&amp; arr[right] &gt; arr[midIndex])</span><br><span class="line">        midIndex = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(midIndex != index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = arr[midIndex];</span><br><span class="line">        arr[midIndex] = arr[index];</span><br><span class="line">        arr[index] = temp;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, len, midIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让 $left$ 和 $right$ 分别指向左右孩子，判断左右孩子是否大于双亲节点，大于则更新 $midIndex$  <strong>[ 下移，并指向大于自己的子节点索引 ]</strong> ，并将交换两值，在对更新后的 $midIndex$ 递归，就可以得出完整的大根堆。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span>* &amp;arr, <span class="type">int</span> len )</span></span>&#123;</span><br><span class="line">    <span class="comment">// 从最后一个无序节点双亲开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, len, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根节点和最后一个无序节点交换</span></span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, i, <span class="number">0</span>);    <span class="comment">// 对无序节点继续生成大根堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序时从最后一个无序节点的双亲开始，调整大根堆。 因为 $len$ 个节点我们原则上只需要遍历 $len-1$ 次即可，将生成的大根堆根节点和最后一个无序节点交换，再对剩下的无序节点生成大根堆。通过 $len-1$ 次循环就可以得到最终的序列。</p><p>我们本质上是借用二叉树，实现普通顺序表的排序。</p><h2><span id="自定义排序">自定义排序</span></h2><p>其实我们可以通过使用 $algorithm$ 内的 $sort$ 函数自定义规则，具体实现如下。</p><p>比如我们有一个学生的结构体，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们希望按照自己的规则对学生进行排名，比如我们希望在正常按成绩排序的过程中，碰到成绩相同的学生我们认为你年纪更小一点的同学应该排名靠前一点，那么如何定义规则。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(stu a, stu b )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 成绩相同用年龄从小往大排序</span></span><br><span class="line">    <span class="keyword">if</span>(a.score == b.score)</span><br><span class="line">        <span class="keyword">return</span> a.age&lt;b.age;</span><br><span class="line">    <span class="comment">//成绩不同，直接根据成绩好坏排序</span></span><br><span class="line">    <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以写一个 $bool$ 返回值的函数，传入两学生，根据预先希望的规则返回 $a$ 和 $b$ 的状态情况。</p><p>当然调用比较容易传入起始地址以及偏移量即可，这边偏移量并非实打实的偏移量，排序函数会用偏移量这个值乘以 $sizeof(STU)$ 当作真实偏移量。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seq2Seq</title>
      <link href="/2021/11/24/Seq2Seq/"/>
      <url>/2021/11/24/Seq2Seq/</url>
      
        <content type="html"><![CDATA[<h1><span id="seq2seq">Seq2Seq</span></h1><!-- toc --><ul><li><a href="#%E7%BC%96%E7%A0%81%E5%99%A8-%E8%A7%A3%E7%A0%81%E5%99%A8">编码器-解码器</a><ul><li><a href="#%E7%BC%96%E7%A0%81%E5%99%A8">编码器</a></li><li><a href="#%E8%A7%A3%E7%A0%81%E5%99%A8">解码器</a></li></ul></li><li><a href="#%E5%AE%9E%E7%8E%B0">实现</a></li></ul><!-- tocstop --><p>[toc]</p><p>以往的循环神经网络，输入的是不定长的序列，输出确是定长的，我们选取最长词并通过对短的词扩充来实现输出定长。但有些问题的输出不是定长的，以机器翻译为例，输入一段英语，输出对应法文，输入和输出大概率不定长，比如</p><blockquote><p>英文：Beat it.      法文：Dégage !<br>英文：Call me.    法文：Appelle-moi !</p></blockquote><p>当输入输出序列不定长时，我们可以采用编码器-解码器（encoder-decoder）或Seq2Seq实现。</p><p>论文参考：<strong><a href="https://arxiv.org/abs/1409.3215">https://arxiv.org/abs/1409.3215</a></strong></p><h2><span id="编码器-解码器">编码器-解码器</span></h2><p>编码器和解码器分别对应输入序列和输出序列的两个循环神经网络。</p><p><img src="https://z3.ax1x.com/2021/11/23/opxcPH.png" alt="opxcPH.png"></p><h3><span id="编码器">编码器</span></h3><p>编码器将长度可变的输入序列转换成形状固定的上下文变量，并且将输入序列的信息在该上下文变量中进行编码。</p><p>假设输入序列是$x_1,x_2,x_3…x_T$ ,其中$x_t$是输入文本序列中第t个词原，用$h_t$ 来表示上一时间的隐藏状态，用函数$f$来描述为<br>$$<br>h_t&#x3D;f(x_t,h_t−1)<br>$$<br>编码器的背景向量<br>$$<br>c &#x3D; q(h_1,…,h_T)<br>$$<br>如果我们希望编码器既包含正向传递的信息，又包含反向传递的信息，可以使用双向循环神经网络。</p><h3><span id="解码器">解码器</span></h3><p>通过编码器，假定我们的输入序列为 $x_1,x_2,…,x_T$ 。输出序列为$y_1，y_2,…,y_T$ ,我们希望每个时刻的输出向量，既取决于之前的输出又取决于背景向量。所以我们可以用循环神经网络$g$ 来实现，其中$s_t$ 为$t’$ 世界的解码器隐藏变量，该隐藏变量为  $s_{t’} &#x3D; g(y_{t’-1},c,s_{t’-1})$  一般编码器和解码器会使用<strong>多层</strong>循环神经网络。</p><h2><span id="实现">实现</span></h2><p>通常我们会在解码器后面增加一个FC，并且现在我们实现中一般采用嵌入层（Embedding）来获得输入序列中每个词元的特征向量。</p><p><img src="https://z3.ax1x.com/2021/11/24/oPmyFJ.png" alt="oPmyFJ.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoEncoder</title>
      <link href="/2021/11/22/AutoEncoder/"/>
      <url>/2021/11/22/AutoEncoder/</url>
      
        <content type="html"><![CDATA[<h1><span id="autoencoder">AutoEncoder</span></h1><!-- toc --><ul><li><a href="#%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9E%8B">简单模型</a></li><li><a href="#pca-%E5%92%8C-autoencoder">PCA 和 AutoEncoder</a></li><li><a href="#dropout-autoencoder">Dropout AutoEncoder</a></li><li><a href="#adversarial-autoencoders">Adversarial AutoEncoders</a></li><li><a href="#ijumlvpnghttpsz3ax1xcom20211121ijumlvpng"><img src="https://z3.ax1x.com/2021/11/21/IjUmLV.png" alt="IjUmLV.png"></a></li><li><a href="#autoencoder%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">AutoEncoder代码实现</a></li><li><a href="#%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90">结果分析</a></li></ul><!-- tocstop --><p>[TOC]</p><p>自编码 AutoEncoder 是一种无监督学习的算法，他利用反向传播算法，让目标值等于输入值。</p><p>比如对于一个神经网络，输入一张图片，通过一个 Encoder 神经网络，输出一个比较 “浓缩的”feature map。之后将这个 feature map 通过一个 Decoder 网络，结果又将这张图片恢复。</p><p><img src="https://z3.ax1x.com/2021/11/21/IjlLw9.png" alt="IjlLw9.png"></p><p>如果说我们的数据集特别大，对于直接训练而言性能肯定较低。但如果我们对数据特征进行提取，缩减输入信息量，学习起来就相对轻松。</p><h2><span id="简单模型">简单模型</span></h2><p>下面是一个AutoEncoder的三层模型，其中 $W^* &#x3D; W^T$ </p><p><img src="https://z3.ax1x.com/2021/11/21/IjGU6f.png" alt="IjGU6f.png"></p><p>2010年，Vincent 在论文中表明，只用单组W就可以，所以W*没有必要去训练。</p><p><strong><a href="http://jmlr.org/papers/volume11/vincent10a/vincent10a.pdf">http://jmlr.org/papers/volume11/vincent10a/vincent10a.pdf</a></strong></p><p>如果实数作为输入，损失函数为  $L(f(x)) &#x3D; {1\over2}\sum_{k}(\hat x_k - x_k)^2$</p><h2><span id="pca-和-autoencoder">PCA 和 AutoEncoder</span></h2><p><strong>PCA又叫主成分分析法，是将n维特征映射到k维上</strong>，本质上是个线性变化。而AutoEncoder是基于DNN的，因为有激活函数，所以可以进行非线性变换。下图是MNIST数据集经过 PCA 和AutoEncoder 降维再还原后的效果。</p><p><img src="https://z3.ax1x.com/2021/11/21/Ijtim8.png" alt="Ijtim8.png"></p><p>可以看到AutoEncoder效果是明显优于PCA。</p><h2><span id="dropout-autoencoder">Dropout AutoEncoder</span></h2><p>Dropout AutoEncoder是不断让神经元死亡以达到缩减特征的效果。</p><p>下图是一个简单的神经元图。</p><p><img src="https://z3.ax1x.com/2021/11/21/IjtvHU.png" alt="IjtvHU.png"></p><h2><span id="adversarial-autoencoders">Adversarial AutoEncoders</span></h2><p>Adversarial AutoEncoders是利用GAN网络的思想，利用一个生成器 G 和一个判别器 D 进行对抗学习，以区分 Real data 和 Fake data。</p><p>具体思路是这样的，我现在需要一个满足 p(z) 概率分布的 z 向量，但是 z 实际上满足 q(z) 分布。那么我就首先生成一个满足 p(z) 分布的 z′ 向量，打上 Real data 的标签，然后将 z 向量打上 Fake data 的标签，将它们俩送入判别器 D。判别器 D 通过不断学习，预测输入 input 是来自于 Real data（服从预定义的 p(z) 分布）还是 Fake data（服从 q(z) 分布）。由于这里的 p(z) 可以是我们定义的任何一个概率分布，因此整个对抗学习的过程实际上可以认为是通过调整 Encoder 不断让其产生数据的概率分布 q(z) 接近我们预定义的 p(z)。</p><h2><span id><img src="https://z3.ax1x.com/2021/11/21/IjUmLV.png" alt="IjUmLV.png"></span></h2><h2><span id="autoencoder代码实现">AutoEncoder代码实现</span></h2><p><strong><a href="https://github.com/JiaZhengJingXianSheng/AutoEncoder">https://github.com/JiaZhengJingXianSheng/AutoEncoder</a></strong></p><h2><span id="结果分析">结果分析</span></h2><p>下面这张图是原本mnist数据集的图。</p><p><img src="https://z3.ax1x.com/2021/11/22/IzPy0f.png" alt="IzPy0f.png"></p><p>在epochs &#x3D; 1 情况下，在经过编码器编码，解码器恢复的结果为下图。</p><p><img src="https://z3.ax1x.com/2021/11/22/IzP678.png" alt="IzP678.png"></p><p>因为DNN是有损失的，所以在恢复的过程中肯定是有部分信息丢失。但可以通过训练次数的提升，来减少信息丢失，下图为epochs &#x3D; 50 情况下恢复出来的结果，可以看到效果明显优于上图。</p><p><img src="https://z3.ax1x.com/2021/11/22/IzkRhD.png" alt="IzkRhD.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux CMake工程目录结构</title>
      <link href="/2021/11/18/CMake%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2021/11/18/CMake%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1><span id="linux-cmake工程目录结构">Linux CMake工程目录结构</span></h1><!-- toc --><ul><li><a href="#%E4%B8%BB%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95">主文件目录</a></li><li><a href="#cmakeliststxt">.&#x2F;CMakeLists.txt</a></li><li><a href="#libcmakeliststxt">.&#x2F;lib&#x2F;CMakeLists.txt</a></li><li><a href="#srccmakeliststxt">.&#x2F;src&#x2F;CMakeLists.txt</a></li><li><a href="#vscode%E8%B0%83%E8%AF%95">vscode调试</a><ul><li><a href="#cmakeliststxt-1">.&#x2F;CMakeLists.txt</a></li><li><a href="#%E4%BF%AE%E6%94%B9launchjson">修改launch.json</a></li></ul></li></ul><!-- tocstop --><p>[TOC]</p><h2><span id="主文件目录">主文件目录</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./lib/</span><br><span class="line">./src/</span><br><span class="line">./build</span><br><span class="line">./CMakeLists.txt</span><br></pre></td></tr></table></figure><h2><span id="x2fcmakeliststxt">.&#x2F;CMakeLists.txt</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMAKE_MINIMUM_REQUIRED( VERSION 3.10 )</span><br><span class="line"></span><br><span class="line">PROJECT(MAIN)</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./lib )</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./src)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="x2flibx2fcmakeliststxt">.&#x2F;lib&#x2F;CMakeLists.txt</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AUX_SOURCE_DIRECTORY(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line">SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line">ADD_LIBRARY(LIB STATIC $&#123;DIR_LIB_SRCS&#125;)</span><br></pre></td></tr></table></figure><h2><span id="x2fsrcx2fcmakeliststxt">.&#x2F;src&#x2F;CMakeLists.txt</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE_DIRECTORIES($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line">  </span><br><span class="line">SET(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line">AUX_SOURCE_DIRECTORY(./ DIR_SRCS)</span><br><span class="line"></span><br><span class="line">ADD_EXECUTABLE(MAIN $&#123;DIR_SRCS&#125;)</span><br><span class="line"></span><br><span class="line">TARGET_LINK_LIBRARIES(MAIN LIB)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="vscode调试">vscode调试</span></h2><h3><span id="x2fcmakeliststxt">.&#x2F;CMakeLists.txt</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CMAKE_MINIMUM_REQUIRED( VERSION 3.10 )</span><br><span class="line"></span><br><span class="line">PROJECT(MAIN)</span><br><span class="line"></span><br><span class="line">add_definitions(-std=c++14)</span><br><span class="line">SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAG_DEBUG &quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g -ggdb&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAG_RELEASE &quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;)</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./lib )</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./src)</span><br></pre></td></tr></table></figure><h3><span id="修改launchjson">修改launch.json</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/build/bin/MAIN&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CMake </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++主存层面数据交换</title>
      <link href="/2021/11/18/C-%E4%B8%BB%E5%AD%98%E5%B1%82%E9%9D%A2%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/"/>
      <url>/2021/11/18/C-%E4%B8%BB%E5%AD%98%E5%B1%82%E9%9D%A2%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1><span id="c-互换指针指向内存结果">C++ 互换指针指向内存结果</span></h1><!-- toc --><ul><li><a href="#1-%E4%BA%92%E6%8D%A2%E6%8C%87%E9%92%88%E6%8C%87%E5%90%91%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%9C">1. 互换指针指向内存结果</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C">运行结果</a></li></ul></li><li><a href="#2-%E7%AE%80%E5%8D%95%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2">2. 简单变量交换</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-1">运行结果</a></li></ul></li></ul><!-- tocstop --><p>[TOC]</p><h2><span id="1-互换指针指向内存结果">1. 互换指针指向内存结果</span></h2><p><strong>将命令参数前两个值在主存中互换并输出。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mySwap.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Origin info is: &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;argv[<span class="number">1</span>]&lt;&lt;<span class="string">&quot; \tb: &quot;</span>&lt;&lt;argv[<span class="number">2</span>]&lt;&lt;std::endl;</span><br><span class="line">        <span class="built_in">mySwap</span>(argv[<span class="number">1</span>],argv[<span class="number">2</span>]);</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Has been swaped info is: &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;argv[<span class="number">1</span>]&lt;&lt;<span class="string">&quot; \tb: &quot;</span>&lt;&lt;argv[<span class="number">2</span>]&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">char</span>* &amp;a,<span class="type">char</span>*  &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">char</span>* temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="运行结果">运行结果</span></h3><p><img src="https://z3.ax1x.com/2021/11/18/ITAosH.png" alt="ITAosH.png"></p><h2><span id="2-简单变量交换">2. 简单变量交换</span></h2><p><strong>下面提供了一个简单的变量互换代码。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a= b;</span><br><span class="line">        b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        std::cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Original info is &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;std::endl;</span><br><span class="line">        <span class="built_in">swap</span>(a,b);</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Has been swaped info is &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="运行结果">运行结果</span></h3><p><img src="https://z3.ax1x.com/2021/11/18/ITAIQe.png" alt="ITAIQe.png"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉域泛化</title>
      <link href="/2021/11/12/%E8%A7%86%E8%A7%89%E5%9F%9F%E6%B3%9B%E5%8C%96/"/>
      <url>/2021/11/12/%E8%A7%86%E8%A7%89%E5%9F%9F%E6%B3%9B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1><span id="domain-generalization-in-vision-a-survey">Domain Generalization in Vision: A Survey</span></h1><h1><span id="视觉域泛化">视觉域泛化</span></h1><!-- toc --><ul><li><a href="#%E8%AE%BA%E6%96%87%E5%9C%B0%E5%9D%80">论文地址</a></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="论文地址">论文地址</span></h2><p><strong><a href="https://arxiv.org/abs/2103.02503">https://arxiv.org/abs/2103.02503</a></strong></p><h2><span id="简介">简介</span></h2><p>大多数统计学习算法强烈依赖过于简化的假设，即源数据和目标数据是独立的同分布，而忽略了实践中常见的分布外（OOD）场景。为了克服域转移问题以及目标数据的缺失，引入了域泛化（DG）问题，DG 的目标是使用来自单个或多个相关但不同的源域的数据来学习模型，以便该模型可以很好地泛化到任何 OOD 目标域。</p><p>研究 DG 的最初动机是利用多源数据来学习对不同边际分布具有不变性的表示，使用多个域允许模型发现跨源域的稳定模式，从而更好地泛化到看不见的域。然而，单源 DG 方法不需要用于学习的领域标签，因此它们也适用于多源场景。</p><p>给定标记的源域 S，DG 的目标是使用来自 S 的数据学习模型 f，以便该模型可以很好地泛化到一个看不见的域 T。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不变风险最小化</title>
      <link href="/2021/11/12/%E4%B8%8D%E5%8F%98%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
      <url>/2021/11/12/%E4%B8%8D%E5%8F%98%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1><span id="invariant-risk-minimization">Invariant Risk Minimization</span></h1><h1><span id="不变风险最小化">不变风险最小化</span></h1><!-- toc --><ul><li><a href="#%E8%AE%BA%E6%96%87%E9%93%BE%E6%8E%A5">论文链接</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">基本介绍</a></li><li><a href="#%E6%96%87%E4%B8%AD%E4%BE%8B%E5%AD%90">文中例子</a></li><li><a href="#irm">IRM</a></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="论文链接">论文链接</span></h2><p><strong><a href="https://arxiv.org/abs/1907.02893">https://arxiv.org/abs/1907.02893</a></strong></p><h2><span id="基本介绍">基本介绍</span></h2><p>现有机器学习是通过不断减小训练误差，来实现复杂的预测模型，但计算机是不加选择的提取训练数据的相关性， <strong>correlation-versus-causation</strong>【相关性和因果性】有时并不一样，此论文是在研究利用因果关系拓展不变相关性的问题。</p><h2><span id="文中例子">文中例子</span></h2><p>文中提到一个例子，是对奶牛和骆驼分类。但由于数据集中，大多数奶牛照片是在牧场拍摄的，背景色为绿色，骆驼是在沙漠中。因此神经网络在训练时，不断降低loss值，最终其实是将绿色背景归类为奶牛，米色背景归为骆驼。所以<strong>训练出来的结果是不具有泛化性的</strong>。</p><h2><span id="irm">IRM</span></h2><p><strong>不变风险最小化 (IRM)</strong> 是从多次训练中估计非线性、不变、因果预测因子来实现分布外泛化。</p><p><strong>重点：为训练引入约束，将约束表述为惩罚。IRM的目标是构建泛化分布外的预测器。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentiment Analysis For RNN</title>
      <link href="/2021/11/08/Sentiment-Analysis-For-RNN/"/>
      <url>/2021/11/08/Sentiment-Analysis-For-RNN/</url>
      
        <content type="html"><![CDATA[<h1><span id="sentiment-analysis-for-rnn">Sentiment Analysis For RNN</span></h1><h1><span id="循环神经网络进行情感分析">循环神经网络进行情感分析</span></h1><!-- toc --><ul><li><a href="#%E5%BC%95%E8%A8%80"><strong>引言：</strong></a></li><li><a href="#rnn%E8%A1%A8%E5%BE%81%E6%96%87%E6%9C%AC">RNN表征文本</a></li><li><a href="#%E8%AE%AD%E7%BB%83%E5%92%8C%E8%AF%84%E4%BC%B0%E6%A8%A1%E5%9E%8B">训练和评估模型</a></li><li><a href="#%E8%AE%AD%E7%BB%83%E6%83%85%E5%86%B5">训练情况</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81">完整实现代码</a></li></ul><ul><li><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接</a></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="引言"><strong>引言：</strong></span></h2><p>对于情感分析，如果简化来看可以分为<strong>正向情绪</strong>和<strong>负向情绪</strong>，我们可以将情感分析视为文本分类任务，因此我们可以将预训练的词向量应用于情感分析。我们可以用预训练的GloVe模型表示每个标记，并反馈到RNN中。</p><p><img src="https://z3.ax1x.com/2021/11/08/I8V7i6.png" alt="I8V7i6.png"></p><h2><span id="rnn表征文本">RNN表征文本</span></h2><p>在文本分类任务中，要将可变长度的文本序列转为固定长度。可以通过<strong>nn.Embedding()<strong>函数获得单独的预训练GloVe，再去通过</strong>双向LSTM</strong>，最后在去通过一个<strong>全连接层</strong>做一个二分类，即可实现RNN表征文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.embedding = nn.Embedding(vocab_size, embed_size)</span><br><span class="line">self.encoder = nn.LSTM(embed_size, num_hiddens, num_layers=num_layers,bidirectional=<span class="literal">True</span>)</span><br><span class="line">self.decoder = nn.Linear(<span class="number">4</span> * num_hiddens, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">embeddings = self.embedding(inputs.T)</span><br><span class="line">outputs, _ = self.encoder(embeddings)</span><br><span class="line">encoding = torch.cat((outputs[<span class="number">0</span>], outputs[-<span class="number">1</span>]), dim=<span class="number">1</span>)</span><br><span class="line">outs = self.decoder(encoding)</span><br></pre></td></tr></table></figure><h2><span id="训练和评估模型">训练和评估模型</span></h2><p>选用<strong>IMDB数据集</strong>，该数据集包含<strong>50 000 条严重两极分化的评论。 训练集 测试集各 25000 条评论，并都包含 50% 的正面评论和 50% 的负面评论。</strong>加载我们预训练的GloVe模型后调用训练函数进行训练，用100维GloVe下方展示模型情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(embedding): Embedding(49346, 100)</span><br><span class="line">(encoder): LSTM(100, 100, num_layers=2, bidirectional=True)</span><br><span class="line">(decoder): Linear(in_features=400, out_features=2, bias=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="训练情况">训练情况</span></h2><p><img src="https://z3.ax1x.com/2021/11/09/ItZBnS.png" alt="ItZBnS.png"></p><p>用训练好的模型预测两个简单的句子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_sentiment(net, vocab, <span class="string">&#x27;this movie is so great&#x27;</span>)</span><br></pre></td></tr></table></figure><p>‘positive’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_sentiment(net, vocab, &#x27;this movie is so bad&#x27;)</span><br></pre></td></tr></table></figure><p>‘negative’</p><h2><span id="完整实现代码">完整实现代码</span></h2><p><a href="https://github.com/JiaZhengJingXianSheng/Sentiment-Analysis-For-RNN">https://github.com/JiaZhengJingXianSheng/Sentiment-Analysis-For-RNN</a></p><h1><span id="参考链接">参考链接</span></h1><p><a href="https://d2l.ai/chapter_natural-language-processing-applications/sentiment-analysis-rnn.html">https://d2l.ai/chapter_natural-language-processing-applications/sentiment-analysis-rnn.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG16实现分类任务</title>
      <link href="/2021/11/07/VGG16%E5%AE%9E%E7%8E%B0%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/"/>
      <url>/2021/11/07/VGG16%E5%AE%9E%E7%8E%B0%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1><span id="vgg16实现分类任务">VGG16实现分类任务</span></h1><!-- toc --><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li><li><a href="#%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0">原理简述</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%9B%86">数据集</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86">数据预处理</a></li><li><a href="#%E8%AE%AD%E7%BB%83%E7%BB%93%E6%9E%9C">训练结果</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E9%93%BE%E6%8E%A5">完整代码链接</a></li></ul><!-- tocstop --><p>[toc]</p><p>VGG是2014年由牛津大学著名研究组VGG(Visual Geometry Group)提出，斩获当年ImageNet竞赛中定位任务第一名和分类任务第二名。</p><h2><span id="原理图">原理图</span></h2><p><img src="https://z3.ax1x.com/2021/11/05/IKeETO.png" alt="IKeETO.png"></p><h2><span id="原理简述">原理简述</span></h2><p>例如有张224x224的RGB图片，我们让他通过两个卷积核为3的卷积层，再通过最大池化层<strong>（核尺寸为2，步距为2）</strong>。至于卷积层的输入输出维度，参考下图，我们一般常用VGG16模型，<strong>最终用多个FC实现分类，也可将FC换成卷积核为1的卷积层</strong>。</p><p><img src="https://z3.ax1x.com/2021/11/05/IKeZkD.png" alt="IKeZkD.png"></p><h2><span id="数据集">数据集</span></h2><p>同样选用本人常用的海贼王数据集来测试，可以根据个人需求修改。</p><p><strong>下面提供一个简单数据集。</strong></p><p>Kaggle的鸟儿分类数据集，共315个分类</p><p><a href="https://www.kaggle.com/gpiosenka/100-bird-species">https://www.kaggle.com/gpiosenka/100-bird-species</a></p><p><strong>可以用kaggle命令选择下载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle datasets download -d gpiosenka/100-bird-species</span><br></pre></td></tr></table></figure><h2><span id="数据预处理">数据预处理</span></h2><p>讲图片预resize为224x224的图片，并进行随机翻转，<strong>可参考图像增广</strong></p><p><strong><a href="https://www.quarkhackers.space/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/">https://www.quarkhackers.space/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/</a></strong></p><p>最终转为Tensor，并进行归一化处理。</p><p><strong>参考代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transforms.Compose([transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                                 transforms.RandomHorizontalFlip(),</span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br></pre></td></tr></table></figure><h2><span id="训练结果">训练结果</span></h2><p><img src="https://z3.ax1x.com/2021/11/07/I3kvnI.png" alt="I3kvnI.png"></p><p><strong>结果分析</strong></p><p>在训练过程，针对此数据集，VGG16的学习率不宜过高，过高会出现loss不收敛</p><p><strong>在loss为0.01时结果如下</strong></p><p><img src="https://z3.ax1x.com/2021/11/07/I3AK4U.png" alt="I3AK4U.png"></p><p><strong>VGG网络acc可达到百分之90以上，只是对于小数据集而言，模型过于繁重，可选用层数少的模型，并且在后面3层FC，可根据个人需求修改。</strong></p><h2><span id="完整代码链接">完整代码链接</span></h2><p><strong><a href="https://github.com/JiaZhengJingXianSheng/VGG16">https://github.com/JiaZhengJingXianSheng/VGG16</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类 </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近似训练</title>
      <link href="/2021/10/18/%E8%BF%91%E4%BC%BC%E8%AE%AD%E7%BB%83/"/>
      <url>/2021/10/18/%E8%BF%91%E4%BC%BC%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1><span id="近似训练">近似训练</span></h1><!-- toc --><ul><li><a href="#%E8%B4%9F%E9%87%87%E6%A0%B7">负采样</a></li><li><a href="#%E5%88%86%E5%B1%82softmax">分层SoftMax</a></li></ul><!-- tocstop --><p>[toc]</p><p>​        在对跳元模型和连续词袋模型的梯度计算过程中需要求和，所以对于词典而言，求和的梯度计算成本十分巨大。所以我们可以采用负采样和分层softmax</p><h2><span id="负采样">负采样</span></h2><p>​        负采样修改了原目标函数，放弃softmax转而使用sigmoid来实现。</p><p>​        sigmoid的函数定义如下：</p><p><img src="https://z3.ax1x.com/2021/10/18/5NaqUS.jpg" alt="5NaqUS.jpg"></p><p>​        我们从最大化文本序列中所有这些事件的联合概率开始训练词嵌入，如果只算正向部分，那对于给定长度为TT的文本序列，以<strong>w^(t)<strong>表示时间步</strong>t</strong>的词，并使上下文窗口为<strong>m</strong>，最大化联合概率为：</p><p><img src="https://z3.ax1x.com/2021/10/18/5NdcMn.jpg" alt="5NdcMn.jpg"></p><p>​        <strong>而负采样添加从预定义分布中采样的负样本。</strong></p><p>​        用Wk表示噪声词，则Wk与中心词的窗口内上下文词的条件概率为：</p><p><img src="https://z3.ax1x.com/2021/10/18/5N0xvd.jpg" alt="5N0xvd.jpg"></p><p>​        用<strong>v和u</strong>分别表示中心词和上下文词的两个向量，用<strong>it和hk</strong>分别表示窗口内词与噪声词在时间步<strong>t</strong>处的索引，则件概率的对数损失为：</p><p><img src="https://z3.ax1x.com/2021/10/18/5NrgEt.jpg" alt="5NrgEt.jpg"></p><p>​        <strong>总结：每个训练步的梯度计算成本与词表大小无关，而是线性依赖于采样K。当将超参数K设置为较小的值时，在负采样的每个训练步处的梯度的计算成本较小。</strong></p><h2><span id="分层softmax">分层SoftMax</span></h2><p>​        <strong>分层softmax</strong>使用二叉树，其中树的每个叶节点表示词表中的一个词。原理图如下</p><p><img src="https://z3.ax1x.com/2021/10/18/5NsyzF.jpg" alt="5NsyzF.jpg"></p><p>​        若用二叉树来实现中心词和上下次的分割，那在寻找的时候会议二的n次方的形式缩减计算成本，因为二叉树查找的时间复杂度为log以2为底 n，所以我们的运算数量级可以减小到log以2为底的结点个数数量级，计算成本显著降低。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perceptron</title>
      <link href="/2021/10/17/Perceptron/"/>
      <url>/2021/10/17/Perceptron/</url>
      
        <content type="html"><![CDATA[<h1><span id="perceptron">Perceptron</span></h1><!-- toc --><ul><li><a href="#%E5%8E%9F%E7%90%86">原理</a></li><li><a href="#%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95">优化方法</a></li><li><a href="#softmax">SoftMax</a></li><li><a href="#mlp">MLP</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">代码实现</a></li><li><a href="#%E7%BB%93%E6%9E%9C">结果</a></li></ul><!-- tocstop --><p>[toc]</p><h2><span id="原理">原理</span></h2><p>简单的感知机可以看作一个二分类，假定我们的公式为 </p><p> <strong>f(x) &#x3D; sign(w *x + b)</strong> </p><p>我们把 <strong>-b</strong> 做为一个标准，<strong>w* x</strong>  的结果与 <strong>-b</strong> 这个标准比较，</p><blockquote><p><strong>w*x &gt; -b,  f(x) &#x3D; +1</strong> </p><p><strong>w *x &lt; -b, f(x) &#x3D; -1</strong></p></blockquote><p> 不难看出<strong>w</strong>是超平面的法向量，超平面上的向量与<strong>w</strong>的数量积为0。因此这个超平面就可以很好的区分我们的数据集。</p><p>而感知机就是来寻找<strong>w和b</strong></p><h2><span id="优化方法">优化方法</span></h2><p>优化方法我们现有的方法比较多，诸如<strong>GD、SGD、Minibatch、Adam</strong></p><p>当然我们的损失函数也包含多种，常见的有MSE, CrossEntropy. </p><p>这边简单展示一下MSE以及GD原理。</p><p><img src="https://z3.ax1x.com/2021/10/16/5J5vtA.jpg" alt="5J5vtA.jpg"></p><p><img src="https://z3.ax1x.com/2021/10/16/5J5xfI.jpg" alt="5J5xfI.jpg"></p><h2><span id="softmax">SoftMax</span></h2><p>如果我们输出为多分类，那就成为一个SoftMax回归。</p><p>SoftMax回归和线性回归一样将输入特征与权重做线性叠加。与线性回归的一个主要不同在于，SoftMax回归的输出值个数等于标签里的类别数。</p><p><img src="https://z3.ax1x.com/2021/10/16/5JTopn.jpg" alt="5JTopn.jpg"></p><h2><span id="mlp">MLP</span></h2><p>而我们给SoftMax回归增加<strong>隐藏层</strong>，就是我们所说的多层感知机，而</p><p>全连接层只是对数据做仿射变换，我们的方法是引入非线性变换，就是激活函数。</p><p><img src="https://z3.ax1x.com/2021/10/16/5JTjk4.jpg" alt="5JTjk4.jpg"></p><h2><span id="代码实现">代码实现</span></h2><p>这边选用CIFAR10数据集来做演示。CIFAR10包含10个类别，每个类别600张32x32的彩色图像。</p><p><strong>1.导入依赖包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br></pre></td></tr></table></figure><p><strong>2.加载数据集</strong></p><p>这边对图片进行归一化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>),(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))]</span><br><span class="line">    )</span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>,download=<span class="literal">True</span>,train=<span class="literal">True</span>,transform=transform)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">val_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>,download=<span class="literal">True</span>,train=<span class="literal">False</span>,transform=transform)</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><strong>3.定义模型及参数</strong></p><p>用Sequential快速构建，<strong>对数据进行展平处理</strong>输入尺寸为图片尺寸 x 通道数，输出10分类，hidden layer设置为512。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Flatten(),</span><br><span class="line">    nn.Linear(<span class="number">1024</span>*<span class="number">3</span>, <span class="number">512</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Linear(<span class="number">512</span>,<span class="number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>4.训练</strong></p><p>损失计算选用交叉熵函数，优化器选用SGD，调用显卡运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr = <span class="number">0.01</span>)</span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">device = <span class="string">&quot;cuda:0&quot;</span></span><br><span class="line">train(net,train_loader,val_loader,epochs,optimizer,loss,device)</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/10/26/5I1IN8.jpg" alt="5I1IN8.jpg"></p><h2><span id="结果">结果</span></h2><p>可以看出我们的验证准确值过低，这主要是因为数据集特征不明显，我们在更换数据集验证。</p><p><strong>更换数据集</strong></p><p>选用7分类的海贼王图片进行训练，可以看出训练结果明显优于CIFAR数据集。</p><p><img src="https://z3.ax1x.com/2021/10/29/5X26HS.jpg" alt="5X26HS.jpg"></p><p>同时我们再挑选一张不在训练集的图片进行验证，发现结果正确。</p><p><img src="https://z3.ax1x.com/2021/10/29/5X2gAg.jpg" alt="5X2gAg.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像增广</title>
      <link href="/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/"/>
      <url>/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/</url>
      
        <content type="html"><![CDATA[<h1><span id="图像增广">图像增广</span></h1><!-- toc --><ul><li><a href="#%E9%9A%8F%E6%9C%BA%E7%BF%BB%E8%BD%AC">随机翻转</a></li><li><a href="#%E9%9A%8F%E6%9C%BA%E8%A3%81%E5%89%AA">随机裁剪</a></li><li><a href="#%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2">改变颜色</a></li><li><a href="#%E7%BB%93%E5%90%88">结合</a></li></ul><!-- tocstop --><p>[toc]</p><p>​    图像增广在对训练图像进行一系列的随机变化之后，生成相似但不同的训练样本，从而扩大了训练集的规模，提高泛化能力。</p><h2><span id="随机翻转">随机翻转</span></h2><p>​    例如，现在有一张小狗的照片，我们可以借助transforms的RandomHorizontalFlip()来翻转。</p><p><img src="https://z3.ax1x.com/2021/10/15/58FyPx.jpg" alt="58FyPx.jpg"></p><p>​    翻转之后的结果如下图。</p><p><img src="https://z3.ax1x.com/2021/10/15/58FYGV.jpg" alt="58FYGV.jpg"></p><h2><span id="随机裁剪">随机裁剪</span></h2><p>​    我们可以通过随机裁剪降低模型对目标的敏感性，可用RandomResizedCrop()来实现。</p><p><img src="https://z3.ax1x.com/2021/10/15/58kqt1.jpg" alt="58kqt1.jpg"></p><h2><span id="改变颜色">改变颜色</span></h2><p>​    我们也可以通过调整图片亮度、对比度、饱和度、色调来扩充数据集。</p><p><img src="https://z3.ax1x.com/2021/10/15/58Amng.jpg" alt="58Amng.jpg"></p><h2><span id="结合">结合</span></h2><p>​    我们结合前面的多种方法可以扩充我们的数据集，以实现训练精度提升的效果。</p><p><img src="https://z3.ax1x.com/2021/10/15/58AdE9.jpg" alt="58AdE9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoftMax指北</title>
      <link href="/2021/10/14/SoftMax/"/>
      <url>/2021/10/14/SoftMax/</url>
      
        <content type="html"><![CDATA[<h2><span id="softmax指北">SoftMax指北</span></h2><!-- toc --><ul><li><a href="#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">代码示例</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%B8%8B%E8%BD%BD%E6%95%B0%E6%8D%AE%E9%9B%86">第一步下载数据集</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E8%AE%BE%E7%BD%AE%E5%90%84%E7%A7%8D%E5%87%BD%E6%95%B0">第二步设置各种函数</a></li></ul></li></ul><!-- tocstop --><p>[toc]</p><p>​    softmax函数，又称归一化<strong>指数函数</strong>。是将多分类的结果用概率的形式表示出来，而各种预测结果概率和为1，下图为SoftMax的计算方法。</p><p><img src="https://z3.ax1x.com/2021/10/15/53IYI1.jpg" alt="53IYI1.jpg"></p><p>​    e的zi次方保证了结果非负，除以总和保证了总和为1，这样就可以得出近似的概率。</p><h2><span id="代码示例">代码示例</span></h2><p>​    这边选用Fashion-Mnist作为示例.</p><h3><span id="第一步下载数据集">第一步下载数据集</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data = torchvision.datasets.FashionMNIST(<span class="string">&quot;./data/mnist&quot;</span>,train=<span class="literal">True</span>,download=<span class="literal">True</span>)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data,batch_size = <span class="number">8</span>, shuffle = <span class="literal">True</span>)</span><br><span class="line">val_data = torchvision.datasets.FashionMNIST(<span class="string">&quot;./data/mnist&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>)</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data,batch_size = <span class="number">8</span>, shuffle = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3><span id="第二步设置各种函数">第二步设置各种函数</span></h3><p>简单设置了一个线性层，输入维度784，输出维度10</p><p>损失函数使用交叉熵</p><p>优化器用随机梯度下降法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(nn.Linear(<span class="number">784</span>,<span class="number">10</span>))</span><br><span class="line">net.to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(),lr = <span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
