<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC学习笔记</title>
      <link href="/2023/04/01/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/01/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-学习笔记"><a href="#JDBC-学习笔记" class="headerlink" title="JDBC 学习笔记"></a>JDBC 学习笔记</h1><p><strong>学习参考链接： <a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=30&amp;share_source=copy_web&amp;vd_source=c76bb3d6e0326c966bf1bf32db90eb22">https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=30&amp;share_source=copy_web&amp;vd_source=c76bb3d6e0326c966bf1bf32db90eb22</a></strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>简单来说，JDBC是一种规范，可以通过同一套代码，配合不同数据库驱动实现数据库的操作。</strong></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//  注册驱动</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">//  获取连接</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/itheima&quot;;</span><br><span class="line">String username = &quot;root&quot;;</span><br><span class="line">String password = &quot;123456&quot;;</span><br><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">//  定义sql语句</span><br><span class="line">String sql = &quot;insert into account values (&#x27;1&#x27;, &#x27;张三&#x27; , 2000)&quot;;</span><br><span class="line"></span><br><span class="line">//  获取执行sql的对象 Statement</span><br><span class="line">Statement statement = conn.createStatement();</span><br><span class="line"></span><br><span class="line">//  执行sql</span><br><span class="line">int count = statement.executeUpdate(sql);   // 返回值为受影响的函数值</span><br><span class="line"></span><br><span class="line">//  处理结果</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">//  释放资源</span><br><span class="line">statement.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p><strong>connection 接口对应的三个方法。</strong></p><ul><li><strong>开启事务：setAutoCommit(boolean autoCommit);     默认为true， 自动提交</strong></li><li><strong>提交事务：commit()</strong></li><li><strong>回滚事务：rollback()</strong></li></ul><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><ul><li><strong>int executeUpdate(sql);    执行DML、DDL语句</strong></li><li><strong>ResultSet executeQuery(sql);    执行DQL语句。返回值为查询的结果</strong></li></ul><p><strong>参考代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取数据库连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/learn_jdbc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;100228&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.定义Sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * from user;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取执行SQL的对象statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行sql语句,获的res对象</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.处理结果，遍历res中的所有数据</span></span><br><span class="line">        <span class="comment">//5.1光标下移一行，并判断当前行是否有效</span></span><br><span class="line">        <span class="keyword">while</span> (res.next())&#123;</span><br><span class="line">            <span class="comment">//5.2获取数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> res.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> res.getString(<span class="number">2</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> res.getInt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(id);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            System.out.println(age);</span><br><span class="line">            System.out.println(<span class="string">&quot;***************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        res.close();</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p><strong>预编译sql语句，预防sql注入问题</strong></p><p><strong>使用方法：</strong></p><ul><li><strong>String sql &#x3D; “select * from user where name &#x3D; ?”;</strong></li><li><strong>参数用？代替。再使用setXxx(参数1，参数2)，设置参数。参数1为序号，参数2为填入？的值，索引从1开始。</strong></li><li><strong>conn.prepareStatement(sql);</strong></li><li><strong>executeQuery();    这里不需要参数</strong></li></ul><br/><h2 id="数据连接池-Driud"><a href="#数据连接池-Driud" class="headerlink" title="数据连接池 Driud"></a>数据连接池 Driud</h2><p><strong>创建一个配置文件存放配置信息</strong></p><p><strong>例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 数据库驱动</span><br><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 数据库连接</span><br><span class="line">url=jdbc:mysql:<span class="comment">///learn_jdbc?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"># 数据库用户名</span><br><span class="line">username=root</span><br><span class="line"># 数据库密码</span><br><span class="line">password=*******</span><br><span class="line">#初始化连接数量</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line">#最大连接数</span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line">#获取连接最大等待时间</span><br><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></table></figure><p><strong>使用方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">// 2.定义配置文件</span></span><br><span class="line">        <span class="comment">// 3.加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc-demo\\src\\druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//4.获取连接池对象</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        <span class="comment">//5.获取数据库连接Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="案例1-查看所有数据"><a href="#案例1-查看所有数据" class="headerlink" title="案例1 - 查看所有数据"></a>案例1 - 查看所有数据</h2><p><strong>已有数据库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt; </span><span class="language-bash">select * from tb_brand;</span></span><br><span class="line">+----+------------+----------------------+---------+--------------------------------+--------+</span><br><span class="line">| id | brand_name | company_name         | ordered | description                    | status |</span><br><span class="line">+----+------------+----------------------+---------+--------------------------------+--------+</span><br><span class="line">|  1 | 三只松鼠   | 三只松鼠股份有限公司 |       5 | 好吃不上火                     |      0 |</span><br><span class="line">|  2 | 华为       | 华为技术有限公司     |     100 | 华为致力于把数字世界带入每个人 |      1 |</span><br><span class="line">|  3 | 小米       | 小米科技有限公司     |      50 | are you ok                     |      1 |</span><br><span class="line">+----+------------+----------------------+---------+--------------------------------+--------+</span><br></pre></td></tr></table></figure><p><strong>参数文档<code>druid.properties</code> 内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">数据库驱动</span></span><br><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="meta"># </span><span class="language-bash">数据库连接</span></span><br><span class="line">url=jdbc:mysql:///itcast?useSSL=false&amp;useServerPrepStmts=true</span><br><span class="line"><span class="meta"># </span><span class="language-bash">数据库用户名</span></span><br><span class="line">username=root</span><br><span class="line"><span class="meta"># </span><span class="language-bash">数据库密码</span></span><br><span class="line">password=123456</span><br><span class="line"><span class="meta">#</span><span class="language-bash">初始化连接数量</span></span><br><span class="line">initialSize=5</span><br><span class="line"><span class="meta">#</span><span class="language-bash">最大连接数</span></span><br><span class="line">maxActive=10</span><br><span class="line"><span class="meta">#</span><span class="language-bash">获取连接最大等待时间</span></span><br><span class="line">maxWait=3000</span><br></pre></td></tr></table></figure><p><strong>查询所有数据，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/main/java/druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接池对象</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接池连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_brand&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">List&lt;Brand&gt; brands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 处理结果 List &lt;Brand&gt;</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;brand_name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;company_name&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;ordered&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;description&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;status&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装Brand对象</span></span><br><span class="line"><span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>(id, brandName, companyName, ordered,description, status);</span><br><span class="line">brands.add(brand);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(brands);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pstmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2-增删改"><a href="#案例2-增删改" class="headerlink" title="案例2 - 增删改"></a>案例2 - 增删改</h2><p><strong>增加代码示例如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 新增</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/main/java/druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接池对象</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接池连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面提交数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;香飘飘&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;香飘飘&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into tb_brand(brand_name, company_name,ordered,description,status) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,brandName);</span><br><span class="line">pstmt.setString(<span class="number">2</span>,companyName);</span><br><span class="line">pstmt.setInt(<span class="number">3</span>,ordered);</span><br><span class="line">pstmt.setString(<span class="number">4</span>,description);</span><br><span class="line">pstmt.setInt(<span class="number">5</span>,status);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">System.out.println(i &gt; <span class="number">0</span>);</span><br><span class="line">pstmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记-3</title>
      <link href="/2023/03/29/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
      <url>/2023/03/29/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-学习笔记-Part3"><a href="#MySQL-学习笔记-Part3" class="headerlink" title="MySQL 学习笔记 Part3"></a>MySQL 学习笔记 Part3</h1><br/><p><strong>学习链接来自黑马程序员： <a href="https://www.bilibili.com/video/BV1Kr4y1i7ru/?p=22&amp;share_source=copy_web&amp;vd_source=c76bb3d6e0326c966bf1bf32db90eb22">https://www.bilibili.com/video/BV1Kr4y1i7ru/?p=22&amp;share_source=copy_web&amp;vd_source=c76bb3d6e0326c966bf1bf32db90eb22</a></strong></p><br/><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-1.png"></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-2.png"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>生成一个六位数的随机验证码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 生成一个六位数的随机验证码</span><br><span class="line"></span><br><span class="line">select lpad(floor(rand() * 1000000),6,&quot;0&quot;);</span><br></pre></td></tr></table></figure><br/><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-3.png"></p><br/><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-4.png"></p><br/><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-5.png"></p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">    id int primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class="line">    name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class="line">    age int check ( age &gt; 0 and age &lt;= 120 ) comment &#x27;年龄&#x27;,</span><br><span class="line">    status  char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class="line">    gender char(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into user(name, age, status, gender) values (&#x27;Tom1&#x27;,19,&#x27;1&#x27;,&#x27;男&#x27;) ,(&#x27;Tom2&#x27;,25,&#x27;0&#x27;,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure><p><strong>我们并未设定id，id自动补充，为自增。</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-7.png"></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p><strong>用来让两张表之间的数据建立连接，从而保证数据的一致性和完整性。</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-8.png"></p><h3 id="外键删除更新行为"><a href="#外键删除更新行为" class="headerlink" title="外键删除更新行为"></a>外键删除更新行为</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-9.png"></p><br/><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p><strong>一对多：建立一个外键约束即可。</strong></p><br/><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p><strong>多对多：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</strong></p><br/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 多对多 ----------------</span><br><span class="line">create table student(</span><br><span class="line">                        id int auto_increment primary key comment &#x27;主键ID&#x27;,</span><br><span class="line">                        name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">                        no varchar(10) comment &#x27;学号&#x27;</span><br><span class="line">) comment &#x27;学生表&#x27;;</span><br><span class="line">insert into student values (null, &#x27;黛绮丝&#x27;, &#x27;2000100101&#x27;),(null, &#x27;谢逊&#x27;, &#x27;2000100102&#x27;),(null, &#x27;殷天正&#x27;, &#x27;2000100103&#x27;),(null, &#x27;韦一笑&#x27;, &#x27;2000100104&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table course(</span><br><span class="line">                       id int auto_increment primary key comment &#x27;主键ID&#x27;,</span><br><span class="line">                       name varchar(10) comment &#x27;课程名称&#x27;</span><br><span class="line">) comment &#x27;课程表&#x27;;</span><br><span class="line"></span><br><span class="line">insert into course values (null, &#x27;Java&#x27;), (null, &#x27;PHP&#x27;), (null , &#x27;MySQL&#x27;) , (null, &#x27;Hadoop&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table student_course(</span><br><span class="line">                               id int auto_increment comment &#x27;主键&#x27; primary key,</span><br><span class="line">                               studentid int not null comment &#x27;学生ID&#x27;,</span><br><span class="line">                               courseid  int not null comment &#x27;课程ID&#x27;,</span><br><span class="line">                               constraint fk_courseid foreign key (courseid) references course (id),</span><br><span class="line">                               constraint fk_studentid foreign key (studentid) references student (id)</span><br><span class="line">)comment &#x27;学生课程中间表&#x27;;</span><br><span class="line"></span><br><span class="line">insert into student_course values (null,1,1),(null,1,2),(null,1,3),(null,2,2),(null,2,3),(null,3,4);</span><br></pre></td></tr></table></figure><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-10.png"></p><br/><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p><strong>一般用来单表拆分。</strong></p><p><strong>实现：在任意一方加入外键，关联另一方主键，并且设置外键唯一（UNIQUE）。</strong></p><br/><h2 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h2><ul><li><strong>内连接：查询A、B交集部分数据。</strong></li><li><strong>左外连接：查询左表所有数据，以及两张表交集数据。</strong></li><li><strong>右外连接：查询右表所有数据，以及两张表交集数据。</strong></li><li><strong>自连接：当前表与自身的连接查询，自连接必须使用表别名。</strong></li></ul><br/><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-11.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)</span><br><span class="line">-- 表结构: emp , dept</span><br><span class="line">-- 连接条件: emp.dept_id = dept.id</span><br><span class="line">select emp.name, dept.name from emp, dept where emp.dept_id = dept_id;</span><br><span class="line"></span><br><span class="line">select e.name, d.name from emp e, dept d where e.dept_id = d.id;</span><br><span class="line"></span><br><span class="line">-- 2. 查询每一个员工的姓名 , 及关联的部门的名称 (显式内连接实现)  --- INNER JOIN ... ON ...</span><br><span class="line">-- 表结构: emp , dept</span><br><span class="line">-- 连接条件: emp.dept_id = dept.id</span><br><span class="line">select emp.name, dept.name from emp inner join dept on emp.dept_id = dept.id</span><br></pre></td></tr></table></figure><br/><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-12.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 外连接演示</span><br><span class="line">-- 1. 查询emp表的所有数据, 和对应的部门信息(左外连接)</span><br><span class="line">-- 表结构: emp, dept</span><br><span class="line">-- 连接条件: emp.dept_id = dept.id</span><br><span class="line">select emp.*, dept.name from emp left outer join dept  on emp.dept_id = dept.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 外连接演示</span><br><span class="line">-- 1. 查询emp表的所有数据, 和对应的部门信息(右外连接)</span><br><span class="line">-- 表结构: emp, dept</span><br><span class="line">-- 连接条件: emp.dept_id = dept.id</span><br><span class="line"></span><br><span class="line">select emp.*, dept.name from dept right outer join emp on dept.id = emp.dept_id</span><br></pre></td></tr></table></figure><br/><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p><strong>需要把表看成两张表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 自连接</span><br><span class="line">-- 1. 查询员工 及其 所属领导的名字</span><br><span class="line">-- 表结构: emp</span><br><span class="line"></span><br><span class="line">select a.name , b.name from emp a , emp b where a.managerid = b.id;</span><br><span class="line"></span><br><span class="line">-- 2. 查询所有员工 emp 及其领导的名字 emp , 如果员工没有领导, 也需要查询出来</span><br><span class="line">-- 表结构: emp a , emp b</span><br><span class="line"></span><br><span class="line">select a.name &#x27;员工&#x27;, b.name &#x27;领导&#x27; from emp a left join emp b on a.managerid = b.id;</span><br></pre></td></tr></table></figure><br/><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-13.png"> </p><br/><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-14.png"></p><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-15.png"></p><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p><strong>子查询返回的结果是一行，可以是多列。</strong></p><p><strong>例子</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 行子查询</span><br><span class="line">-- 1. 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息 ;</span><br><span class="line">-- a. 查询 &quot;张无忌&quot; 的薪资及直属领导</span><br><span class="line">select salary, managerid from emp where name = &#x27;张无忌&#x27;;</span><br><span class="line"></span><br><span class="line">-- b. 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息 ;</span><br><span class="line">select * from emp where (salary,managerid) = (select salary, managerid from emp where name = &#x27;张无忌&#x27;);</span><br></pre></td></tr></table></figure><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a><strong>表子查询</strong></h3><p><strong>子查询返回的结果是多行多列。</strong></p><p><strong>也就是说，把查询到的结果当作一个表，再联合查找。</strong></p><br/><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务是一组操作的集合，即这些操作要么同时成功、要么同时失败。</strong></p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p><strong>流程：</strong></p><ul><li>select @@autocommit;          查询提交方式，默认自动提交，为1。</li><li>set @@autocommit &#x3D; 0;         设置提交方式为手动。</li><li>start transaction 或 begin;     开启事务</li><li>commit;                                    提交事务</li><li>rollback;                                    回滚事务</li></ul><br/><h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul><li><strong>原子性（Atomicity ）：一个事务是一个不可再分割的整体，要么全部成功，要么全部失败</strong></li><li><strong>一致性（Consistency ）：一个事务可以让数据从一种一致状态切换到另一种一致性状态</strong></li><li><strong>隔离性（Isolution ）：一个事务不受其他事务的影响，并且多个事务彼此隔离</strong></li><li><strong>持久性（Durability ）：一个事务一旦被提交，在数据库中的改变就是永久的，提交后就不能再回滚</strong></li></ul><br/><h3 id="事务并发存在的问题"><a href="#事务并发存在的问题" class="headerlink" title="事务并发存在的问题"></a>事务并发存在的问题</h3><ul><li><strong>脏读</strong></li><li><strong>不可重复读</strong></li><li><strong>幻读</strong></li></ul><p><strong>类似于计组的  读后写、写后读、 写后写 问题。</strong></p><br/><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p><strong>数据库事务的隔离级别有4个，由低到高依次为Read uncommitted(未授权读取、读未提交)、Read committed（授权读取、读提交）、Repeatable read（可重复读取）、Serializable（序列化），这四个级别可以逐个解决脏读、不可重复读、幻象读这几类问题。</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230329-16.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查看事务隔离级别</span><br><span class="line">select @@transaction_isolation;</span><br><span class="line"></span><br><span class="line">-- 设置事务隔离级别</span><br><span class="line">set session transaction isolation level read uncommitted ;</span><br><span class="line"></span><br><span class="line">set session transaction isolation level repeatable read ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记-Part2</title>
      <link href="/2023/03/28/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2023/03/28/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-学习笔记-Part2"><a href="#MySQL-学习笔记-Part2" class="headerlink" title="MySQL 学习笔记 Part2"></a>MySQL 学习笔记 Part2</h2><br/><p><strong>学习链接来自黑马程序员： <a href="https://www.bilibili.com/video/BV1Kr4y1i7ru/?p=22&amp;share_source=copy_web&amp;vd_source=c76bb3d6e0326c966bf1bf32db90eb22">https://www.bilibili.com/video/BV1Kr4y1i7ru/?p=22&amp;share_source=copy_web&amp;vd_source=c76bb3d6e0326c966bf1bf32db90eb22</a></strong></p><br/><h2 id="创建一个表"><a href="#创建一个表" class="headerlink" title="创建一个表"></a>创建一个表</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">    id int comment &quot;编号&quot;,</span><br><span class="line">    workno varchar(10) comment &quot;工号&quot;,</span><br><span class="line">    name varchar(10) comment &quot;姓名&quot;,</span><br><span class="line">    gender char(1) comment &quot;性别&quot;,</span><br><span class="line">    age tinyint unsigned comment &quot;年龄&quot;,</span><br><span class="line">    idcard char(18) comment &quot;身份证号&quot;,</span><br><span class="line">    entrydate date comment &quot;入职时间&quot;</span><br><span class="line">) comment &quot;员工表&quot;;</span><br></pre></td></tr></table></figure><br/><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="基础操作总结"><a href="#基础操作总结" class="headerlink" title="基础操作总结"></a>基础操作总结</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-2.png"></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-3.png"></p><br/><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-4.png"></p><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-5.png"></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p><strong>简单来说，起始索引从0开始。</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-6.png"></p><h3 id="DQL-执行顺序"><a href="#DQL-执行顺序" class="headerlink" title="DQL-执行顺序"></a>DQL-执行顺序</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-7.png"></p><h3 id="DQL-总结"><a href="#DQL-总结" class="headerlink" title="DQL 总结"></a>DQL 总结</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-8.png"></p><br/><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-9.png"></p><br/><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-10.png"></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-11.png"></p><h3 id="DCL-总结"><a href="#DCL-总结" class="headerlink" title="DCL 总结"></a>DCL 总结</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230328-12.png"></p><br/>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础补充-2</title>
      <link href="/2023/03/09/Java%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%85%85-2/"/>
      <url>/2023/03/09/Java%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%85%85-2/</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li><p><strong>适合元素个数不确定，且要增删查改的场景</strong></p></li><li><p><strong>ArrayList &lt; E &gt; : 约束类型</strong></p></li></ul></br><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230309-1.png" alt="20230309-1"></p><br/><h2 id="Object类常用方法"><a href="#Object类常用方法" class="headerlink" title="Object类常用方法"></a>Object类常用方法</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230309-2.png"></p><ul><li><strong>toString() 默认返回的是地址。可以重写输出功能</strong></li><li><strong>equals() 默认比较地址。可以重写比较规则</strong></li></ul><p><strong>例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student name is &quot;</span> + name + <span class="string">&quot;, age is &quot;</span> + age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="comment">// 判断o是不是学生类型</span></span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student)obj;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name.equals(s2.name) &amp;&amp; <span class="built_in">this</span>.age == s2.age;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>euqals() 的简便写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="comment">// 判断o是不是学生类型</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>( obj == <span class="literal">null</span> || <span class="built_in">this</span>.getClass() != obj.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student)obj;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name.equals(s2.name) &amp;&amp; <span class="built_in">this</span>.age == s2.age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ul><li><p><strong>StringBuilder是一个可变字符串类，可以看成一个对象容器。</strong></p></li><li><p><strong>作用：提高字符串使用效率，如拼接、修改等。</strong></p></li></ul><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230309-3.png"></p><h3 id="StringBuilder常用方法"><a href="#StringBuilder常用方法" class="headerlink" title="StringBuilder常用方法"></a>StringBuilder常用方法</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230309-4.png"></p><br/><h2 id="Math-类-常用方法"><a href="#Math-类-常用方法" class="headerlink" title="Math 类 常用方法"></a>Math 类 常用方法</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230309-5png.png"></p><br/><h2 id="System-类-常用方法"><a href="#System-类-常用方法" class="headerlink" title="System 类 常用方法"></a>System 类 常用方法</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202303/20230309-6png.png"></p><br/>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者问题-管程法</title>
      <link href="/2023/03/03/Java%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98-%E7%AE%A1%E7%A8%8B%E6%B3%95/"/>
      <url>/2023/03/03/Java%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98-%E7%AE%A1%E7%A8%8B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="管程法-生产者消费者问题"><a href="#管程法-生产者消费者问题" class="headerlink" title="管程法-生产者消费者问题"></a>管程法-生产者消费者问题</h1><p><strong>可参见：<a href="https://www.whiskeycola.cn/2022/03/11/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-2/">Java多线程笔记-2 | Whiskey&amp;Cola (whiskeycola.cn)</a></strong></p><p><strong>在此为二次解释</strong></p><br/><h2 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h2><ul><li><strong>先得有一个缓冲区，这个缓冲区容量有限</strong></li><li><strong>缓冲区定义存入，取出功能函数</strong></li><li><strong>分别定义生产者、消费者类</strong></li><li><strong>主程序，创建缓冲区，缓冲区当作参数，传入生产者消费者类的定义，创建线程</strong></li></ul><br/><h3 id="创建产品"><a href="#创建产品" class="headerlink" title="创建产品"></a>创建产品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;laptop&quot;</span>;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="创建缓冲区"><a href="#创建缓冲区" class="headerlink" title="创建缓冲区"></a>创建缓冲区</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Buffer</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   <span class="comment">// 创建一个容器,此容器可放10个产品</span></span><br><span class="line">   List&lt;Product&gt; productBuffer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 放入容器函数,产品以参数形式传入</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">pushProduct</span><span class="params">(Product product)</span>&#123;</span><br><span class="line">      <span class="comment">// 如果容器满了，就先等待</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(productBuffer.size() &gt;= bufferSize)&#123;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">         &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 没有满，开始生产</span></span><br><span class="line">      productBuffer.add(product);</span><br><span class="line">      System.out.println(<span class="string">&quot;正在生产第&quot;</span> + product.id + <span class="string">&quot;个&quot;</span> + product.name);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 发出可以消费信号</span></span><br><span class="line">      <span class="built_in">this</span>.notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 从容器取函数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> Product <span class="title function_">popProduct</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">// 如果容器没有值，就先等待</span></span><br><span class="line">      <span class="keyword">while</span>(productBuffer.size() == <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">         &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 容器有值，取一个</span></span><br><span class="line">      <span class="type">Product</span> <span class="variable">p</span> <span class="operator">=</span> productBuffer.get(<span class="number">0</span>);</span><br><span class="line">      productBuffer.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 发出可以生产信号</span></span><br><span class="line">      <span class="built_in">this</span>.notifyAll();</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="创建生产者类"><a href="#创建生产者类" class="headerlink" title="创建生产者类"></a>创建生产者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建生产者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creater</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">   <span class="comment">// 缓冲区及构造函数</span></span><br><span class="line">   Buffer buffer;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Creater</span><span class="params">(Buffer buffer)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.buffer = buffer;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 生产100个</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         buffer.pushProduct(<span class="keyword">new</span> <span class="title class_">Product</span>(i));</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="创建消费者类"><a href="#创建消费者类" class="headerlink" title="创建消费者类"></a>创建消费者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建消费者线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comsumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 缓冲区和构造函数</span></span><br><span class="line">   Buffer buffer;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Comsumer</span><span class="params">(Buffer buffer)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.buffer = buffer;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 消费50个</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">         <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> buffer.popProduct();</span><br><span class="line">         System.out.println(<span class="string">&quot;消费第&quot;</span> + product.id + <span class="string">&quot;个&quot;</span> + product.name);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreaterComsumer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Buffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Buffer</span>();</span><br><span class="line">      <span class="comment">// 一个生产者，共生产100个</span></span><br><span class="line">      <span class="comment">// 两个消费者，每人消费50个</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Creater</span>(buffer)).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Comsumer</span>(buffer)).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Comsumer</span>(buffer)).start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串</title>
      <link href="/2023/02/27/Java%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/02/27/Java%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA字符串"><a href="#JAVA字符串" class="headerlink" title="JAVA字符串"></a>JAVA字符串</h1><p><strong>String是不可变字符串的原因</strong></p><ul><li><strong>String变量每次的修改其实都是产生并指向了新的字符串对象。</strong></li><li><strong>原来的字符串没有变，所以称为不可变字符。</strong></li></ul><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><ul><li><strong>方式一：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;allen&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>方式二：通过String类的构造器创建对象。</strong><ul><li><strong>public String()    创建空白字符串，几乎不用</strong></li><li><strong>public String(String original)    根据传入的字符串，创建字符对象， 几乎不用</strong></li><li><strong>public String(char[] chs)    根据字符数组创建</strong>  </li><li><strong>public String(byte[] chs)    根据字节数组创建</strong></li></ul></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><strong>以 ”“ 方式给出的字符串对象，在字符串常量池中存储，相同的内容只存储一份。</strong></li><li><strong>通过new构造的对象，每new一次都会产生一个新的对象，放在堆内存中。</strong></li></ul><br/><h2 id="String-常用-API"><a href="#String-常用-API" class="headerlink" title="String 常用 API"></a>String 常用 API</h2><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ul><li><strong>推荐使用 “equals” ：只关心内容一样即可。</strong></li><li><strong>“equalsIgnoreCase”  忽略大小写，看内容是否一致。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 正确登录名和密码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">okName</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">okPassword</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 请输入登录名称和密码</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;登录名称：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">System.out.println(<span class="string">&quot;登录密码：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 验证</span></span><br><span class="line"><span class="keyword">if</span>(okName.equals(name) &amp;&amp; okPassword.equals(password))&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 忽略大小写的比较API：一般用于比较验证码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sysCode</span> <span class="operator">=</span> <span class="string">&quot;12Asd&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">code1</span> <span class="operator">=</span> <span class="string">&quot;12asd&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(sysCode.equals(code1));  <span class="comment">// false</span></span><br><span class="line">System.out.println(sysCode.equalsIgnoreCase(code1));    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202302/20230227-1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C++ Primer 第五版》学习笔记 - 1</title>
      <link href="/2022/11/04/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2022/11/04/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="《C-Primer-第五版》学习笔记"><a href="#《C-Primer-第五版》学习笔记" class="headerlink" title="《C++ Primer 第五版》学习笔记"></a>《C++ Primer 第五版》学习笔记</h1><p><strong>以下为 Chapter1、Chapter2</strong></p><h2 id="C-是如何工作的"><a href="#C-是如何工作的" class="headerlink" title="C++是如何工作的"></a>C++是如何工作的</h2><p> 源文件-&gt; 编译器-&gt; 链接-&gt; 可执行程序</p><p>每一个源文件在编译后都会生成*.obj文件* ，通过链接就可以将所有obj文件生成一个可执行文件。</p><p>例如<code>#include &lt;iostream&gt;</code>，<code>#</code>符号后面跟的都是预处理语句。</p><p>预处理语句是在实际编译之前处理。</p><p><code>#include</code> 实际上就是寻找一个文件，将此文件内容拷贝到现在文件中，这就是 <strong>头文件</strong></p><p><strong>项目中的每个cpp文件都会被编译，但头文件不会被编译。编译器会给每个cpp文件生成对应的obj文件，链接器将他们合并成一个exe文件。</strong></p><br/><h2 id="C-编译器是如何工作的"><a href="#C-编译器是如何工作的" class="headerlink" title="C++编译器是如何工作的"></a>C++编译器是如何工作的</h2><p>预处理阶段编译器会遍历所有的预处理语句并对其处理，常用的预处理语句有<code>include</code> <code>if</code> <code>ifdef</code> <code>pragma</code>。</p><p>.obj文件是二进制的机器码，如果我们想查看对应的汇编代码，可以在VS的项目属性里，<code>C/C++</code> –&gt; <code>Output File</code> –&gt; <code>Assembler Output</code> –&gt; <code>Assembly-Only Listing</code></p><br/><h2 id="C-链接器是如何工作的"><a href="#C-链接器是如何工作的" class="headerlink" title="C++链接器是如何工作的"></a>C++链接器是如何工作的</h2><p>编译器可以对不同 .cpp 文件生成对应 .obj 文件，而链接器需要将这些 .obj 问价链接起来，并确定入口程序（默认入口程序是main函数），最终生成  .exe 可执行程序。</p><p>当我们遇到 <code>为解决的外部符号</code> 错误时，就是链接器找不到需要的东西。</p><p>未调用的函数，链接器不会调用</p><br/><h2 id="复合类型：引用"><a href="#复合类型：引用" class="headerlink" title="复合类型：引用"></a>复合类型：引用</h2><p><strong>引用：为对象起的别名。</strong></p><p><strong>示例代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b = a;</span><br><span class="line">    b = <span class="number">8</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; std::endl</span><br><span class="line">              &lt;&lt; <span class="string">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: 8</span><br><span class="line">b: 8</span><br></pre></td></tr></table></figure><p><strong>例如上面代码，其中 b 是 a 的引用，相当于给变量 a 重新起了一个名字 b 。</strong></p><p><strong>&amp;b 必须初始化，而且后续不能修改</strong></p><ul><li><strong>定义引用时，把引用和他的初始值绑定在一起，而不是将初始值拷贝给使用。</strong></li><li><strong>引用本身不是对象，所以不能定义引用的引用。</strong></li></ul><br/><h2 id="复合类型：指针"><a href="#复合类型：指针" class="headerlink" title="复合类型：指针"></a>复合类型：指针</h2><p><strong>对地址的封装，本身就是一个对象</strong></p><ul><li><p>*<em>定义指针 int <em>p，p为一个指针对象。</em></em></p></li><li><p><strong>可以使用取地址符（&amp;） 获取指针所封装的地址。</strong></p></li><li><p><strong>可以使用解引用符（*）利用指针访问对象，示例如下</strong></p></li></ul><p><strong>示例代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;p: \t&quot;</span> &lt;&lt; p &lt;&lt; std::endl</span><br><span class="line">              &lt;&lt; <span class="string">&quot;&amp;p: \t&quot;</span> &lt;&lt; &amp;p &lt;&lt; std::endl</span><br><span class="line">              &lt;&lt; <span class="string">&quot;*p: \t&quot;</span> &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 变量p里面存放的数据</span><br><span class="line">p:      0x60fe7c</span><br><span class="line">// 变量p在内存中的地址</span><br><span class="line">&amp;p:     0x60fe78</span><br><span class="line">// 变量p里面存放数据对应地址的数据</span><br><span class="line">*p:     100</span><br></pre></td></tr></table></figure><br/><h2 id="复合类型：空指针"><a href="#复合类型：空指针" class="headerlink" title="复合类型：空指针"></a>复合类型：空指针</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p><strong>C++11:  <code>int* p = nullptr;</code></strong></p></li><li><p><em><em>int</em> p &#x3D; 0;</em>*</p></li><li><p><em><em>int</em> p &#x3D; NULL;  &#x2F;&#x2F; 需引入cstdlib</em>*</p></li></ul><h3 id="void-指针"><a href="#void-指针" class="headerlink" title="void* 指针"></a>void* 指针</h3><p><strong>纯粹的地址封装，与类型无关。可以用于存放任意对象的地址。一般用在返回值类型。</strong></p><h3 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h3><p>**如下图，ppi -&gt; pi -&gt; ival **</p><p><strong>其中 ppi 存放 pi 的地址，pi 存放 ival 的地址， ival 存放数字1024。</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202211/20221104_1.png" alt="20221104_1"></p><h3 id="指针的引用"><a href="#指针的引用" class="headerlink" title="指针的引用"></a>指针的引用</h3><p><strong>指针是对象，可以引用</strong></p><p><strong>例如：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p; <span class="comment">// r是p的一个别名</span></span><br><span class="line"></span><br><span class="line">r = &amp;i; <span class="comment">// r或者p存放的i的地址，就是说p指向了i，而r又是p的一个别名。</span></span><br><span class="line">*r = <span class="number">0</span>； <span class="comment">// 对r解引用赋值，相当于i=0；</span></span><br></pre></td></tr></table></figure><br/><h2 id="const-限定符"><a href="#const-限定符" class="headerlink" title="const 限定符"></a>const 限定符</h2><ul><li><strong>使用const对变量的类型加以限定，变量的值不能被改变。</strong></li><li><strong>const对象必须初始化（其他时候不饿能出现在等号左边）</strong></li><li><strong>默认状态下，const对象仅在文件内有效，如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern关键字。</strong></li></ul><p><strong>例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0204-1.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0204.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> a;</span><br><span class="line">    std::cout&lt;&lt;a&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译：g++ 0204.cpp 0204-1.cpp</strong></p><p><strong>这样是可以成功运行并输出a的值的。</strong></p><h3 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h3><ul><li><p><strong>指针是对象，也可以限定为常量（必须初始化）。</strong></p></li><li><p><strong>把*放在 const 之前，说明指针是一个常量。不变的是针织本身的值，而非指向的那个值。</strong></p></li><li><p><strong>顶层const：便是变量本身是一个常量。</strong></p></li><li><p><strong>底层const：表示指针所指向的对象是一个const。</strong></p></li></ul><h3 id="常量表达式（const-expression）"><a href="#常量表达式（const-expression）" class="headerlink" title="常量表达式（const expression）"></a>常量表达式（const expression）</h3><p><strong>指不会改变并且在编译过程中就能得到计算结果的表达式。</strong></p><p><strong>例如：<code>const int maxSize = 100；</code></strong></p><h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h2><ul><li><strong>C++11，允许将变量声明为constexptr类型，以便由编译器验证变量的值是否是一个常量表达式。</strong></li><li><strong>一定是常量</strong></li><li><strong>必须用常量表达式初始化</strong></li><li><strong>例如：<code>constexpr int maxSize = 100；</code>或指针类型<code>constexpr int* p = nullptr;</code></strong></li><li><strong>自定义类型、IO库、string等类型不能被定义为constexpr。</strong></li></ul><br/><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><p><strong>为了提高可读性，给类型起个别名。</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202211/20221104_2.png" alt="20221104_2"></p><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p><strong>C++11，让编译器通过初始值推断变量类型。</strong></p><h2 id="decltype类型说明符"><a href="#decltype类型说明符" class="headerlink" title="decltype类型说明符"></a>decltype类型说明符</h2><ul><li><strong>选择并返回操作数的数据类型。</strong></li><li><strong>只要数据类型，不要值。</strong></li></ul><p><strong>例如：<code>decltype (f()) sum = x;</code> 含义为：拿出函数 f() 的返回值类型，定义sum 并赋值为 x；</strong></p><h2 id="自定义数据结构"><a href="#自定义数据结构" class="headerlink" title="自定义数据结构"></a>自定义数据结构</h2><p><strong>类定义：可以使用class或struct。</strong></p><p><strong>区别： struct是public的，class是private的。</strong></p><h2 id="编写自己的头文件"><a href="#编写自己的头文件" class="headerlink" title="编写自己的头文件"></a>编写自己的头文件</h2><p><strong>预处理变量有两个状态：已定义、未定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SaleData</span>&#123;</span><br><span class="line">std::string name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>如果没有 <code>ifndef 、define 、endif</code> 在预处理时会出现重复处理导致运行出错。</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类</title>
      <link href="/2022/10/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2022/10/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h2 id="内部类分类"><a href="#内部类分类" class="headerlink" title="内部类分类"></a>内部类分类</h2><ul><li><strong>成员内部类</strong></li><li><strong>静态内部类</strong></li><li><strong>局部内部类</strong></li><li><strong>匿名内部类</strong></li></ul><h2 id="内部类概念"><a href="#内部类概念" class="headerlink" title="内部类概念"></a>内部类概念</h2><p><strong>概念：在一个类的内部再定义一个完整的类。</strong></p><p><strong>特点：</strong></p><ul><li><strong>编译之后可生成独立的字节码</strong></li><li><strong>内部类可以直接访问外部类的私有成员，而不破坏封装。</strong></li><li><strong>可以为外部类提供必要内部功能组件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 身体</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Body</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="comment">// 头部</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Header</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(name); <span class="comment">// 可以访问外部类的私有成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><ul><li><p><strong>在类的内部定义，与实例变量、实例方法同级别的类。</strong></p></li><li><p><strong>外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象。</strong></p><ul><li><strong>Outer outer &#x3D; new Outer();</strong></li><li><strong>Outer.Inner inner &#x3D; outer.new Inner();</strong></li></ul></li><li><p><strong>如果内部类和外部类有同一参数，默认为内部类参数。要调用外部类属性，带上 类名.this</strong></p><ul><li><strong>System.out.println(Outer.this.name);</strong></li></ul></li><li><p><strong>成员内部类不能定义静态成员，但可以有静态常量</strong></p><ul><li><strong>就是说不能有 static 成员，但可以有 static final 常量</strong></li></ul></li></ul><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Outer.java</span></span><br><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;北京&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;010&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">// 打印外部属性</span></span><br><span class="line">            <span class="comment">// 属性和外部类属性相同时，带上 类名.this</span></span><br><span class="line">            System.out.println(Outer.<span class="built_in">this</span>.name);</span><br><span class="line">            System.out.println(age);</span><br><span class="line">            <span class="comment">// 打印内部类属性</span></span><br><span class="line">            System.out.println(address);</span><br><span class="line">            System.out.println(phone);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOuter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 1. 创建外部类对象</span></span><br><span class="line"><span class="comment">//        Outer outer = new Outer();</span></span><br><span class="line"><span class="comment">//        // 2. 创建内部类对象</span></span><br><span class="line"><span class="comment">//        Outer.Inner inner = outer.new Inner();</span></span><br><span class="line"><span class="comment">//        // 3. 调用</span></span><br><span class="line"><span class="comment">//        inner.show();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单实现</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ul><li><strong>不依赖外部类对象，可直接创建或通过类名访问，可声明静态成员</strong></li></ul><p><strong>定义类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类, 和外部类相同</span></span><br><span class="line">    <span class="comment">// 为了给外部类提供功能，使用方法和外部类一样</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;上海&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        <span class="comment">// 静态成员</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">// 调用外部类属性</span></span><br><span class="line">            <span class="comment">// 1. 先创建外部类对象</span></span><br><span class="line">            <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">            <span class="comment">// 2. 调用外部类对象的属性</span></span><br><span class="line">            System.out.println(outer.age);</span><br><span class="line">            System.out.println(outer.name);</span><br><span class="line">            <span class="comment">// 调用内部静态类的属性和方法</span></span><br><span class="line">            System.out.println(address);</span><br><span class="line">            System.out.println(phone);</span><br><span class="line">            <span class="comment">// 调用静态内部类的静态属性</span></span><br><span class="line">            System.out.println(Inner.count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接创建静态内部类</span></span><br><span class="line">        <span class="comment">// 注意：并没有 new Outer对象，不是 new Outer().new Inner()</span></span><br><span class="line">        <span class="comment">//       只是包含关系</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line"></span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：并没有 new Outer对象，不是 new Outer().new Inner()，只是包含关系</strong></p><p><strong>静态内部类直接new，成员内部类得一层一层new</strong></p><br/><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><ul><li><p><strong>定义在外部类方法中，作用范围和创建对象范围仅限于当前方法。</strong></p></li><li><p><strong>局部内部类访问外部类当前方法中的局部变量时，因无法保障变量的声明周期与自身相同，变量必须修饰为final</strong></p></li></ul><p><strong>定义类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;刘德华&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 定义局部变量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;深圳&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 局部内部类: 不能加任何访问修饰符</span></span><br><span class="line">        <span class="comment">// 仅限于当前方法</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;15558888&quot;</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;sdaa@as.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">// 访问外部类的属性</span></span><br><span class="line">                <span class="comment">// 可以直接访问，相当于省略了 Outer.this.</span></span><br><span class="line">                System.out.println(name);</span><br><span class="line">                System.out.println(Outer.<span class="built_in">this</span>.age);</span><br><span class="line">                <span class="comment">// 访问内部类的属性</span></span><br><span class="line">                <span class="comment">// 相当于省略了 this.</span></span><br><span class="line">                System.out.println(phone);</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.email);</span><br><span class="line">                <span class="comment">// 访问局部变量</span></span><br><span class="line">                <span class="comment">// JDK1.7 要求：变量必须是常量final</span></span><br><span class="line">                <span class="comment">// JDK1.8 之后，会自动添加final</span></span><br><span class="line">                System.out.println(address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建内部类对象</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>外部类里的函数里面定义了类，最终调用时，应该在对应的函数内创建并实现</strong></p><br/><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li><strong>没有类名的局部内部类（一切特征都与局部内部类相同）</strong></li><li><strong>作用：方便创建子类对象，最终目的为了简化代码编写。</strong></li><li><strong>必须继承一个父类或者实现一个接口</strong></li></ul><p><strong>例如下面代码，由于Animal是抽象的，所以得用Tiger继承，再实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>();</span><br><span class="line">a.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老虎跑的快&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>匿名内部类的写法如下，直接再新建Animal后面Override实现。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老虎跑的快&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>匿名内部类是没有名字的内部类。</strong></p></li><li><p><strong>匿名内部类写出来就会产生一个匿名内部类的对象。</strong></p></li><li><p><strong>匿名内部类的对象类型相当于是当前new的哪个的类型的子类类型。</strong></p></li></ul><br/>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用经验</title>
      <link href="/2022/10/17/Docker%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/"/>
      <url>/2022/10/17/Docker%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker使用经验"><a href="#Docker使用经验" class="headerlink" title="Docker使用经验"></a>Docker使用经验</h1><p><strong>官方教程：<a href="https://docker.easydoc.net/">https://docker.easydoc.net</a></strong></p><br/><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li><strong>先写Dockerfile</strong></li><li><strong>生成镜像，<code>docker build -t &#123;镜像名:version&#125;  &#123;包含Dockerfile的路径&#125;</code></strong></li><li><strong>运行docker，<code>docker run -it &#123;镜像名:version&#125;</code></strong></li><li><strong>在之前docker基础上生成新的镜像， <code>docker commit &#123;容器id&#125; &#123;新镜像名:version&#125;</code></strong></li><li><strong>打包，<code>docker save -o name.tar &#123;镜像名:version&#125;</code></strong></li><li><strong>读取镜像包，<code>docker load --input &#123;镜像名.tar&#125;</code></strong></li></ul><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li><strong>删除镜像，<code>docker rmi -f &#123;镜像名&#125;</code></strong></li><li><strong>查看正在运行容器，<code>docker ps</code></strong></li><li><strong>查看镜像，<code>docker images</code></strong></li><li><strong>分配GPU，<code>docker run -it --gpus all &#123;镜像名:version&#125;</code></strong></li></ul><br/>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2022/09/05/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/05/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-学习笔记"><a href="#Git-学习笔记" class="headerlink" title="Git 学习笔记"></a>Git 学习笔记</h1><p><strong>援引<a href="https://www.kuangstudy.com/bbs/1490863647927767042">Git 01 概述-KuangStudy-文章</a></strong></p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p><strong>版本控制（Revision Control）</strong>用于在开发过程中管理文件修改历史，方便<strong>查看</strong>和<strong>备份</strong>。</p><p>它的作用如下：</p><ul><li>实现跨区域多人协同开发。</li><li>追踪和记载一个或者多个文件的历史记录。</li><li>组织和保护你的源代码和文档。</li><li>统计工作量。</li><li>并行开发、提高开发效率。</li><li>跟踪记录整个软件的开发过程。</li><li>减轻开发人员的负担，节省时间，同时降低人为错误。</li></ul><p>简而言之就是用于<strong>管理多人协同开发</strong>的技术。</p><h3 id="Git分布式版本控制"><a href="#Git分布式版本控制" class="headerlink" title="Git分布式版本控制"></a>Git分布式版本控制</h3><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史。在<strong>没有网络</strong>的情况下，可以离线在本地提交，只需在连网时推送到相应的服务器或其他用户那里。</p><p>由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据。不会因为服务器损坏或者网络问题，造成不能工作的情况，极大的降低了风险</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2022/02/08/kuangstudy7f46eff3-a062-41ba-bbff-8bddf1631276.webp"></p><h2 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h2><h3 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage&#x2F;lndex）、资源库（Repository或Git Directory）。<br>如果在加上远程的git仓库（Remote Directory）就可以分为四个工作区域。<br>文件在这四个区域之间的转换关系如下：<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2022/02/08/kuangstudyfb3ebf72-ba68-4156-ad6b-9e8e188db116.png" alt="img"></p><ul><li><strong>Workspace：</strong>工作区，就是你平时存放项目代码的地方。</li><li><strong>Index&#x2F;Stage：</strong>暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li><li><strong>Repository：</strong>仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li><strong>Remote：</strong>远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。</li></ul><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2022/02/08/kuangstudy3edf997b-b1fe-4740-8b02-5878e55a9395.png" alt="img"></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch-name]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line">git merge [branch-name]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><br/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 初始化</span></span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 新建分支</span></span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 切换分支</span></span></span><br><span class="line">git checkout -b [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 放入暂存区</span></span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释信息&quot;</span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 推送</span></span></span><br><span class="line">git push</span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 回撤</span></span></span><br><span class="line">git reset HEAD // 回撤暂存区内容到工作目录</span><br><span class="line">git reset HEAD --soft 回撤提交到暂存区</span><br><span class="line">git reset HEAD --hard // 回撤提交 放弃变更 (慎用)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT打包技巧</title>
      <link href="/2022/09/01/QT%E6%89%93%E5%8C%85%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/09/01/QT%E6%89%93%E5%8C%85%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="QT编译打包技巧"><a href="#QT编译打包技巧" class="headerlink" title="QT编译打包技巧"></a>QT编译打包技巧</h1><h2 id="1-QT编译"><a href="#1-QT编译" class="headerlink" title="1. QT编译"></a>1. QT编译</h2><p>编译时不能有中文路径</p><h2 id="2-QT打包"><a href="#2-QT打包" class="headerlink" title="2. QT打包"></a>2. QT打包</h2><ul><li>单独创建一个文件夹，将编译好的exe文件拷贝出来</li><li>用qt的命令行，cd到考出来的文件夹</li><li>使用<code>windeployqt</code>命令打包，即<code>windeployqt 文件名.exe</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程</title>
      <link href="/2022/06/07/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/07/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是JUC"><a href="#1-什么是JUC" class="headerlink" title="1. 什么是JUC"></a>1. 什么是JUC</h1><p><strong>java.util 工具包</strong></p><ul><li><p><strong>java.util.concurrent.locks</strong></p></li><li><p><strong>java.util.concurrent</strong></p></li><li><p><strong>java.util.concurrent.atomic</strong></p></li></ul><p><strong>业务：普通的线程 Thread</strong></p><p><strong>Runnable 没有返回值、效率相比 Callable 相对较低</strong></p><br/><h1 id="2-线程和进程"><a href="#2-线程和进程" class="headerlink" title="2. 线程和进程"></a>2. 线程和进程</h1><p><strong>进程：一个程序，QQ.exe Music.exe  程序的集合</strong></p><p><strong>线程： 一个进程往往包含多个线程，至少包含一个</strong></p><p><strong>java 默认有几个线程？ 2个 main  、 GC</strong></p><p><strong>Thread、 Runnable、 Callable</strong></p><h2 id="Java真的可以开线程吗？"><a href="#Java真的可以开线程吗？" class="headerlink" title="Java真的可以开线程吗？"></a>Java真的可以开线程吗？</h2><p><strong>不能，Java只能通过 native 调用底层C++</strong></p><blockquote><p>​    <strong>并发、并行</strong></p></blockquote><p><strong>并发编程：并发、并行</strong></p><p><strong>并发（多个线程操作同一个资源）</strong></p><ul><li>单核：交替执行</li></ul><p><strong>并行（同时执行）</strong></p><ul><li>多核：多个线程可以同时执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取cpu核数</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>并发编程本质：充分利用CPU资源</strong></p><br/><h2 id="线程有几个状态"><a href="#线程有几个状态" class="headerlink" title="线程有几个状态"></a>线程有几个状态</h2><p><strong>6个状态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        <span class="comment">// 新生</span></span><br><span class="line">        NEW,</span><br><span class="line">        <span class="comment">// 运行</span></span><br><span class="line">        RUNNABLE,</span><br><span class="line">        <span class="comment">// 阻塞</span></span><br><span class="line">        BLOCKED,</span><br><span class="line">        <span class="comment">// 等待，阻塞式</span></span><br><span class="line">        WAITING,</span><br><span class="line">        <span class="comment">// 超时等待</span></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line">        <span class="comment">// 终止</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="wait、sleep-区别"><a href="#wait、sleep-区别" class="headerlink" title="wait、sleep 区别"></a>wait、sleep 区别</h2><ul><li><strong>来自不同的类，wait &#x3D;&gt; Object ,  sleep &#x3D;&gt; Thread</strong></li><li><strong>wait会释放锁，sleep不会释放锁</strong></li><li><strong>wait 必须在同步代码块中 ， sleep 可以在任何地方使用</strong></li><li><strong>wait 不需要捕获异常， sleep 必须捕获异常</strong></li></ul><br/><h1 id="3-Lock锁-（重点）"><a href="#3-Lock锁-（重点）" class="headerlink" title="3.Lock锁 （重点）"></a>3.Lock锁 （重点）</h1><h3 id="传统：-Synchronized"><a href="#传统：-Synchronized" class="headerlink" title="传统： Synchronized"></a>传统： Synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本的卖票例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 真正的多线程开发</span></span><br><span class="line"><span class="comment">// 线程就是一个单独的资源类，没有任何附属的操作</span></span><br><span class="line"><span class="comment">// 1. 属性、方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 并发：多线程操作同一个资源类，把资源丢入线程</span></span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="comment">// @FunctionalInterface 函数式接口， lambda表达式 （参数）-&gt; &#123;代码&#125;</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)&#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)&#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)&#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源类  OOP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line">    <span class="comment">// 属性、 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卖票的方式</span></span><br><span class="line">    <span class="comment">// synchronized 本质：队列，锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出了第&quot;</span> + (number--) + <span class="string">&quot;票，剩余：&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="Lock-接口"><a href="#Lock-接口" class="headerlink" title="Lock 接口"></a>Lock 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">l</span> <span class="operator">=</span> ...; </span><br><span class="line">l.lock(); </span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// access the resource protected by this lock </span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    l.unlock(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li><strong>ReentrantLock：常用、可重入锁</strong></li><li><strong>ReentrantReadWriteLock.ReadLock：读锁</strong></li><li><strong>ReentrantReadWriteLock.WriteLock：写锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>默认非公平锁</strong></p><p><strong>公平锁：先来后到</strong></p><p><strong>非公平锁：可以插队（默认）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本的卖票例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真正的多线程开发</span></span><br><span class="line"><span class="comment">// 线程就是一个单独的资源类，没有任何附属的操作</span></span><br><span class="line"><span class="comment">// 1. 属性、方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 并发：多线程操作同一个资源类，把资源丢入线程</span></span><br><span class="line">        <span class="type">Ticket2</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @FunctionalInterface 函数式接口， lambda表达式 （参数）-&gt; &#123;代码&#125;</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)&#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)&#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)&#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lock 三部曲</span></span><br><span class="line"><span class="comment">// 1.   new ReentrantLock()</span></span><br><span class="line"><span class="comment">// 2.   lock.lock() // 加锁</span></span><br><span class="line"><span class="comment">// 3.   finally =&gt; lock.unlock()    //解锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket2</span> &#123;</span><br><span class="line">    <span class="comment">// 属性、 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();    <span class="comment">// 加锁</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务代码</span></span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出了第&quot;</span> + (number--) + <span class="string">&quot;票，剩余：&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Synchronized-和-Lock-区别"><a href="#Synchronized-和-Lock-区别" class="headerlink" title="Synchronized  和  Lock  区别"></a>Synchronized  和  Lock  区别</h3><ul><li><strong>Synchronized 是Java内置的关键字，Lock 是一个Java类</strong></li><li><strong>Synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁</strong></li><li><strong>Synchronized 会自动释放锁，Lock 必须要手动释放锁。如果不释放会导致 死锁</strong></li><li><strong>Synchronized 线程1（获得锁，阻塞）、线程2（等待）； Lock锁就不一定一直等待</strong></li><li><strong>Synchronized 可重入锁，不可以中断的，非公平； Lock 可重入锁，可以判断锁，非公平（可以自己设置）</strong></li><li><strong>Synchronized 适合少量代码同步问题；Lock 适合大量同步代码</strong></li></ul><br/><h1 id="4-生产者和消费者问题"><a href="#4-生产者和消费者问题" class="headerlink" title="4. 生产者和消费者问题"></a>4. 生产者和消费者问题</h1><p><strong>传统方式：</strong></p><ul><li><p>Synchronized</p><ul><li><p>wait</p></li><li><p>notify</p></li></ul></li></ul><p><strong>Condition方式：</strong></p><ul><li><code>Condition</code>因素的 <code>Object</code>监测方法（ <code>wait</code>， <code>notify</code>和 <code>notifyAll</code>为不同的对象给在每个对象的多个等待集的影响，结合 <code>Lock</code>实现任意使用。在 <code>Lock</code>取代 <code>synchronized</code>方法和语句的使用，一个 <code>Condition</code>取代对象监视器的使用方法。</li></ul><br/>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记-Part1</title>
      <link href="/2022/05/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-学习笔记-Part1"><a href="#MySQL-学习笔记-Part1" class="headerlink" title="MySQL 学习笔记  Part1"></a>MySQL 学习笔记  Part1</h1><p><strong>SQL(Structed Query Language)</strong></p><p><strong>视频链接：<a href="https://www.bilibili.com/video/BV1Xb41177na?p=1">https://www.bilibili.com/video/BV1Xb41177na?p=1</a></strong></p><br/><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1-下载安装MySQL"><a href="#1-下载安装MySQL" class="headerlink" title="1. 下载安装MySQL"></a>1. 下载安装MySQL</h3><p><strong><a href="https://dev.mysql.com/downloads/">MySQL Community Downloads</a></strong></p><p><strong>在Accounts and Roles界面设置root用户的密码，Connect To Server 界面再次输入密码。</strong></p><p><strong>其余全部默认</strong></p><br/><h3 id="2-配置MySQL"><a href="#2-配置MySQL" class="headerlink" title="2. 配置MySQL"></a>2. 配置MySQL</h3><ul><li>点击主界面 + ，新建连接</li></ul><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202205/20220512_1.png"></p><br/><ul><li>分别设置连接名称，端口密码，并测试保存。</li></ul><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202205/20220512_2.png"></p><br/><h3 id="3-创建一个数据库"><a href="#3-创建一个数据库" class="headerlink" title="3. 创建一个数据库"></a>3. 创建一个数据库</h3><p><strong>下载链接下<code>SQL Course Materials</code>：<a href="https://github.com/JiaZhengJingXianSheng/Study-File">https://github.com/JiaZhengJingXianSheng/Study-File</a></strong></p><p><strong>运行<code>create-databases.sql</code></strong></p><br/><h2 id="二、单一表格中检索数据"><a href="#二、单一表格中检索数据" class="headerlink" title="二、单一表格中检索数据"></a>二、单一表格中检索数据</h2><p><strong>MySQL语句在执行时关键字是忽视大小写的，建议关键字使用大写。</strong></p><p><strong>同时也会忽略回车 空格，所以下方两个指令是一样的，但建议使用第二种。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM customers# 读取customers表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM customers# 读取customers表</span><br></pre></td></tr></table></figure><br/><h3 id="1-SELECT-语句"><a href="#1-SELECT-语句" class="headerlink" title="1. SELECT 语句"></a>1. SELECT 语句</h3><ul><li><strong><code>USE</code> 用来指定数据库</strong></li><li><strong><code>SELECT</code> 用来查询具体的信息</strong></li><li><strong><code>FROM</code> 指定了从某个表中查询</strong></li><li><strong><code>ORDER BY</code> 可以用来排序</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE sql_store;  # 选中数据库  </span><br><span class="line"></span><br><span class="line"># SELECT customer_id, fisrt_name 选择指定列</span><br><span class="line"></span><br><span class="line"># 下面3行是一起的</span><br><span class="line">-- SELECT * FROM customers# 读取customers表</span><br><span class="line">-- WHERE customer_id = 1# WHERE 语句可以查询某一条记录</span><br><span class="line">-- ORDER BY first_name -- 根据first_name排序</span><br></pre></td></tr></table></figure><br/><ul><li><strong>读取指定列，如果需要查询列过多，可以换行。也可以直接在<code>SELECT</code> 语句中进行数学运算。</strong></li><li><strong><code>AS</code> 可以指定名称。如果指定的名称包含空格，可以用引号包含起来。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">first_name, </span><br><span class="line">    last_name, </span><br><span class="line">    points, </span><br><span class="line">    (points + 10) * 100 AS &#x27;discount factor&#x27;</span><br><span class="line">FROM customers# 读取指定列</span><br></pre></td></tr></table></figure><br/><ul><li><strong>如果我们想检索出不重复的结果可以使用 <code>DISTINCT</code> 关键字</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT state</span><br><span class="line">FROM customers</span><br></pre></td></tr></table></figure><br/><h3 id="2-WHERE-子句"><a href="#2-WHERE-子句" class="headerlink" title="2. WHERE 子句"></a>2. WHERE 子句</h3><ul><li><strong>下面命令实在customers表下查找points大于300的值</strong></li><li><strong>“&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;，&#x3D;(等于)，!&#x3D;(不等于)，&lt;&gt;(不等于)”</strong></li><li><strong>MySQL中日期的标准写法是 ‘1990-01-01’</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE points &gt; 300</span><br></pre></td></tr></table></figure><ul><li><strong>查询2019年以后订单</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Get the orders placed 2019-01-01</span><br><span class="line">SELECT *</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date &gt;= &#x27;2019-01-01&#x27;</span><br></pre></td></tr></table></figure><br/><h3 id="3-AND-OR-NOT-操作符"><a href="#3-AND-OR-NOT-操作符" class="headerlink" title="3. AND    OR     NOT 操作符"></a>3. AND    OR     NOT 操作符</h3><ul><li><strong>与或非，例如：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Get the orders placed 2019-01-01</span><br><span class="line">SELECT *</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date &gt;= &#x27;2019-01-01&#x27; OR (points &gt; 1000 AND state = &#x27;VA&#x27;)</span><br></pre></td></tr></table></figure><br/><h3 id="4-IN-操作符"><a href="#4-IN-操作符" class="headerlink" title="4. IN 操作符"></a>4. IN 操作符</h3><ul><li><strong>有多个匹配项时使用，原理是OR</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">-- WHERE state = &#x27;VA&#x27; OR state = &#x27;GA&#x27; OR state = &#x27;FL&#x27;</span><br><span class="line">WHERE state IN (&#x27;VA&#x27;, &#x27;GA&#x27;, &#x27;FL&#x27;)</span><br></pre></td></tr></table></figure><br/><h3 id="5-BETWEEN"><a href="#5-BETWEEN" class="headerlink" title="5. BETWEEN"></a>5. BETWEEN</h3><ul><li><strong>比如找出 <code>1000 &lt;= points &lt;= 3000</code> 的列</strong></li><li><strong><code>BETWEEN</code>用来查找范围值</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">-- WHERE points &gt;= 1000 AND points &lt;= 3000</span><br><span class="line">WHERE points BETWEEN 1000 AND 3000</span><br></pre></td></tr></table></figure><br/><h3 id="6-LIKE-筛选"><a href="#6-LIKE-筛选" class="headerlink" title="6. LIKE 筛选"></a>6. LIKE 筛选</h3><ul><li><strong>LIKE 可以用来筛选，例如下面可以筛选出<code>last_name</code> 以b开头的数据。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">WHERE last_name LIKE &#x27;b%&#x27;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>&#39;%b%&#39;</code> 代表包含 b。%为忽视字符，且无数量限制</strong></p></li><li><p><strong><code>&#39;_y&#39;</code> 表示不管第一个字符是什么，第二个字符为y。下划线为忽视一个字符</strong></p></li></ul><br/><h3 id="7-REGEXP-正则表达式"><a href="#7-REGEXP-正则表达式" class="headerlink" title="7. REGEXP 正则表达式"></a>7. REGEXP 正则表达式</h3><ul><li><strong><code>REGEXP</code> 是正则表达式的简称</strong></li><li><strong>比如我们想在<code>last_name</code> 里找出包含 field 的条目，可以使用 REGEXP ，如下</strong></li><li><strong><code>^</code> 幂符号代表以此开始</strong></li><li><strong><code>$</code> 符号代表结尾</strong></li><li><strong><code>|</code> 可以搜索多个字符</strong></li><li><strong><code>[]</code> 代表多个字符，比如  <code>&#39;[gim]e&#39;</code> 代表 ge 或 ie 或 me</strong></li><li>**<code>-</code> 代表范围， 例如 <code>a-f</code> 代表从 a 到 f **</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">-- WHERE last_name LIKE &#x27;%field%&#x27;</span><br><span class="line">WHERE last_name REGEXP &#x27;field&#x27;</span><br><span class="line"></span><br><span class="line">-- 代表以field开头</span><br><span class="line">-- WHERE last_name REGEXP &#x27;^field&#x27;</span><br><span class="line"></span><br><span class="line">-- 代表以field结尾</span><br><span class="line">-- WHERE last_name REGEXP &#x27;field$&#x27;</span><br><span class="line"></span><br><span class="line">-- 代表包含field或mac</span><br><span class="line">-- WHERE last_name REGEXP &#x27;field|mac&#x27;</span><br><span class="line"></span><br><span class="line">-- 代表包含 ge 或 ie 或 me</span><br><span class="line">-- WHERE last_name REGEXP &#x27;[gim]e&#x27;</span><br></pre></td></tr></table></figure><br/><h3 id="8-IS-NULL-检索缺失项"><a href="#8-IS-NULL-检索缺失项" class="headerlink" title="8. IS NULL  检索缺失项"></a>8. IS NULL  检索缺失项</h3><ul><li><p><strong>可以搭配 WHERE 查询缺失项 IS NULL; 未缺失项 IS NOT NULL</strong></p></li><li><p><strong>例如查询电话号码为零的信息</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">-- 为空</span><br><span class="line">WHERE phone IS NULL</span><br><span class="line">-- 不为空</span><br><span class="line">-- WHERE phone IS NOT NULL</span><br></pre></td></tr></table></figure><br/><h3 id="9-ORDER-BY-排序"><a href="#9-ORDER-BY-排序" class="headerlink" title="9. ORDER BY 排序"></a>9. ORDER BY 排序</h3><ul><li><strong>默认为升序排列，如果需要逆序，在后面增加 DESC 字符</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">-- 升序</span><br><span class="line">ORDER BY first_name</span><br><span class="line">-- 降序</span><br><span class="line">-- ORDER BY first_name DESC</span><br></pre></td></tr></table></figure><ul><li><strong>也可以混合排序，比如下方是先按照 state 排序，在同一个 state 内再按 first_name 排序</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">ORDER BY state, first_name</span><br></pre></td></tr></table></figure><br/><h3 id="10-LIMIT"><a href="#10-LIMIT" class="headerlink" title="10. LIMIT"></a>10. LIMIT</h3><ul><li><strong>LIMIT 只加一个参数代表查找前多少个</strong></li><li><strong>LIMIT 加两个参数，其中第一个参数代表偏移量</strong></li><li><strong>LIMIT 子句永远写在最后</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM customers</span><br><span class="line">-- 只查询前3个</span><br><span class="line">-- LIMIT 3</span><br><span class="line"></span><br><span class="line">-- page 1: 1-3</span><br><span class="line">-- page 2: 4-6</span><br><span class="line">-- page 3: 7-9</span><br><span class="line">-- 第一个参数为偏移量， 表示忽视前六个</span><br><span class="line">-- 表示7-9</span><br><span class="line">LIMIT 6, 3</span><br></pre></td></tr></table></figure><br/><h2 id="三、-多个表中检索数据"><a href="#三、-多个表中检索数据" class="headerlink" title="三、 多个表中检索数据"></a>三、 多个表中检索数据</h2><h3 id="1-库内合并数据"><a href="#1-库内合并数据" class="headerlink" title="1. 库内合并数据"></a>1. 库内合并数据</h3><ul><li>SQL 有两种连接方式，<strong>inner</strong> 和 <strong>outer</strong>， <strong>默认inner</strong></li><li>JOIN 和 ON 合起来使用可以将表拼接起来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 把customer 和 orders按id相同拼接起来</span><br><span class="line">SELECT *</span><br><span class="line">FROM orders</span><br><span class="line">JOIN customers </span><br><span class="line">ON orders.customer_id = customers.customer_id</span><br><span class="line"></span><br><span class="line">-- 只查看order_id, customer_id, first_name, last_name 匹配项</span><br><span class="line">-- 如果要查看customer_id 应该加上前置表名，比如 orders.customer_id</span><br><span class="line">SELECT order_id, orders.customer_id, first_name, last_name</span><br><span class="line">FROM orders</span><br><span class="line">JOIN customers </span><br><span class="line">ON orders.customer_id = customers.customer_id</span><br></pre></td></tr></table></figure><ul><li><strong>简化名称</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT order_id, o.customer_id, first_name, last_name</span><br><span class="line">-- order 命名为 o， customer 命名为 c</span><br><span class="line">FROM orders o</span><br><span class="line">JOIN customers c</span><br><span class="line">ON o.customer_id = c.customer_id</span><br></pre></td></tr></table></figure><ul><li><strong>注意：简化名称为，就不能使用原名称了</strong></li></ul><br/><h3 id="2-跨库合并数据"><a href="#2-跨库合并数据" class="headerlink" title="2. 跨库合并数据"></a>2. 跨库合并数据</h3><ul><li><strong>跨库合并时要再表名前加上库名，例如：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE sql_store;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM order_items oi</span><br><span class="line">JOIN sql_inventory.products p </span><br><span class="line">ON oi.product_id = p.product_id</span><br></pre></td></tr></table></figure><br/><h3 id="3-合并表"><a href="#3-合并表" class="headerlink" title="3. 合并表"></a>3. 合并表</h3><ul><li><p>下面 hr 数据库存放的是人员工作信息， 其中reports_to 表示为谁打工， employee_id 为每个人id号</p></li><li><p>下面实现了，找到所有的老板，并将老板信息拼接在后面</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE sql_hr;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">e.employee_id,</span><br><span class="line">e.first_name,</span><br><span class="line">m.first_name AS manager</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN employees m</span><br><span class="line">ON e.reports_to = m.employee_id</span><br></pre></td></tr></table></figure><br/><h3 id="4-跨表匹配合并数据"><a href="#4-跨表匹配合并数据" class="headerlink" title="4. 跨表匹配合并数据"></a>4. 跨表匹配合并数据</h3><ul><li><strong>比如我们一个表中记录着状态位，而对应的状态却在另外的表里，这时候就需要跨表匹配</strong></li><li><strong>下面实现了，找到orders里对应的客户（客户信息存放在customers），再匹配状态（状态信息存放在order_statues）</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">USE sql_store;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">o.order_id,</span><br><span class="line">    o.order_date,</span><br><span class="line">    c.first_name,</span><br><span class="line">    c.last_name,</span><br><span class="line">    os.name AS status</span><br><span class="line">FROM orders o</span><br><span class="line">JOIN customers c </span><br><span class="line">ON o.customer_id = c.customer_id</span><br><span class="line">JOIN order_statuses os</span><br><span class="line">ON o.status = os.order_status_id</span><br></pre></td></tr></table></figure><br/><h3 id="5-隐式合并"><a href="#5-隐式合并" class="headerlink" title="5. 隐式合并"></a>5. 隐式合并</h3><p><strong>下面第二种写法是隐式合并</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">USE sql_store;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM orders o</span><br><span class="line">JOIN customers c</span><br><span class="line">ON o.customer_id = c.customer_id</span><br><span class="line"></span><br><span class="line">-- 隐式合并</span><br><span class="line">SELECT *</span><br><span class="line">FROM orders o, customers c</span><br><span class="line">WHERE o.customer_id = c.customer_id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo-Github图床配置</title>
      <link href="/2022/05/06/PicGo-Github%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/06/PicGo-Github%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="PicGo-Github图床配置"><a href="#PicGo-Github图床配置" class="headerlink" title="PicGo-Github图床配置"></a>PicGo-Github图床配置</h1><h2 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1. 下载PicGo"></a>1. 下载PicGo</h2><p><strong>下载链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202205/20220506_1.png" alt="20220506_1.png"></p><br/><h2 id="2-Github-新建仓库"><a href="#2-Github-新建仓库" class="headerlink" title="2.Github 新建仓库"></a>2.Github 新建仓库</h2><br/><h2 id="3-生成token"><a href="#3-生成token" class="headerlink" title="3.生成token"></a>3.生成token</h2><p><strong>Settings -&gt; Developer settings -&gt; Personal access tokens</strong></p><p><strong>点击<code>Generate new token</code></strong></p><p><strong>勾选<code>repo</code>，并生成token</strong></p><br/><h2 id="4-配置PicGo"><a href="#4-配置PicGo" class="headerlink" title="4.配置PicGo"></a>4.配置PicGo</h2><p><strong>仓库名为 <code>用户名/仓库名</code> 格式</strong></p><p><strong>分支名：<code>main</code></strong></p><p><strong>建议按时间存储，路径设置为202205</strong></p><br/>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解和反射</title>
      <link href="/2022/05/05/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/05/05/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-注解和反射"><a href="#Java-注解和反射" class="headerlink" title="Java 注解和反射"></a>Java 注解和反射</h1><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h2><ul><li><p><strong>Annotation 不是程序本身， 可以对程序做出解释。</strong></p></li><li><p><strong>可以被其他程序（比如：编译）读取。</strong></p></li><li><p><strong>注解是以 “@注释名” 在代码中存在，还可以添加一些参数值</strong></p></li><li><p><strong>可以附加在package， class， method， field等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。</strong></p></li></ul><hr><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><ul><li><p><strong>@Override：检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</strong> </p></li><li><p><strong>@Deprecated： 标记过时方法。如果使用该方法，会报编译警告。</strong></p></li><li><p><strong>@SuppressWarnings： 指示编译器去忽略注解中声明的警告。</strong></p></li></ul><hr><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p><strong>负责注解其他注解的注解。</strong></p><ul><li><p><strong>@Target： 用于描述注解的使用范围，标记这个注解应该是哪种 Java 成员。</strong></p></li><li><p><strong>@Retention： 表示需要在什么级别保存该注释信息，用于描述注解的生命周期。( SOURCE &lt; CLASS &lt; RUNTIME )</strong></p></li><li><p><strong>@Document： 说明该注解将被包含在 javadoc 中。</strong></p></li><li><p><strong>@Inherited： 说明子类可以继承父类中的该注解。</strong></p></li></ul><hr><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p><strong>使用 @interface 自定义注解时，自动继承了 java.lang.annotation.Annotation 接口</strong></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><strong>@interface 用来声明一个注解，格式：public @interface 注解名 { 定义内容 }</strong></li><li><strong>其中每一个方法实际上是声明了一个配置参数，方法的名称就是参数的名称</strong></li><li><strong>返回值类型就是参数的类（返回值只能是基本类型， Class， String， enum）</strong></li><li><strong>可以通过default来声明参数的默认值。</strong></li><li><strong>如果只有一个参数成员，一般参数名为value</strong></li><li><strong>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">//测试自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"><span class="comment">//显示定义值 / 不显示值就是默认值</span></span><br><span class="line">    <span class="meta">@MyAnnotation2(age = 18,name = &quot;秦疆&quot;,id = 001,schools = &#123;&quot;西工大&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有一个参数, 默认名字一般是value.使用可省略不写</span></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;aaa&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//参数类型 , 参数名</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>; <span class="comment">//String indexOf(&quot;abc&quot;) -1 , 不存在,找不到</span></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;西部开源&quot;</span>,<span class="string">&quot;狂神说Java&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    <span class="comment">// 参数类型 参数名称</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <br/><hr><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="动态语言-VS-静态语言"><a href="#动态语言-VS-静态语言" class="headerlink" title="动态语言 VS 静态语言"></a>动态语言 VS 静态语言</h2><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><ul><li><strong>在运行时可以改变其结构的语言。</strong></li><li><strong>主要动态语言：Object-C、 C#、 JavaScript、PHP、 Python等</strong></li></ul><h3 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h3><ul><li><p><strong>与动态语言相对应，运行时结构不可变的语言就是静态语言， 如Java、 C、 C++</strong></p></li><li><p><strong>Java 不是动态语言，但 Java 可以称之为 “准动态语言”</strong></p></li></ul><hr><h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><ul><li><strong>Reflection（反射）是 Java 被视为动态语言的关键，反射机制允许程序在执行期借助于 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象（一个类只有一个 Class 对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的成为：反射</strong></li></ul><br/><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p><strong>可以实现动态创建对象和编译，体现出很大的灵活性</strong></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><strong>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉 JVM ，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</strong></li></ul><br/><h3 id="反射相关的主要API"><a href="#反射相关的主要API" class="headerlink" title="反射相关的主要API"></a>反射相关的主要API</h3><ul><li><p><strong>java.lang.Class：代表一个类</strong></p></li><li><p><strong>java.lang.reflect.Method：代表类的方法</strong></p></li><li><p><strong>java.lang.reflect.Field：代表类的成员变量</strong></p></li><li><p><strong>java.lang.reflect.Constructor：代表类的构造器</strong></p></li><li><p><strong>… …</strong></p></li></ul><br/><hr><h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><p><strong>在Object类中定义了以下的方法，此方法将被所有子类继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title function_">getClass</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p><strong>这个方法返回值类型是一个Class类，此类是Java反射的源头。</strong></p><br/><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static Class.forName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>返回缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示实体的名称</td></tr><tr><td>Class getSuperClass()</td><td>返回父类的Class对象</td></tr><tr><td>Class[] getInterfaces()</td><td>返回当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr></tbody></table><hr><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试class类的创建方式有哪些</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是：&quot;</span> + person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一：通过对象获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：通过forname获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三：通过类名.class 获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式四：基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得父类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有类型的class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;        <span class="comment">// 类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C2</span> <span class="operator">=</span> Comparable.class;    <span class="comment">// 接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C3</span> <span class="operator">=</span> String[].class;      <span class="comment">// 一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;       <span class="comment">// 二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C5</span> <span class="operator">=</span> Override.class;      <span class="comment">// 注解</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C6</span> <span class="operator">=</span> ElementType.class;   <span class="comment">// 枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C7</span> <span class="operator">=</span> Integer.class;       <span class="comment">// 基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;          <span class="comment">// void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">C9</span> <span class="operator">=</span> Class.class;         <span class="comment">// class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(C2);</span><br><span class="line">        System.out.println(C3);</span><br><span class="line">        System.out.println(C4);</span><br><span class="line">        System.out.println(C5);</span><br><span class="line">        System.out.println(C6);</span><br><span class="line">        System.out.println(C7);</span><br><span class="line">        System.out.println(C8);</span><br><span class="line">        System.out.println(C9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要元素类型与维度一致，就是同一个Class</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <br/><hr><h3 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h3><ul><li><p><strong>加载：</strong> 将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构， 然后生成一个代表这个类的java.lang.Class对象。</p></li><li><p><strong>链接：</strong>将Java类的二进制代码合并到JVM的运行状态之中的过程。 </p><ul><li><p><strong>验证：</strong>确保加载的类信息符合JVM规范，没有安全方面的问题 。</p></li><li><p><strong>准备：</strong>正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。 </p></li><li><p><strong>解析：</strong>虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</p></li></ul></li><li><p><strong>初始化：</strong> </p><ul><li><p>执行类构造器方法的过程。类构造器方法是由编译期自动收集类中所有类变量的赋值动作 和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。 </p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。 </p></li><li><p>虚拟机会保证一个类的方法在多线程环境中被正确加锁和同步。</p></li></ul></li></ul><br/><hr><h3 id="什么时候会发生类初始化？"><a href="#什么时候会发生类初始化？" class="headerlink" title="什么时候会发生类初始化？"></a>什么时候会发生类初始化？</h3><ul><li><p>类的主动引用（一定会发生类的初始化） </p><ul><li><p>当虚拟机启动，先初始化main方法所在的类 </p></li><li><p>new一个类的对象 </p></li><li><p>调用类的静态成员（除了final常量）和静态方法 </p></li><li><p>使用java.lang.reflect包的方法对类进行反射调用 </p></li><li><p>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</p></li></ul></li><li><p>类的被动引用（不会发生类的初始化） </p><ul><li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化。<strong>如：当通过子类引用父类的静态变量，不会导致子类初始化</strong> </p></li><li><p>通过数组定义类引用，不会触发此类的初始化 </p></li><li><p>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</p></li></ul></li></ul><br/><hr><h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><ul><li><p><strong>类加载的作用：</strong>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。 </p></li><li><p><strong>类缓存：</strong>标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven学习笔记</title>
      <link href="/2022/04/28/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/28/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="1-Maven-简介"><a href="#1-Maven-简介" class="headerlink" title="1. Maven 简介"></a>1. Maven 简介</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>​    一款项目管理工具，由java语言进行编写，沿用了java面向对象的思想，把项目开发和管理的过程抽象成了一个 POM （对象模型） ，同时将描述对象的属性方法放到了pom.xml文件中，用于描述对象模型。   </p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2  作用"></a>1.2  作用</h3><p>​    管理jar包，解决jar包间的冲突（jar包：为java的一种文档格式，类似ZIP，为压缩java的文件包。） 2、统一了开发结构，提供了统一标准的项目结构 3、提供标准、跨平台（window–&gt;Linux）的自动化项目构建方式。   </p><hr><h2 id="2-Maven的安装配置和目录结构"><a href="#2-Maven的安装配置和目录结构" class="headerlink" title="2. Maven的安装配置和目录结构"></a>2. Maven的安装配置和目录结构</h2><h3 id="2-1-下载Maven"><a href="#2-1-下载Maven" class="headerlink" title="2.1 下载Maven"></a>2.1 下载Maven</h3><p><strong>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></strong>   </p><h3 id="2-2-环境变量"><a href="#2-2-环境变量" class="headerlink" title="2.2 环境变量"></a>2.2 环境变量</h3><p><strong>解压下载的maven包，将bin目录添加到path下</strong>    </p><h3 id="2-3-检查是否安装成功"><a href="#2-3-检查是否安装成功" class="headerlink" title="2.3 检查是否安装成功"></a>2.3 检查是否安装成功</h3><p><strong>terminal下执行 mvn-v</strong>  </p><h3 id="2-4-maven项目目录结构"><a href="#2-4-maven项目目录结构" class="headerlink" title="2.4 maven项目目录结构"></a>2.4 maven项目目录结构</h3><table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td>${basedir}</td><td>存放 pom.xml 和所有的子目录</td></tr><tr><td>${basedir}&#x2F;src&#x2F;main&#x2F;java</td><td>项目的 java 源码</td></tr><tr><td>${basedir}&#x2F;src&#x2F;main&#x2F;resource</td><td>项目的资源，比如 property 文件</td></tr><tr><td>${basedir}&#x2F;src&#x2F;test&#x2F;java</td><td>项目的测试类，比如 JUnit 代码</td></tr><tr><td>${basedir}&#x2F;src&#x2F;test&#x2F;resource</td><td>测试使用的资源</td></tr></tbody></table><h3 id="2-5-maven常用的构建命令"><a href="#2-5-maven常用的构建命令" class="headerlink" title="2.5 maven常用的构建命令"></a>2.5 maven常用的构建命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn -v 查看maven版本</span><br><span class="line">mvn compile 用来将src/main/java下的文件编译为class文件，并输出到target中。</span><br><span class="line">mvn test test 用来将src/main/test下的文件进行编译，同时执行一次</span><br><span class="line">mvn package 打包,将项目进行打包，如果是jar打包为jar，war打包为war。</span><br><span class="line">mvn clean 删除编译产生的target文件夹</span><br><span class="line">mvn install 安装jar包到本地仓库中</span><br></pre></td></tr></table></figure><p><strong>1.编译java文件</strong></p><p>​    mvn compile  </p><p><strong>2.执行main方法</strong></p><p>​    mvn exec:java -Dexec.mainClass&#x3D;”com.xxx.demo.Hello”</p><p><strong>修改默认仓库位置</strong></p><blockquote><p>打开maven目录  –&gt; conf  –&gt;  settings.xml</p><p>添加仓库位置配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/MavenIDEA/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>更改阿里镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="3-Maven命令"><a href="#3-Maven命令" class="headerlink" title="3. Maven命令"></a>3. Maven命令</h2><p><em>Maven的命令格式如下：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn [plugin-name]:[goal-name]</span><br></pre></td></tr></table></figure><p>命令代表的含义：执行<code>plugin-name</code> 插件的 <code>goal-name</code> 目标。</p><h3 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn –version</td><td>版本信息</td></tr><tr><td>mvn clean</td><td>清理项目临时文件，一般是target目录</td></tr><tr><td>mvn compile</td><td>编译源代码，一般是编译模块下src&#x2F;main&#x2F;java目录</td></tr><tr><td>mvn package</td><td>项目打包工具，会在模块下的target目录下生成jar或war等文件</td></tr><tr><td>mvn test</td><td>测试命令，或执行src&#x2F;test&#x2F;java&#x2F;下的junit测试用例</td></tr><tr><td>mvn install</td><td>将打包的jar&#x2F;war文件复制到本地仓库，供其他模块使用</td></tr><tr><td>mvn deploy</td><td>将打包的文件发布到远程参考</td></tr><tr><td>mvn site</td><td>生成项目相关信息的网站</td></tr><tr><td>mvn eclipse:eclipse</td><td>将项目转化为Eclipse项目</td></tr><tr><td>mvn dependency:tree</td><td>打印项目依赖树</td></tr><tr><td>mvn archetype:generate</td><td>创建Maven的普通java项目</td></tr><tr><td>mvn tomcat7:run</td><td>在tomcat容器中运行web应用</td></tr><tr><td>mvn jetty:run</td><td>调用 jetty 插件的 Run 目标，在 Jetty Servlet 容器中启动 web 应用</td></tr></tbody></table><blockquote><p><strong>注意：运行maven命令时，需要定位到maven项目的目录，也就是项目的pom.xml文件所在目录</strong></p></blockquote><h3 id="3-2-命令参数"><a href="#3-2-命令参数" class="headerlink" title="3.2 命令参数"></a>3.2 命令参数</h3><h4 id="3-2-1-D-传入属性参数"><a href="#3-2-1-D-传入属性参数" class="headerlink" title="3.2.1 -D 传入属性参数"></a>3.2.1 -D 传入属性参数</h4><p>例如：</p><p>​        <code>mvn package -Dmaven.test.skip=true</code>  </p><p>​        <strong>以-D开头，将<code>maven.test.skip</code>设置为true，告诉maven打包的时候跳过单元测试。</strong></p><h4 id="3-2-2-P-使用指定的Profile配置"><a href="#3-2-2-P-使用指定的Profile配置" class="headerlink" title="3.2.2 -P 使用指定的Profile配置"></a>3.2.2 -P 使用指定的Profile配置</h4><p>​        比如项目开发时有多个环境，比如开发、测试、预发、正式环境，一般在pom.xml中配置。</p><p>​        <code>profiles</code> 定义了各个环境的变量id，<code>filters</code> 中定义了变量配置文件的地址，其中地址中的环境变量就是上面的<code>profile</code> 中定义的值， <code>resources</code> 中是定义哪些目录下的文件会被配置文件中定义的变量替换。</p><p>​        通过maven 可以实现按不同环境进行打包部署，例如：</p><p>​        <code>mvn package -Pdev -Dmaven.test.skip=true</code> </p><p>​        表示打包本地环境，并跳过单元测试。</p><hr><h2 id="4-Idea-下配置-Maven-环境"><a href="#4-Idea-下配置-Maven-环境" class="headerlink" title="4. Idea 下配置 Maven 环境"></a>4. Idea 下配置 Maven 环境</h2><p><strong>选择 “File” -&gt; “New Projects settings” -&gt; “Settings for new projects”</strong></p><p><strong>搜索maven</strong></p><p><strong>Maven home directory 改为自己安装路径</strong></p><p><strong>User settings file 改为自己安装路径下 conf&#x2F;settings.xml</strong></p><hr><h2 id="5-Maven-项目创建"><a href="#5-Maven-项目创建" class="headerlink" title="5. Maven 项目创建"></a>5. Maven 项目创建</h2><h3 id="5-1-创建java项目"><a href="#5-1-创建java项目" class="headerlink" title="5.1 创建java项目"></a>5.1 创建java项目</h3><h4 id="5-1-1-新建项目"><a href="#5-1-1-新建项目" class="headerlink" title="5.1.1 新建项目"></a>5.1.1 新建项目</h4><ol><li>“File” -&gt; “New” -&gt; “Project”</li><li>选择”Maven” ， 设置JDK版本，选择maven 项目的模板。<strong>quickstart为模板</strong></li><li>GroupId 一般为公司id com.xxx       </li><li>ArtifactId 为自己起名字</li><li>检查Maven环境，选择”Next“</li><li>右下角弹出的提示框，选择”Enable Auto-Import” (Maven启动自动导入)</li></ol><h4 id="5-1-2-编译项目"><a href="#5-1-2-编译项目" class="headerlink" title="5.1.2 编译项目"></a>5.1.2 编译项目</h4><ol><li>点击右上角 “Add Configurations”</li><li>点击”+”号，选择”Maven”</li><li>设置编译项目命令。Name 自定义；Command line 执行的命令：compile</li><li>点击右上角”Run” or “Debug”</li></ol><h4 id="5-1-3-打包项目"><a href="#5-1-3-打包项目" class="headerlink" title="5.1.3 打包项目"></a>5.1.3 打包项目</h4><ol><li>点击右上角 “Add Configurations”</li><li>点击”+”号，选择”Maven”</li><li>设置编译项目命令。Name 自定义；Command line 执行的命令：package</li><li>点击右上角”Run” or “Debug”</li></ol><h3 id="5-2-创建Web项目"><a href="#5-2-创建Web项目" class="headerlink" title="5.2 创建Web项目"></a>5.2 创建Web项目</h3><h4 id="5-2-1-新建项目"><a href="#5-2-1-新建项目" class="headerlink" title="5.2.1 新建项目"></a>5.2.1 新建项目</h4><ol><li>“File” -&gt; “New” -&gt; “Project”</li><li>选择”Maven” ， 设置JDK版本，选择maven 项目的模板。<strong>webapp为模板</strong></li><li>GroupId 一般为公司id com.xxx       </li><li>ArtifactId 为自己起名字</li><li>检查Maven环境，选择”Next“</li><li>右下角弹出的提示框，选择”Enable Auto-Import” (Maven启动自动导入)</li></ol><h4 id="5-2-2-修改-JDK-版本"><a href="#5-2-2-修改-JDK-版本" class="headerlink" title="5.2.2 修改 JDK 版本"></a>5.2.2 修改 JDK 版本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改JDK版本为1.8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-设置单元测试版本"><a href="#5-2-3-设置单元测试版本" class="headerlink" title="5.2.3 设置单元测试版本"></a>5.2.3 设置单元测试版本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit的版本修改为4.12 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-24-删除pluginManagement标签"><a href="#5-24-删除pluginManagement标签" class="headerlink" title="5.24 删除pluginManagement标签"></a>5.24 删除pluginManagement标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础补充-1</title>
      <link href="/2022/04/11/Java%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%85%85-1/"/>
      <url>/2022/04/11/Java%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%85%85-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-基础补充-1"><a href="#Java-基础补充-1" class="headerlink" title="Java 基础补充-1"></a>Java 基础补充-1</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>用<strong>final</strong>指示常量</p><p>类常量用<strong>static final</strong>, 类常量是希望某个常量在多个类中使用。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">3.1415</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">3.1415</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>&amp;&amp;（与） || (或)  !（非）</strong></p><p><strong>三元操作符  ?:   例如： x&lt;y?x:y   会返回x和y中较小的一个。</strong></p><hr><h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Path.of(<span class="string">&quot;file.txt&quot;</span>), StandardCharsets.UTF_8); <span class="comment">//读取文件</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;file.txt&quot;</span>, StandardCharsets.UTF_8); <span class="comment">//写入文件</span></span><br></pre></td></tr></table></figure><hr><h2 id="大数"><a href="#大数" class="headerlink" title="大数"></a>大数</h2><p><strong>使用静态 valueOf 可以将普通数值转为大数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong>BigInteger 和 BigDecimal</strong>分别来实现任意精度整数和浮点数运算。</p><p>**不能使用常用运算符 (如：+ - )  而是使用add 和 multiply **</p><hr><h2 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h2><p><strong>格式：for（variable ：collection） statement</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> element : a)</span><br><span class="line">System.out.println(a[i]);</span><br></pre></td></tr></table></figure><hr><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><p><strong>Arrays类的copy()方法</strong></p><p><strong>第二个参数是新数组长度，通常用来增加数组的大小</strong></p><p><strong>如果长度超过， 数值型元素默认赋0， 布尔型默认赋false</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="type">int</span>[] copyLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length);</span><br></pre></td></tr></table></figure><hr><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p><strong>Arrays类的sort()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 初始化数组，并赋值...</span></span><br><span class="line">Arrays.sort(a);</span><br></pre></td></tr></table></figure><hr><h2 id="Arrays类中常用函数"><a href="#Arrays类中常用函数" class="headerlink" title="Arrays类中常用函数"></a>Arrays类中常用函数</h2><ul><li><strong>static String toString(xxx[] a)</strong></li><li><strong>static xxx[] copyOf(xxx[] a, int end)</strong></li><li><strong>static xxx[] copyOfRange(xxx[] a, int start, int end)</strong></li><li><strong>static void sort(xxx[] a)</strong></li><li><strong>static int binarySearch(xxx[] a, xxx v)  &#x2F;&#x2F; 用二分查找算法在a中查找v，返回索引</strong></li><li><strong>static void fill(xxx[] a, xxx v)  &#x2F;&#x2F; 将所有值填充为v</strong></li><li><strong>static boolean equals(xxx[] a, xxx[] b)</strong></li></ul><hr><h2 id="不规则数组"><a href="#不规则数组" class="headerlink" title="不规则数组"></a>不规则数组</h2><p><strong>Java实际上没有多维数组，只有一堆数组。“数组中的数组。”</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python控制流和Lambda表达式</title>
      <link href="/2022/03/25/Python%E6%8E%A7%E5%88%B6%E6%B5%81%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/03/25/Python%E6%8E%A7%E5%88%B6%E6%B5%81%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Python控制流-amp-Lambda表达式"><a href="#Python控制流-amp-Lambda表达式" class="headerlink" title="Python控制流 &amp; Lambda表达式"></a>Python控制流 &amp; Lambda表达式</h1><h2 id="Python-控制流"><a href="#Python-控制流" class="headerlink" title="Python 控制流"></a>Python 控制流</h2><h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><p>比如我们有两个列表，我们想将他俩组成一个列表，我们可以使用内置函数 zip() ，zip() 会返回一个迭代器，我们可以使用for去遍历。也可以配合range打印索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;mattresses&#x27;</span>, <span class="string">&#x27;dog kennels&#x27;</span>, <span class="string">&#x27;machine&#x27;</span>, <span class="string">&#x27;cheeses&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weights = [<span class="number">15</span>, <span class="number">34</span>, <span class="number">42</span>, <span class="number">120</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(items,weights)))</span><br><span class="line">[(<span class="string">&#x27;bananas&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;mattresses&#x27;</span>, <span class="number">34</span>), (<span class="string">&#x27;dog kennels&#x27;</span>, <span class="number">42</span>), (<span class="string">&#x27;machine&#x27;</span>, <span class="number">120</span>), (<span class="string">&#x27;cheeses&#x27;</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cargo <span class="keyword">in</span> <span class="built_in">zip</span>(items, weights):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(cargo[<span class="number">0</span>], cargo[<span class="number">1</span>])</span><br><span class="line">...</span><br><span class="line">bananas <span class="number">15</span></span><br><span class="line">mattresses <span class="number">34</span></span><br><span class="line">dog kennels <span class="number">42</span></span><br><span class="line">machine <span class="number">120</span></span><br><span class="line">cheeses <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(items)),items):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, item)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> bananas</span><br><span class="line"><span class="number">1</span> mattresses</span><br><span class="line"><span class="number">2</span> dog kennels</span><br><span class="line"><span class="number">3</span> machine</span><br><span class="line"><span class="number">4</span> cheeses</span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><p>enumerate() 会返回这些元组，包含索引和列表值，并以迭代的方式呈现出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, item)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> bananas</span><br><span class="line"><span class="number">1</span> mattresses</span><br><span class="line"><span class="number">2</span> dog kennels</span><br><span class="line"><span class="number">3</span> machine</span><br><span class="line"><span class="number">4</span> cheeses</span><br></pre></td></tr></table></figure><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares</span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [x**<span class="number">2</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> x + <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares</span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">64</span>]</span><br></pre></td></tr></table></figure><p>列表推导式是将后面遍历出来的结果，进行处理后append到list后面。</p><p>也可以在迭代后增加 if 关键字，判断是否满足某个条件。</p><p>如果要添加else ，则需要将 if else 提前。</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x, y = a  <span class="comment"># 元组解包</span></span><br></pre></td></tr></table></figure><p>集合</p><p>集合会消除重复项，set()函数会将list转为集合，新增用add()， 删除用pop()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 1, 2, 2, 2, 3, 3, 4, 4]</span><br><span class="line">&gt;&gt;&gt; b = set(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b.add(5)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b.pop()</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;2, 3, 4, 5&#125;</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>和列表集合不同，字典存放的是键值对。</p><p>每个键需要是相同的类型，和集合一样我们可以通过in 来查看某个值是否在字典中。get()函数可以获取对应的值，如果没有返回None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; elements = &#123;&#x27;hydrogen&#x27; : 1, &#x27;helium&#x27; : 2, &#x27;carbon&#x27; : 6&#125;</span><br><span class="line">&gt;&gt;&gt; elements[&#x27;lithium&#x27;] = 3</span><br><span class="line">&gt;&gt;&gt; print(elements)</span><br><span class="line">&#123;&#x27;hydrogen&#x27;: 1, &#x27;helium&#x27;: 2, &#x27;carbon&#x27;: 6, &#x27;lithium&#x27;: 3&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&#x27;mithril&#x27; in elements)</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(elements.get(&#x27;dilithium&#x27;))</span><br><span class="line">None</span><br><span class="line">&gt;&gt;&gt; print(elements.get(&#x27;helium&#x27;))</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="复合数据结构"><a href="#复合数据结构" class="headerlink" title="复合数据结构"></a>复合数据结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>elements = &#123;<span class="string">&quot;hydrogen&quot;</span>: &#123;<span class="string">&quot;number&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="meta">... </span>                         <span class="string">&quot;weight&quot;</span>: <span class="number">1.00794</span>,</span><br><span class="line"><span class="meta">... </span>                         <span class="string">&quot;symbol&quot;</span>: <span class="string">&quot;H&quot;</span>&#125;,</span><br><span class="line"><span class="meta">... </span>              <span class="string">&quot;helium&quot;</span>: &#123;<span class="string">&quot;number&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="meta">... </span>                         <span class="string">&quot;weight&quot;</span>: <span class="number">4.002602</span>,</span><br><span class="line"><span class="meta">... </span>                         <span class="string">&quot;symbol&quot;</span>: <span class="string">&quot;He&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(elements[<span class="string">&quot;helium&quot;</span>])</span><br><span class="line">&#123;<span class="string">&#x27;number&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;weight&#x27;</span>: <span class="number">4.002602</span>, <span class="string">&#x27;symbol&#x27;</span>: <span class="string">&#x27;He&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(elements[<span class="string">&quot;helium&quot;</span>][<span class="string">&quot;weight&quot;</span>])</span><br><span class="line"><span class="number">4.002602</span></span><br></pre></td></tr></table></figure><h2 id="Python-Lambda-表达式"><a href="#Python-Lambda-表达式" class="headerlink" title="Python Lambda 表达式"></a>Python Lambda 表达式</h2><p>在python中可以使用Lambda 表达式创建匿名函数。很适合创建只用一次的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规定义方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">x</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>double(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lambda 表达式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>double = <span class="keyword">lambda</span> x : x**<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>double(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mul = <span class="keyword">lambda</span> x, y : x*y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mul(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>lamada 后面跟的是参数。</p><h3 id="迭代器-x2F-生成器"><a href="#迭代器-x2F-生成器" class="headerlink" title="迭代器&#x2F;生成器"></a>迭代器&#x2F;生成器</h3><p><strong>迭代器</strong>是每次可以返回一个对象元素的对象，例如返回一个列表。我们到目前为止使用的很多内置函数（例如 enumerate）都会返回一个迭代器。</p><p><strong>迭代器</strong>是一种表示数据流的对象。这与列表不同，列表是可迭代对象，但不是迭代器，因为它不是数据流。</p><p><strong>生成器</strong>是使用函数创建迭代器的简单方式。也可以使用<strong>类</strong>定义迭代器</p><p>下面是一个叫做 <code>my_range</code> 的生成器函数，它会生成一个从 0 到 (x - 1) 的数字流。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_range</span>(<span class="params">x</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; x:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意，该函数使用了 <code>yield</code> 而不是关键字 <code>return</code>。这样使函数能够一次返回一个值，并且每次被调用时都从停下的位置继续。关键字 yield 是将生成器与普通函数区分开来的依据。</p><p>下面是实现了 <code>enumerate</code> 函数一样的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lessons = [<span class="string">&quot;Why Python Programming&quot;</span>, <span class="string">&quot;Data Types and Operators&quot;</span>, <span class="string">&quot;Control Flow&quot;</span>, <span class="string">&quot;Functions&quot;</span>, <span class="string">&quot;Scripting&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">my_enumerate</span>(<span class="params">lists, start</span>):</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="built_in">len</span>(lists)):</span><br><span class="line"><span class="keyword">yield</span> (start,lists[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">start += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, lesson <span class="keyword">in</span> my_enumerate(lessons, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Lesson &#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, lesson))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">Lesson <span class="number">1</span>: Why Python Programming</span><br><span class="line">Lesson <span class="number">2</span>: Data Types <span class="keyword">and</span> Operators</span><br><span class="line">Lesson <span class="number">3</span>: Control Flow</span><br><span class="line">Lesson <span class="number">4</span>: Functions</span><br><span class="line">Lesson <span class="number">5</span>: Scripting</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/2022/03/17/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/03/17/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-网络编程"><a href="#Java-网络编程" class="headerlink" title="Java 网络编程"></a>Java 网络编程</h1><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/Java-Study-Notes/tree/main/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B">https://github.com/JiaZhengJingXianSheng/Java-Study-Notes/tree/main/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B</a></strong></p><h2 id="测试IP"><a href="#测试IP" class="headerlink" title="测试IP"></a>测试IP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试IP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 查询本机地址</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress3</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddress3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询百度地址</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress4</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress4);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 常用方法</span></span><br><span class="line">            System.out.println(inetAddress1.getCanonicalHostName()); <span class="comment">//规范的名字</span></span><br><span class="line">            System.out.println(inetAddress1.getHostAddress()); <span class="comment">// ip</span></span><br><span class="line">            System.out.println(inetAddress1.getHostName()); <span class="comment">// 域名，或者自己电脑的名字</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><ul><li><p>范围 0-65535</p></li><li><p>端口分类</p><ul><li><p>公有端口 0-1023</p><ul><li>HTTP: 80</li><li>HTTPS: 443</li><li>FTP: 21</li><li>SSH: 22</li><li>Telent: 23</li></ul></li><li><p>程序注册端口: 1024-49151, 分配给用户或者程序</p><ul><li>Tomcat: 8080</li><li>MySQL: 3306</li><li>Oracle: 1521</li></ul></li><li><p>动态、私有：49152-65535</p></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano #查看所有端口</span><br><span class="line">netstat -ano|findstr &quot;5900&quot; #查看指定端口</span><br><span class="line">tasklist|find &quot;8689&quot; #查看指定端口的进程</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetSocketAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">socketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8080</span>);</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">socketAddress2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">8080</span>);</span><br><span class="line">        System.out.println(socketAddress);</span><br><span class="line">        System.out.println(socketAddress2);</span><br><span class="line"></span><br><span class="line">        System.out.println(socketAddress.getAddress());</span><br><span class="line">        System.out.println(socketAddress.getHostName());    <span class="comment">// 地址</span></span><br><span class="line">        System.out.println(socketAddress.getPort());    <span class="comment">// 端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><h3 id="OSI-协议"><a href="#OSI-协议" class="headerlink" title="OSI 协议"></a>OSI 协议</h3><p><strong>七层</strong>划分为：<strong>应用层、表示层、会话层、传输层、网络层、数据链路层、物理层</strong>。</p><p><strong>五层</strong>划分为：<strong>应用层、传输层、网络层、数据链路层、物理层</strong>。</p><h3 id="TCP-x2F-IP协议簇"><a href="#TCP-x2F-IP协议簇" class="headerlink" title="TCP&#x2F;IP协议簇"></a>TCP&#x2F;IP协议簇</h3><p>重要：</p><ul><li>TCP：用户传输协议</li><li>UDP：用户数据报协议</li></ul><p>出名的协议：</p><ul><li><p>TCP：</p></li><li><p>IP：网络互联协议</p></li></ul><h3 id="TCP-UDP对比"><a href="#TCP-UDP对比" class="headerlink" title="TCP UDP对比"></a>TCP UDP对比</h3><p><strong>TCP面向连接 (三次握手)</strong></p><p><strong>UDP面向无连接</strong></p><hr><h2 id="TCP-实现"><a href="#TCP-实现" class="headerlink" title="TCP 实现"></a>TCP 实现</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpClientDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.要知道服务器的地址</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">serverIp</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">// 2.创建一个socket连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIp,port);</span><br><span class="line">            <span class="comment">// 3.发送消息 IO 流</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;hello,world&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpServerDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.得有一个地址</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 2.等待客户端连接</span></span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">// 3.读取客户端消息</span></span><br><span class="line">                is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 管道流</span></span><br><span class="line">                baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(baos.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP-实现文件上传"><a href="#TCP-实现文件上传" class="headerlink" title="TCP 实现文件上传"></a>TCP 实现文件上传</h2><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpClientDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.创建一个socket</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建一个输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;头像.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.写出文件</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知服务器，发送完毕</span></span><br><span class="line">        socket.shutdownOutput();    <span class="comment">// 已经发送完毕</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定服务器接受完毕，才能断开连接</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">// String byte[]</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span>((len2 = is.read(buffer2))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer2,<span class="number">0</span>,len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">        <span class="comment">// 5.关闭资源</span></span><br><span class="line">        baos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpServerDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.创建服务</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">// 2.监听客户端连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();<span class="comment">// 阻塞式监听，会一直等待客户端</span></span><br><span class="line">        <span class="comment">// 3.获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">// 4.文件输出</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;receive.jpg&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知客户端接受完毕</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;server接收完毕&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p><strong>服务端</strong></p><ul><li>自定义S</li><li>Tomcat服务器S</li></ul><p><strong>客户端</strong></p><ul><li>自定义C</li><li>浏览器B</li></ul><hr><h2 id="UDP-消息发送"><a href="#UDP-消息发送" class="headerlink" title="UDP 消息发送"></a>UDP 消息发送</h2><h3 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// udp 不需要连接服务器，</span></span><br><span class="line"><span class="comment">// 发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpClientDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.建立一个 socket</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.建个包</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;你好啊，服务器！&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送给谁</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localhost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9090</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), msg.getBytes().length, localhost, port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.发送包</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待接受</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpServerDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 开放端口</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);<span class="comment">// 接收</span></span><br><span class="line"></span><br><span class="line">        socket.receive(packet);     <span class="comment">// 阻塞接受</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData()));</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="UDP-实现聊天"><a href="#UDP-实现聊天" class="headerlink" title="UDP 实现聊天"></a>UDP 实现聊天</h2><h3 id="接收端-1"><a href="#接收端-1" class="headerlink" title="接收端"></a>接收端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpReceiveDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 准备接收包裹</span></span><br><span class="line">            <span class="type">byte</span>[] container = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(container,container.length);</span><br><span class="line"></span><br><span class="line">            socket.receive(packet);     <span class="comment">// 阻塞式接收</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 断开连接 bye</span></span><br><span class="line">            <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">            <span class="type">String</span> <span class="variable">receiveData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, data.length);</span><br><span class="line"></span><br><span class="line">            System.out.println(receiveData);</span><br><span class="line">            <span class="comment">// .trim() 是去空格、以及多余的符号</span></span><br><span class="line">            <span class="keyword">if</span>(receiveData.trim().equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送端-1"><a href="#发送端-1" class="headerlink" title="发送端"></a>发送端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpSenderDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备数据: 控制台读取</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data.getBytes(),data.getBytes().length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6666</span>));</span><br><span class="line"></span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span> (data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在线咨询"><a href="#在线咨询" class="headerlink" title="在线咨询"></a>在线咨询</h2><p><strong>双方都可收发</strong></p><h3 id="发送类"><a href="#发送类" class="headerlink" title="发送类"></a>发送类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkSend</span><span class="params">(<span class="type">int</span> fromPort, String toIP, <span class="type">int</span> toPort)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">        <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="built_in">this</span>.fromPort);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;socket 创建错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 准备数据: 控制台读取</span></span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                data = reader.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data.getBytes(),data.getBytes().length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="built_in">this</span>.toIP ,<span class="built_in">this</span>.toPort));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.send(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接受类"><a href="#接受类" class="headerlink" title="接受类"></a>接受类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkReceive</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String msgFrom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkReceive</span><span class="params">(<span class="type">int</span> port, String msgFrom)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msgFrom = msgFrom;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="built_in">this</span>.port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;socket 创建错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 准备接收包裹</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] container = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(container,container.length);</span><br><span class="line"></span><br><span class="line">                socket.receive(packet);     <span class="comment">// 阻塞式接收</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 断开连接 bye</span></span><br><span class="line">                <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">                <span class="type">String</span> <span class="variable">receiveData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, data.length);</span><br><span class="line"></span><br><span class="line">                System.out.println(msgFrom + <span class="string">&quot;: &quot;</span>+ receiveData);</span><br><span class="line">                <span class="comment">// .trim() 是去空格、以及多余的符号</span></span><br><span class="line">                <span class="keyword">if</span>(receiveData.trim().equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开启聊天线程</strong></p><h3 id="启动聊天"><a href="#启动聊天" class="headerlink" title="启动聊天"></a>启动聊天</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkTeacher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">5555</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">6666</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">8888</span>,<span class="string">&quot;学生&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkStudent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启两个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">7777</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">6666</span>,<span class="string">&quot;老师&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><strong>统一资源定位符：定位互联网上某一个资源。</strong></p><p><strong>DNS：域名解析</strong></p><blockquote><p>协议 : &#x2F;&#x2F; ip地址 : 端口 &#x2F;  项目名 &#x2F; 资源</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/helloworld/index.jsp?username=test&amp;password=123&quot;</span>);</span><br><span class="line">        System.out.println(url.getProtocol());      <span class="comment">// 协议</span></span><br><span class="line">        System.out.println(url.getHost());          <span class="comment">// 主机IP</span></span><br><span class="line">        System.out.println(url.getPort());          <span class="comment">// 端口</span></span><br><span class="line">        System.out.println(url.getPath());          <span class="comment">// 文件</span></span><br><span class="line">        System.out.println(url.getFile());          <span class="comment">// 全路径</span></span><br><span class="line">        System.out.println(url.getQuery());         <span class="comment">// 参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="URL-下载资源"><a href="#URL-下载资源" class="headerlink" title="URL 下载资源"></a>URL 下载资源</h3><p><strong>将URL的路径换成网络资源链接，就可以下载网络资源。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDownloads</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.下载地址</span></span><br><span class="line">        <span class="comment">// 需要提前在 tomcat 的 webapp 路径下配置下</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/lyz/SecurityFile.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.连接到这个资源</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;SecurityFile.txt&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);      <span class="comment">// 写出这个数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程笔记-2</title>
      <link href="/2022/03/11/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2022/03/11/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程-2"><a href="#Java多线程-2" class="headerlink" title="Java多线程-2"></a>Java多线程-2</h1><p><strong>部分代码：<a href="https://github.com/JiaZhengJingXianSheng/Java-Study-Notes/tree/main/java%E5%A4%9A%E7%BA%BF%E7%A8%8B">https://github.com/JiaZhengJingXianSheng/Java-Study-Notes/tree/main/java%E5%A4%9A%E7%BA%BF%E7%A8%8B</a></strong></p><hr><h2 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试线程停止</span></span><br><span class="line"><span class="comment">// 建议使用标志位</span></span><br><span class="line"><span class="comment">// 不建议使用 stop 或 destroy 等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 设置标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置公开方法，停止线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestStop</span> <span class="variable">testStop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestStop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用自定义stop 方法，切换标志位，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p><strong>Thread.sleep(int ms)</strong></p><hr><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><p><strong>Thread.yield()</strong></p><hr><h2 id="线程强制执行-join"><a href="#线程强制执行-join" class="headerlink" title="线程强制执行 join"></a>线程强制执行 join</h2><p><strong>thread.join()  其中thread是一个线程</strong></p><hr><h2 id="同步方法和同步块"><a href="#同步方法和同步块" class="headerlink" title="同步方法和同步块"></a>同步方法和同步块</h2><p><strong>由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是 synchronized 关键字，它包括两种用法： synchronized 方法和 synchronized 块</strong></p><p><strong>synchronized方法控制对 “对象” 的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</strong></p><p><strong>缺陷： 会影响效率</strong></p><hr><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 JUC 安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(</span><br><span class="line">                    ()-&gt;&#123;</span><br><span class="line">                        list.add(Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">            ).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><strong>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程</strong></p><hr><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p><strong>显式锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line">try&#123;</span><br><span class="line">lock.lock(); // 加锁</span><br><span class="line">// 处理</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">lock.unlock(); // 解锁</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 Lock 锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestLock2</span> <span class="variable">testLock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestLock2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLock2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">tickNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 lock 锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (tickNums&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(tickNums--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  未加锁</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void run() &#123;</span></span><br><span class="line"><span class="comment">//        while(true)&#123;</span></span><br><span class="line"><span class="comment">//            if (tickNums&gt;0)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                System.out.println(tickNums--);</span></span><br><span class="line"><span class="comment">//            &#125;else&#123;</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h2><p><strong>生产者消费者问题，也称有限缓冲问题。生产者和消费者共享一个资源</strong></p><p><strong>对于生产者，没有生产产品之前，要通知消费者等待，而生产了产品之后，又要马上通知消费者消费。</strong></p><p><strong>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品以供消费。</strong></p><p><strong>在生产者消费者问题中，仅有synchronized 是不够的</strong></p><p><strong>synchronized 可阻止并发更新同一个共享资源，实现了同步</strong></p><p><strong>synchronized 不能用来实现不同线程之间的消息传递（通信）</strong></p><p><strong>Java 提供了几个方法解决线程之间的通信问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait(); <span class="comment">// 表示线程一直等待，与sleep不同，会释放锁。</span></span><br><span class="line">notify(); <span class="comment">// 唤醒一个处于等待状态的线程</span></span><br><span class="line">notifyAll(); <span class="comment">// 唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度。</span></span><br></pre></td></tr></table></figure><h3 id="解决方法一-（管程法）"><a href="#解决方法一-（管程法）" class="headerlink" title="解决方法一 （管程法）"></a>解决方法一 （管程法）</h3><ul><li><p><strong>生产者：负责生产数据的模块</strong></p></li><li><p><strong>消费者：负责处理数据的模块</strong></p></li><li><p><strong>缓冲区：消费者不能直接使用生产者的数据，他们之间有个 “ 缓冲区 ”</strong></p></li></ul><p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试生产者-消费者模型 --&gt; 利用缓冲区解决：管程法</span></span><br><span class="line"><span class="comment">// 生产者、消费者、产品、缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SynContainer container= <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 生产 100 个产品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            container.push(<span class="keyword">new</span> <span class="title class_">Product</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了--&gt;&quot;</span> + container.pop().id + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="type">int</span> id; <span class="comment">// 产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">    <span class="comment">// 需要一个容器大小</span></span><br><span class="line">    Product[] products = <span class="keyword">new</span> <span class="title class_">Product</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者放入产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果容器满了，等待消费者消费</span></span><br><span class="line">        <span class="comment">// if语句中醒来的线程 不会再一次进行判断了 而while会重新再判断</span></span><br><span class="line">        <span class="keyword">while</span> (count == products.length) &#123;</span><br><span class="line">            <span class="comment">// 通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有满，生产产品</span></span><br><span class="line">        products[count] = product;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Product <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断能否消费</span></span><br><span class="line">        <span class="comment">// if语句中醒来的线程 不会再一次进行判断了 而while会重新再判断</span></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待生产者生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果可以消费</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            count--;</span><br><span class="line">            product = products[count];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 吃完了，通知生产者生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方法二-（信号灯法）"><a href="#解决方法二-（信号灯法）" class="headerlink" title="解决方法二 （信号灯法）"></a>解决方法二 （信号灯法）</h3><p><strong>设置标志位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试生产者-消费者问题2： 信号灯法，设置标志位</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Player</span>(tv).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者 --&gt; 演员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;快乐大本营&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;抖音：记录美好生活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者 --&gt; 观众</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品 --&gt; 节目</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span> &#123;</span><br><span class="line">    <span class="comment">// 演员表演，观众等待</span></span><br><span class="line">    <span class="comment">// 观众观看，演员等待</span></span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表演</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String voice)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了&quot;</span> + voice);</span><br><span class="line">        <span class="comment">// 通知观众观看</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll(); <span class="comment">// 唤醒</span></span><br><span class="line">        <span class="built_in">this</span>.voice = voice;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了&quot;</span> + voice);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知演员表演</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><strong>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。线程池可以实现复用。</strong></p><p>**JDK 5.0 起提供了线程池相关的API ：ExecutorService 和 Executors **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: LYZ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建线程池</span></span><br><span class="line">        <span class="comment">//    newFixedThreadPool 参数为线程池大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯法则</title>
      <link href="/2022/03/02/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%95%E5%88%99/"/>
      <url>/2022/03/02/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%95%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="贝叶斯法则和机器人学"><a href="#贝叶斯法则和机器人学" class="headerlink" title="贝叶斯法则和机器人学"></a>贝叶斯法则和机器人学</h1><hr><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>在给定的初始预测下，我们就可以改进预测。</strong></p><p><strong>假设我们的初始预测（先验信息）是对汽车在道路上位置的估计，我们获得的是不太准确的卫星定位，我们可以根据汽车周边的数据和汽车移动方式的数据来改进我们的预测。</strong></p><hr><h3 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3><p>无人驾驶汽车主要使用以下三种传感器观察世界：</p><ul><li><strong>摄像头</strong> ：可以拍摄视频，</li><li><strong>光学雷达</strong> ：是基于光学的传感器，</li><li><strong>雷达</strong> ：使用无线电波。</li></ul><p>无人驾驶汽车也有许多 <strong>内部传感器</strong> ，可以测量汽车行驶的速度和方向、车轮方向，甚至是车内温度！</p><hr><h3 id="举个栗子（😄）"><a href="#举个栗子（😄）" class="headerlink" title="举个栗子（😄）"></a>举个栗子（😄）</h3><p>假设我们的传感器探测到地形和汽车行驶的具体信息，如下：</p><ul><li><p>这辆汽车可能在方圆半径 5 米的任何地方，</p></li><li><p>汽车正在爬坡行驶，</p></li><li><p>汽车左侧有棵树，</p></li><li><p>汽车车轮指向右边。</p></li><li><p>这条路是单行道</p></li></ul><p><img src="https://cdn.statically.io/gh/JiaZhengJingXianSheng/PicGo-Images@main/imgs/202203/20220302_1.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>那么显而易见车在A位置的概率最大。</strong></p><hr><h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>如果让我们估计一年之后的天气情况，这可以近似看作一个独立事件。相反估计一分钟后的天气，你得出的结果会因为现在的天气状况做出判断。</p><p><strong>这种利用收集起来的数据得出概率估计就是条件概率。利用我们已知的信息，对未知信息做出更好的估计。</strong></p><hr><h3 id="碰撞的概率-练习区"><a href="#碰撞的概率-练习区" class="headerlink" title="碰撞的概率 [练习区]"></a>碰撞的概率 [练习区]</h3><table><thead><tr><th>车辆1\车辆2</th><th align="center">左转</th><th align="right">直行</th><th>右转</th></tr></thead><tbody><tr><td>左转</td><td align="center">0.5</td><td align="right">0.25</td><td>0.1</td></tr><tr><td>直行</td><td align="center">0.25</td><td align="right">0.02</td><td>0.1</td></tr><tr><td>右转</td><td align="center">0.1</td><td align="right">0.1</td><td>0.01</td></tr></tbody></table><p>上面显示的真值表列出了两辆车同时尝试移动，则两辆车在十字路口发生碰撞的概率。例如，如果车辆 1 直行，车辆 2 左转，则碰撞概率为 0.25。</p><hr><h3 id="举个栗子（😄）-1"><a href="#举个栗子（😄）-1" class="headerlink" title="举个栗子（😄）"></a>举个栗子（😄）</h3><p>你希望得出一辆汽车看见 <em>黄色</em> 的交通信号灯就停下来的概率是多少。</p><ul><li><p>经验数据告诉你，一辆汽车在交通灯交叉路口停车的概率是 $P(S) &#x3D; 0.40$ 。</p></li><li><p>同时你了解到，基于经验数据，交通灯是黄色（而不是红色或绿色）的概率是 $P(Y) &#x3D; 0.10$ 。</p></li></ul><p><img src="https://cdn.statically.io/gh/JiaZhengJingXianSheng/PicGo-Images@main/imgs/202203/20220302_2.png"></p><p><strong>已知 P(Y|S) &#x3D; 0.12 ,如果交通信号灯为黄色，那么汽车停下的可能性为</strong><br>$$<br>P(S|Y) &#x3D;  \frac {P(S,Y)}{P(Y)} &#x3D; \frac {P(Y|S)P(S)} {P(Y)} &#x3D; \frac {0.12*0.04} {0.10} &#x3D; 0.48<br>$$</p><hr><h3 id="栗子2（😄）"><a href="#栗子2（😄）" class="headerlink" title="栗子2（😄）"></a>栗子2（😄）</h3><p>在一条四车道的高速公路上，汽车行驶速度要么快，要么不快。 快的汽车应该在最左边的车道。</p><ul><li>在任何时候，都有 20% 的车辆在最左边的车道。</li><li>总体上，高速公路上有 40% 的车辆被归类为快速行驶。</li><li>在最左边车道的所有车辆中，90% 的车辆正在快速行驶。</li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p><strong>如果汽车行驶速度很快，那么它位于最左边车道的概率为：</strong></p><p><strong>设最左边车道为事件A，快速行驶为事件B,  P(A) &#x3D; 0.2,  P(B) &#x3D; 0.4,  P(B|A) &#x3D; 0.9</strong><br>$$<br>P(A|B) &#x3D; \frac {P(A,B)} {P(B)} &#x3D; \frac {P(A)P(B|A)} {P(B)} &#x3D; \frac {0.2*0.9} {0.4} &#x3D; 0.45<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
          <category> 贝叶斯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2022/02/28/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/28/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-超文本标记语言"><a href="#HTML-超文本标记语言" class="headerlink" title="HTML 超文本标记语言"></a>HTML 超文本标记语言</h1><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/HTML-Study-Notes">JiaZhengJingXianSheng&#x2F;HTML-Study-Notes (github.com)</a></strong> </p><h2 id="网页基本信息"><a href="#网页基本信息" class="headerlink" title="网页基本信息"></a>网页基本信息</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><!-- --></blockquote><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><blockquote><p>告诉浏览器使用什么规范</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- head 标签表示网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- meta 一般用来做SEO --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- title 标签代表网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body 标签代表网页主体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标题标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，两只老虎，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快，跑得快，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有眼睛，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有尾巴，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>真奇怪！真奇怪！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 水平线标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 换行标签 --&gt;</span></span><br><span class="line">两只老虎，两只老虎，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">跑得快，跑得快，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">一只没有眼睛，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">一只没有尾巴，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">真奇怪！真奇怪！<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 粗体， 斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">粗体 ： <span class="tag">&lt;<span class="name">strong</span>&gt;</span>I Love U <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体 ： <span class="tag">&lt;<span class="name">em</span>&gt;</span>I Love U <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 特殊符号 --&gt;</span>.</span><br><span class="line"><span class="comment">&lt;!-- 用转义字符 --&gt;</span></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br></pre></td></tr></table></figure><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;text&quot;</span> <span class="attr">title</span>=<span class="string">&quot;text&quot;</span> <span class="attr">width</span>=<span class="string">&quot;x&quot;</span> <span class="attr">height</span>=<span class="string">&quot;y&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- src 路径， alt 图像的代替文字， title 鼠标悬停提示文字， width 图像宽度， height 图像高度 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;path&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口位置&quot;</span>&gt;</span>链接文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- href 链接路径， target 链接在哪个窗口打开 常用值： _self _blank --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    a 标签</span></span><br><span class="line"><span class="comment">    href: 必填，表示要跳转到哪个页面</span></span><br><span class="line"><span class="comment">    target: 表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击我跳转到页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击我跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用name 作为标记 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 锚链接</span></span><br><span class="line"><span class="comment">    1. 需要一个标记</span></span><br><span class="line"><span class="comment">    2. 跳转到标记</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;头像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="功能性链接"><a href="#功能性链接" class="headerlink" title="功能性链接"></a>功能性链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 功能性链接</span></span><br><span class="line"><span class="comment">    邮件链接： mailto</span></span><br><span class="line"><span class="comment">    QQ链接：  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:the_unique_guy@outlook.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- order list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表</span></span><br><span class="line"><span class="comment">    dl: 标签</span></span><br><span class="line"><span class="comment">    dt: 列表名称</span></span><br><span class="line"><span class="comment">    dd: 列表内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格 table</span></span><br><span class="line"><span class="comment">    行 tr</span></span><br><span class="line"><span class="comment">    列 td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- colspan 跨列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rowspan 跨行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rowspan 跨行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 音频和视频</span></span><br><span class="line"><span class="comment">    src: 资源路径</span></span><br><span class="line"><span class="comment">    controls: 控制条</span></span><br><span class="line"><span class="comment">    autoplay: 自动播放</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    注： chrome默认禁用自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/神奇女侠.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resources/audio/孙燕姿-我怀念的.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h2><blockquote><p>header:     标题头部区域的内容（用于页面或页面中的一块区域）</p><p>footer:       标记脚部区域的内容（用于页面或页面中的一块区域）</p><p>section:     Web页面中的一块独立区域</p><p>article:       独立的文章内容</p><p>aside:         相关内容或应用</p><p>nav:            导航类辅助内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;iframe src=&quot;path&quot; name=&quot;mainFrame&quot;&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="comment">src: 引用地址页面</span></span><br><span class="line"><span class="comment">name: 框架标识名</span></span><br><span class="line"><span class="comment">width: 宽度</span></span><br><span class="line"><span class="comment">height: 高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转链接也可以定位到iframe打开 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.quarkhacker.top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单语法"><a href="#表单语法" class="headerlink" title="表单语法"></a>表单语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单参数</span></span><br><span class="line"><span class="comment">    hidden: 隐藏域</span></span><br><span class="line"><span class="comment">    readonly: 只读</span></span><br><span class="line"><span class="comment">    disabled: 禁用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单form</span></span><br><span class="line"><span class="comment">    action: 表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">    method: post、 get 提交方式</span></span><br><span class="line"><span class="comment">    get 方式提交我们可以在url中看到我们提交的信息，不安全，但高效</span></span><br><span class="line"><span class="comment">    post 方式提交比较安全，可以传输大文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本输入框： input type=&quot;text&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 密码框： input type=&quot;password&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本框和单选框"><a href="#文本框和单选框" class="headerlink" title="文本框和单选框"></a>文本框和单选框</h3><h4 id="表单元素格式"><a href="#表单元素格式" class="headerlink" title="表单元素格式"></a>表单元素格式</h4><blockquote><p>type:  指定元素的类型，text, password, checkbox, radio, submit, reset, file, hidden, image 和 button, 默认为text</p><p>name:  指定表单元素的名称</p><p>value:  元素的初始值，type 为 radio 时必须指定一个值</p><p>size:  指定表单元素的初始宽度 （一般用 CSS 修改）</p><p>maxlength:  type 为 text 或 password 时，输入的最大字符数</p><p>checked:  type 为  radio 或 checkbox 时，指定按钮是否是被选中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本输入框： input type=&quot;text&quot;</span></span><br><span class="line"><span class="comment">     value=&quot;帅&quot;      默认初始值</span></span><br><span class="line"><span class="comment">     maxlength=&quot;8&quot;   最长能写几个字符</span></span><br><span class="line"><span class="comment">     size=&quot;30&quot;       文本框长度</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h4><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本输入框： input type=&quot;text&quot;</span></span><br><span class="line"><span class="comment">  value=&quot;帅&quot;      默认初始值</span></span><br><span class="line"><span class="comment">  maxlength=&quot;8&quot;   最长能写几个字符</span></span><br><span class="line"><span class="comment">  size=&quot;30&quot;       文本框长度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 密码框： input type=&quot;password&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单选框标签</span></span><br><span class="line"><span class="comment">input type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment"> value: 单选框的值</span></span><br><span class="line"><span class="comment">name: 表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多选框</span></span><br><span class="line"><span class="comment"> input type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 按钮</span></span><br><span class="line"><span class="comment">普通按钮： input type=&quot;button&quot;</span></span><br><span class="line"><span class="comment">图片按钮： input type=&quot;image&quot; src=&quot;&quot;</span></span><br><span class="line"><span class="comment">提交按钮： input type=&quot;submit&quot;</span></span><br><span class="line"><span class="comment">重置按钮： input type=&quot;reset&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="列表框和文本域"><a href="#列表框和文本域" class="headerlink" title="列表框和文本域"></a>列表框和文本域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下拉框，列表框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>下拉框</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;USA&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Switzerland&quot;</span> <span class="attr">selected</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;India&quot;</span>&gt;</span>印度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文本域</span></span><br><span class="line"><span class="comment">    textarea name=&quot;textarea&quot; cols=&quot;10&quot; rows=&quot;3&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        文本内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件域</span></span><br><span class="line"><span class="comment">    input type=&quot;file&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="搜索框滑块和简单验证"><a href="#搜索框滑块和简单验证" class="headerlink" title="搜索框滑块和简单验证"></a>搜索框滑块和简单验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 邮件验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- url验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>URL:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数字验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数字:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 滑块</span></span><br><span class="line"><span class="comment">    input type=&quot;range&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;volume&quot;</span> <span class="attr">min</span>=<span class="string">&quot;10&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增强鼠标可用性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mark&quot;</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">mark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单参数</span></span><br><span class="line"><span class="comment">    hidden: 隐藏域</span></span><br><span class="line"><span class="comment">    readonly: 只读</span></span><br><span class="line"><span class="comment">    disabled: 禁用</span></span><br><span class="line"><span class="comment">    placeholder: 提示信息，用在文本框</span></span><br><span class="line"><span class="comment">    required: 非空判断，用在文本框</span></span><br><span class="line"><span class="comment">    pattern: 正则表达式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境</title>
      <link href="/2022/01/13/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/01/13/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-虚拟环境"><a href="#Python-虚拟环境" class="headerlink" title="Python 虚拟环境"></a>Python 虚拟环境</h1><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv -h</span><br></pre></td></tr></table></figure><p>其中 –system-site-packages 是引用系统级别的库</p><hr><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv venvdemo</span><br></pre></td></tr></table></figure><p>创建好后会在用户目录下创建一个 venvdemo 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\lyz\venvdemo&gt;dir</span><br><span class="line"> 驱动器 C 中的卷是 系统</span><br><span class="line"> 卷的序列号是 5291-6C8F</span><br><span class="line"></span><br><span class="line"> C:\Users\lyz\venvdemo 的目录</span><br><span class="line"></span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          .</span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          ..</span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          Include</span><br><span class="line">2022/01/11  11:31    &lt;DIR&gt;          Lib</span><br><span class="line">2022/01/11  11:31                76 pyvenv.cfg</span><br><span class="line">2022/01/11  11:39    &lt;DIR&gt;          Scripts</span><br><span class="line">               1 个文件             76 字节</span><br><span class="line">               5 个目录 79,062,708,224 可用字节</span><br></pre></td></tr></table></figure><hr><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>进入到Scripts文件夹下，执行activate</p><hr><h2 id="激活原理"><a href="#激活原理" class="headerlink" title="激活原理"></a>激活原理</h2><p>在 Scripts 目录下会有 activate 激活文件 , deactivate 去激活文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\lyz\venvdemo\Scripts&gt;dir</span><br><span class="line"> 驱动器 C 中的卷是 系统</span><br><span class="line"> 卷的序列号是 5291-6C8F</span><br><span class="line"></span><br><span class="line"> C:\Users\lyz\venvdemo\Scripts 的目录</span><br><span class="line"></span><br><span class="line">2022/01/11  11:39    &lt;DIR&gt;          .</span><br><span class="line">2022/01/11  11:39    &lt;DIR&gt;          ..</span><br><span class="line">2022/01/11  11:31             2,268 activate</span><br><span class="line">2022/01/11  11:31               962 activate.bat</span><br><span class="line">2022/01/11  11:31            19,332 Activate.ps1</span><br><span class="line">2022/01/11  11:31               368 deactivate.bat</span><br><span class="line">2022/01/11  11:39           106,351 pip.exe</span><br><span class="line">2022/01/11  11:39           106,351 pip3.8.exe</span><br><span class="line">2022/01/11  11:39           106,351 pip3.exe</span><br><span class="line">2022/01/11  11:31           537,776 python.exe</span><br><span class="line">2022/01/11  11:31           536,752 pythonw.exe</span><br><span class="line">2022/01/11  11:31           710,144 pythonw_d.exe</span><br><span class="line">2022/01/11  11:31           711,168 python_d.exe</span><br><span class="line">              11 个文件      2,837,823 字节</span><br><span class="line">               2 个目录 79,060,901,888 可用字节</span><br></pre></td></tr></table></figure><blockquote><p>其中 activate 是linux下的可执行程序，</p><p>activate.bat 是windows 下的可执行程序，</p><p>activate.ps1 是powershell下的可执行程序</p></blockquote><p>在对应虚拟文件夹下，可以在Scripts 文件夹下直接启动虚拟环境，具体实现方式是将虚拟环境加入到PATH</p><p>全局 PATH：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;&#x27;, &#x27;C:\\Python38\\python38.zip&#x27;, &#x27;C:\\Python38\\DLLs&#x27;, &#x27;C:\\Python38\\lib&#x27;, &#x27;C:\\Python38&#x27;, &#x27;C:\\Python38\\lib\\site-packages&#x27;]</span><br></pre></td></tr></table></figure><p>在虚拟环境 Scripts 下打开python 显示PATH :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;&#x27;, &#x27;C:\\Python38\\python38.zip&#x27;, &#x27;C:\\Python38\\DLLs&#x27;, &#x27;C:\\Python38\\lib&#x27;, &#x27;C:\\Python38&#x27;, &#x27;C:\\Users\\lyz\\venvdemo&#x27;, &#x27;C:\\Users\\lyz\\venvdemo\\lib\\site-packages&#x27;]</span><br></pre></td></tr></table></figure><p>激活实际上是把虚拟环境加入到环境变量第一条，因为系统调用是找第一个可以找见的python.exe</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venvdemo) C:\Users\lyz\venvdemo\Scripts&gt;echo %PATH%</span><br><span class="line">C:\Users\lyz\venvdemo\Scripts;C:\Python38\Scripts\;C:\Python38\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files (x86)\NetSarang\Xshell 7\;C:\Program Files (x86)\NetSarang\Xftp 7\;C:\Program Files\Microsoft VS Code\bin;C:\Users\lyz\AppData\Local\Microsoft\WindowsApps;C:\JetBrains\IntelliJ IDEA 2021.1\bin</span><br></pre></td></tr></table></figure><hr><h2 id="在IDE中配置"><a href="#在IDE中配置" class="headerlink" title="在IDE中配置"></a>在IDE中配置</h2><p>只需要在IDE中选择Scripts&#x2F;python.exe 即可</p><hr><h2 id="保存和复制虚拟环境"><a href="#保存和复制虚拟环境" class="headerlink" title="保存和复制虚拟环境"></a>保存和复制虚拟环境</h2><p>可以利用 pip 的 freeze 参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>这样就可以导出到 requirements.txt文件中</p><p>还原时只需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EPnP</title>
      <link href="/2021/12/30/EPnP/"/>
      <url>/2021/12/30/EPnP/</url>
      
        <content type="html"><![CDATA[<h1 id="EPnP"><a href="#EPnP" class="headerlink" title="EPnP"></a>EPnP</h1><p>参考链接：<a href="https://blog.csdn.net/jessecw79/article/details/82945918">深入EPnP算法</a></p><p>针对以上链接，提取个人可以看懂的部分</p><h2 id="PnP问题的定义"><a href="#PnP问题的定义" class="headerlink" title="PnP问题的定义"></a>PnP问题的定义</h2><p>Perspective-n-Point问题(PnP)的已知条件：</p><blockquote><ol><li><p>n个世界坐标系中的3D参考点(3D reference points)坐标;</p></li><li><p>与这n个3D点对应的、投影在图像上的2D参考点(2D reference points)坐标;</p></li><li><p>摄像头的内参K;<br>求解PnP问题可以得到摄像头的位姿。</p></li></ol></blockquote><p>大多数非迭代的PnP算法会首先求解特征点的深度，以获得特征点在相机坐标系中的3D坐标，而EPnP算法将世界坐标系中的3D坐标表示为一组虚拟的控制点的加权和。对于一般情形，EPnP算法要求控制点的数目为4，且这4个控制点不能共面。因为摄像头的外参未知，这四个控制点在摄像头参考坐标系下的坐标是未知的。而如果能求解出这四个控制点在摄像头参考坐标系下的坐标，我们就可以计算出摄像头的位姿。</p><h2 id="Control-Points-amp-Barycentric-Coordinates"><a href="#Control-Points-amp-Barycentric-Coordinates" class="headerlink" title="Control Points &amp; Barycentric Coordinates"></a>Control Points &amp; Barycentric Coordinates</h2><h2 id="控制点和重心坐标"><a href="#控制点和重心坐标" class="headerlink" title="控制点和重心坐标"></a>控制点和重心坐标</h2><p>4个控制点在世界坐标系中的坐标为  $c_j^w  ,   j &#x3D; 1 , … , 4$ </p><p>在摄像头参考坐标系中的坐标为 $c_j^c ,   j &#x3D; 1 ,…, 4 $</p><p>需要指出，在EPnP论文和本文中，$ p_i^w , c_j^w , p_i^c 和c_j^c $ 均非齐次坐标。</p><p><strong>EPnP算法将参考点的坐标表示为控制点坐标的加权和：</strong><br>$$<br>p_i^w&#x3D; \sum_{j&#x3D;1}^4 α_{ij}c_{jw},\qquad  with \sum_{j&#x3D;1}^4 α_{ij}&#x3D;1<br>$$<br>其中 $α_i^j$ 是齐次barycentric坐标。</p><p>进一步，<br>$$<br>p_i^c &#x3D; \sum_{j&#x3D;1}^4 α_{ij}c_{jc}<br>$$<br>在上述推导过程中，用到了EPnP对权重 $α_i^j$ 的重要约束条件 $\sum_{j&#x3D;1}^4 α_{ij}&#x3D;1$ 。如果没有这个约束条件，上述推导将不成立。</p><p><strong>本质上就是：3D参考点的齐次坐标是控制点齐次坐标的线性组合。</strong></p><p>从上述分析过程中，我们也可以得到barycentric coodinates的计算方法：<br>$$<br>\begin{bmatrix}<br>α_{i1}  \ α_{i2} \  α_{i3} \  α_{i4}<br>\end{bmatrix}<br>&#x3D;C^{-1}<br>\begin{bmatrix}<br>P_i^w  \ 1<br>\end{bmatrix}<br>$$</p><h2 id="control-points的选择"><a href="#control-points的选择" class="headerlink" title="control points的选择"></a>control points的选择</h2><p>原则上，只要控制点满足 C 可逆就可以，但是论文中给出了一个具体的控制点确定方法。</p><p>3D参考点集为 $ {p_i^w , i &#x3D; 1 , ⋯ ,n }$ , 选择3D参考点的重心为第一个控制点：<br>$$<br>c_1^w &#x3D; \frac 1n \sum_{i&#x3D;1} ^ n p_i^w<br>$$<br>进而得到矩阵：<br>$$<br>A &#x3D;<br>\begin{bmatrix}<br>p_1^{w^T} - c_1 ^{w^T} \<br>…\<br>p_n^{w^T} - c_1 ^{w^T}<br>\end{bmatrix}<br>$$<br>记 $A^T A$  的特征值为 $λ_{c,i} ,  i &#x3D; 1 , 2 , 3$ , 对应的特征向量为 $v_{c , i} , i &#x3D; 1 , 2 , 3 $ , 那么剩余的三个控制点可以按照下面的公式来确定：</p><p>$$<br>c_j^w &#x3D; c_1^w + λ_{c,j-1}^{\frac12} v_{c,j-1} ,\qquad j&#x3D;2,3,4<br>$$</p><h2 id="求解控制点在摄像机坐标下的坐标"><a href="#求解控制点在摄像机坐标下的坐标" class="headerlink" title="求解控制点在摄像机坐标下的坐标"></a>求解控制点在摄像机坐标下的坐标</h2><p>设K是摄像头的内参矩阵，可以通过标定获得。</p><p>$ { u_i }<em>i&#x3D;1,⋯,n  是参考点   {p_i}</em>{i&#x3D;1,2…,n}$  是的2D投影，那么<br>$$<br>∀i,  w_i<br>\begin{bmatrix}<br>u_i \ 1<br>\end{bmatrix}<br>&#x3D;Kp <em>i ^c &#x3D;K  \sum</em>{j&#x3D;1}^4 α _{ij} c _j^c<br>$$<br>把所有n个点串联起来，我们可以得到一个线性方程组：<br>$$<br>Mx&#x3D;0<br>$$<br>其中 $x &#x3D; [c_1^{c^T},c_2^{c^T}, c_3^{c^T},c_4^{c^T}]^T$  , x就是控制点在摄像头坐标系下的坐标，显然这是一个12 × 1 的向量，且 x 在M 的右零空间中。</p><h2 id="——————————–未完待续————————————"><a href="#——————————–未完待续————————————" class="headerlink" title="——————————–未完待续————————————"></a>——————————–未完待续————————————</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程笔记-1</title>
      <link href="/2021/12/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2021/12/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程-1"><a href="#Java多线程-1" class="headerlink" title="Java多线程-1"></a>Java多线程-1</h1><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><blockquote><p>继承Thread类</p><p>实现Runnable接口</p><p>实现Callable接口 （了解）</p></blockquote><h3 id="一、继承Thread类"><a href="#一、继承Thread类" class="headerlink" title="一、继承Thread类"></a>一、继承Thread类</h3><blockquote><ol><li>自定义线程类继承Thread类</li><li>重写run() 方法， 编写线程执行体</li><li>创建线程对象， 调用start() 方法启动线程</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程方式一： 继承Thread类, 重写run() 方法， 调用start开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run 方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// main 线程 主线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个线程对象</span></span><br><span class="line">        <span class="type">TestThread1</span> <span class="variable">testThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread1</span>();</span><br><span class="line">        <span class="comment">// 调用start方法开启线程</span></span><br><span class="line">        testThread1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现简单下载器"><a href="#实现简单下载器" class="headerlink" title="实现简单下载器"></a>实现简单下载器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习Thread ， 实现多线程同步下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 保存文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestThread2</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为： &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog2.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread2</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span> &#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、实现Runnable接口"><a href="#二、实现Runnable接口" class="headerlink" title="二、实现Runnable接口"></a>二、实现Runnable接口</h3><blockquote><ol><li>定义MyRunnable类实现Runnable接口</li><li>实现run() 方法， 编写线程执行体</li><li>创建线程对象， 调用start() 方法启动线程</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/ 创建线程方式<span class="number">2</span>： 实现runnable接口， 重写run方法， 执行线程须丢入runnable接口实现类。调用start方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run 方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建runnable接口的实现类对象</span></span><br><span class="line">        <span class="type">TestThread3</span> <span class="variable">testThread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象， 通过线程对象来开启我们的线程 -- 代理</span></span><br><span class="line"><span class="comment">//        Thread thread = new Thread(testThread3);</span></span><br><span class="line"><span class="comment">//        thread.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简写</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread3).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、实现Callable接口"><a href="#三、实现Callable接口" class="headerlink" title="三、实现Callable接口"></a>三、实现Callable接口</h3><blockquote><pre><code>    1. 实现callable接口， 需要返回值类型    1. 重写call方法， 需要抛出异常    1. 创建目标对象    4. 创建执行服务  ExecutorService ser = Executors.newFixedThreadPool(3);    1. 提交执行 Future&lt;Boolean&gt; r1 = ser.submit(t1);    1. 获取结果  Boolean rs1 = r1.get();    1. 关闭服务  ser.shutdownNow();</code></pre></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Callable好处： 可以定义返回值， 可以抛出异常   </span></span><br><span class="line"><span class="comment">// 线程创建方式三： 实现callable接口 &lt;Boolean&gt;是返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 保存文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestCallable</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为： &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog2.jpg&quot;</span>);</span><br><span class="line">        <span class="type">TestCallable</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCallable</span>(<span class="string">&quot;https://z3.ax1x.com/2021/10/15/58F85q.jpg&quot;</span>, <span class="string">&quot;image/dog3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建执行服务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ser</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">rs1</span> <span class="operator">=</span> r1.get();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">rs2</span> <span class="operator">=</span> r2.get();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">rs3</span> <span class="operator">=</span> r3.get();</span><br><span class="line">        </span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        System.out.println(rs2);</span><br><span class="line">        System.out.println(rs3);</span><br><span class="line">        <span class="comment">// 关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span> &#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>不建议使用 继承Thread类 ： 避免OOP单继承局限性</strong></p><p><strong>推荐使用 实现Runnable接口 ： 方便灵活，方便同一个对象被多个线程使用</strong></p><p><strong>Callable好处： 可以定义返回值， 可以抛出异常</strong></p><h2 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个线程同时操作同一个对象</span></span><br><span class="line"><span class="comment">// 买火车票的例子</span></span><br><span class="line"><span class="comment">// 发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread4</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread4</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread4</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket, <span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket, <span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket, <span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="龟兔赛跑例子"><a href="#龟兔赛跑例子" class="headerlink" title="龟兔赛跑例子"></a>龟兔赛跑例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i%<span class="number">10</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断比赛是否结束</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameOver(i);</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;跑了&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否完成比赛</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>) &#123;<span class="comment">//已经存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(steps &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;winner is &quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代理模式总结</span></span><br><span class="line"><span class="comment">// 真实对象和代理对象都要实现同一个接口</span></span><br><span class="line"><span class="comment">// 代理对象要代理真实角色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 好处：</span></span><br><span class="line"><span class="comment">//      代理对象可以做很多真实对象做不了的事</span></span><br><span class="line"><span class="comment">//      真实对象专注做自己的事</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; System.out.println(<span class="string">&quot;I LOVE YOU&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>(); <span class="comment">// 你要结婚</span></span><br><span class="line">        <span class="type">WeddingCompany</span> <span class="variable">weddingCompany</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(you);</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实角色， 你去结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师要结婚了，超开心&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理角色，帮助你结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="comment">// 代理真实目标角色</span></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="built_in">this</span>.target.HappyMarry(); <span class="comment">// 真实对象</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之后， 收尾款&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><blockquote><p><strong>避免匿名内部类定义过多</strong></p><p><strong>实质属于函数式编程的概念</strong></p><p><strong>(params) -&gt; expression[表达式]</strong></p><p><strong>(params) -&gt;statement[语句]</strong></p><p><strong>(params) -&gt; {statements}</strong></p><blockquote><p><strong>避免匿名内部类定义过多</strong></p></blockquote><blockquote><p><strong>只留下核心代码</strong></p></blockquote></blockquote><h3 id="函数式接口："><a href="#函数式接口：" class="headerlink" title="函数式接口："></a>函数式接口：</h3><p><strong>任何接口，如果只包含唯一一个抽象方法，那他就是一个函数式接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> (<span class="type">int</span> a) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">520</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Ilove</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">love</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简化1. 参数类型</span></span><br><span class="line"><span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> (a)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line">love.love(<span class="number">520</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化2. 简化括号</span></span><br><span class="line"><span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> a-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line">love.love(<span class="number">520</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化3. 去掉花括号  (代码只有一行可简化)</span></span><br><span class="line"><span class="type">Ilove</span> <span class="variable">love</span> <span class="operator">=</span> a-&gt; System.out.println(<span class="string">&quot;I love you --&gt; &quot;</span> + a);</span><br><span class="line">love.love(<span class="number">520</span>);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>lambda表达式只有一行代码的情况下才能简化成为1行，如果有多行，用 {} 包裹</strong></p><p><strong>前提是： 接口为函数式接口</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF转图片</title>
      <link href="/2021/12/25/PDF%E8%BD%AC%E5%9B%BE%E7%89%87/"/>
      <url>/2021/12/25/PDF%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h1><p><strong>完整源码：<a href="https://github.com/JiaZhengJingXianSheng/PDF2Image">https://github.com/JiaZhengJingXianSheng/PDF2Image</a></strong></p><h4 id="x86-64-可执行文件："><a href="#x86-64-可执行文件：" class="headerlink" title="x86-64 可执行文件："></a>x86-64 可执行文件：</h4><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Qk_SCLNtnYLSxfu0ArF5-Q">https://pan.baidu.com/s/1Qk_SCLNtnYLSxfu0ArF5-Q</a><br>提取码：at0c</p></blockquote><p>执行源码须自己配置依赖，需配置traits，请自行搜索解决。打包后的可执行程序链接如上。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>程序因未作错误判定，请选择PDF文件夹时，保证文件夹下仅有pdf文件。</p><h2 id="程序核心"><a href="#程序核心" class="headerlink" title="程序核心"></a>程序核心</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">pdf = fitz.<span class="built_in">open</span>(self.path + <span class="string">&quot;/&quot;</span> + file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐页读取PDF</span></span><br><span class="line"><span class="keyword">for</span> pg <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, pdf.page_count):</span><br><span class="line">page = pdf[pg]</span><br><span class="line">pm = page.get_pixmap()</span><br><span class="line"><span class="comment"># 开始写图像</span></span><br><span class="line">pm.save(self.path + <span class="string">&quot;/../Image/&quot;</span> + <span class="built_in">str</span>(file) + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(pg) + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">pdf.close()</span><br></pre></td></tr></table></figure><p>程序会在pdf文件夹同目录下生成Image文件夹，对应图片会放在以对应pdf名称为文件名的目录下。</p><h2 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211225_1.png"></p><ol><li>点击选择路径，选择PDF所在文件夹，当下方提示PDF路径即为成功。</li></ol><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211225_2.png"></p><ol start="2"><li><p>点击开始执行，下方会显示执行进度，在执行结束后会出现成功的弹窗。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211225_3.png"></p></li></ol><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211225_4.png"></p><ol start="3"><li>接下来就可以去Image中找图片文件了，生活愉快😄</li></ol>]]></content>
      
      
      <categories>
          
          <category> 自编小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小工具 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听徐宗本院士SLM所记</title>
      <link href="/2021/12/18/%E5%90%AC%E5%BE%90%E5%AE%97%E6%9C%AC%E9%99%A2%E5%A3%ABSLM%E6%89%80%E8%AE%B0/"/>
      <url>/2021/12/18/%E5%90%AC%E5%BE%90%E5%AE%97%E6%9C%AC%E9%99%A2%E5%A3%ABSLM%E6%89%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="听徐宗本院士SLM所记"><a href="#听徐宗本院士SLM所记" class="headerlink" title="听徐宗本院士SLM所记"></a>听徐宗本院士SLM所记</h1><p>起初是在大湾区科学论坛听到徐宗本院士所讲迁移学习，故作笔记如下</p><ol><li><p>新的学习任务是否和过去的任务有关联，或关联程度如何</p></li><li><p>学习机器模型搭建是否好</p></li><li><p>原训练集和现在的训练集是否在一个阈值内。</p></li></ol><h2 id="数据自动化"><a href="#数据自动化" class="headerlink" title="数据自动化"></a>数据自动化</h2><p>数据自选择</p><p>数据自校正</p><p>数据自生成</p><p>数据建模</p><h2 id="网络自调节"><a href="#网络自调节" class="headerlink" title="网络自调节"></a>网络自调节</h2><p>特征自调节</p><p>网络剪枝</p><p>自适应降维</p><p>信息单元参数化设计</p><p>结构组装</p><h2 id="度量自构建"><a href="#度量自构建" class="headerlink" title="度量自构建"></a>度量自构建</h2><p>样本相关损失函数确定</p><p>自适应损失函数确定</p><p>模型选择</p><h2 id="算法自动化"><a href="#算法自动化" class="headerlink" title="算法自动化"></a>算法自动化</h2><p>学习率自适应</p><p>Learning to optimize</p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> AutoML </tag>
            
            <tag> 迁移学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下模拟实现简单的Shell</title>
      <link href="/2021/12/15/Linux%E4%B8%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Shell/"/>
      <url>/2021/12/15/Linux%E4%B8%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84Shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下模拟实现简单的Shell"><a href="#Linux下模拟实现简单的Shell" class="headerlink" title="Linux下模拟实现简单的Shell"></a>Linux下模拟实现简单的Shell</h1><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/Linux_Shell">https://github.com/JiaZhengJingXianSheng/Linux_Shell</a></strong> </p><h2 id="一、-fork"><a href="#一、-fork" class="headerlink" title="一、 fork"></a>一、 fork</h2><p>fork系统调用用于创建一个新进程，称为<strong>子进程</strong>，它与进程（称为系统调用fork的进程）同时运行，此进程称为<strong>父进程</strong>。创建新的子进程后，两个进程将执行fork（）系统调用之后的下一条指令。子进程使用相同的<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/3219536">程序计数器</a>，相同的CPU寄存器，在父进程中使用的相同打开文件。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>  <strong>1）在父进程中，fork返回新创建子进程的进程ID；</strong><br>  <strong>2）在子进程中，fork返回0；</strong><br>  <strong>3）如果出现错误，fork返回一个负值；</strong></p><p>如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。因此我们可以通过判断fork返回值来确定进程是子进程还是父进程。</p><h2 id="二、-execvp"><a href="#二、-execvp" class="headerlink" title="二、 execvp"></a>二、 execvp</h2><p><strong>execvp()</strong> 会从PATH所指的目录中查找符合参数file 的文件名，找到后便执行该文件，然后将第二个参数 <strong>argv</strong> 传给该欲执行的文件。</p><p>如果执行成功则函数不会返回，执行失败则直接返回-1，失败原因存于errno中。我们可以通过 <strong>perror()</strong> 函数来打印错误。</p><h2 id="三、-wait-x2F-waitpid"><a href="#三、-wait-x2F-waitpid" class="headerlink" title="三、 wait&#x2F;waitpid"></a>三、 wait&#x2F;waitpid</h2><p><strong>wait:</strong>  父进程一旦调用了wait就立即阻塞自己，由wait自动分析是否当前进程的某个子进程已经退出，如果让它找到了这样一个已经变成僵尸的子进程，wait就会收集这个子进程的信息，并把它彻底销毁后返回；如果没有找到这样一个子进程，wait就会一直阻塞在这里，直到有一个出现为止。</p><p><strong>waitpid:</strong>  暂时停止目前进程的执行, 直到有信号来到或子进程结束. 如果在调用时子进程已经结束, 则会立即返回子进程结束状态值. 子进程的结束状态值会由参数status 返回, 而子进程的进程识别码也会一快返回.</p><h2 id="四、-实现"><a href="#四、-实现" class="headerlink" title="四、 实现"></a>四、 实现</h2><h3 id="1-相关函数"><a href="#1-相关函数" class="headerlink" title="1. 相关函数"></a>1. 相关函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> pid = fork();</span><br></pre></td></tr></table></figure><p>调用fork函数可创建一个子进程，这边说的子进程就是我们平时所讲的线程。只不过在Linux下线程是用拷贝进程的形式实现，所以这边称为子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__file, <span class="type">char</span> *<span class="type">const</span> *__argv)</span></span><br></pre></td></tr></table></figure><p>execvp函数可以调用PATH下的命令，其中参数1为操作码（命令），参数2为操作码+操作数（命令+参数）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perror(<span class="string">&quot;fork error&quot;</span>);</span><br></pre></td></tr></table></figure><p>eperror函数用来打印错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wait(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>在父进程中调用wait函数，会阻塞父进程，并检查子进程是否退出，未退出则杀死子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir();</span><br></pre></td></tr></table></figure><p>由于父进程和子进程并不共享环境变量，子进程修改了当前工作目录的环境变量对父进程也没有什么影响，所以cd命令是无法简单用execvp函数实现的，这边会用到chdir函数。</p><h3 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h3><p>首先从键盘读取一行命令。并将命令根据空格划分开，第一个参数即为命令，后续为参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> cmd[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(cmd, <span class="number">64</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *command[<span class="number">64</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *s = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="type">char</span> *token;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取第一个子字符串 */</span></span><br><span class="line">token = strtok(cmd, s);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">/* 继续获取其他的子字符串 */</span></span><br><span class="line"><span class="keyword">while</span> (token != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">      command[i] = token;</span><br><span class="line">      token = strtok(<span class="literal">NULL</span>, s);</span><br><span class="line">      i++;</span><br><span class="line">&#125;</span><br><span class="line">command[i] = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>至此我么就将命令按格式全部划分。</p><p>接下来我们去创建一个子线程，在子线程内，判断命令如果为cd则调用chdir()， 否则调用execvp() , 并用perror(), 打印错误。在父进程调用wait() 函数来回收子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(command[<span class="number">0</span>], <span class="string">&quot;exit&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid = fork(); <span class="comment">// 创建子进程（线程）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) <span class="comment">// 子进程</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(command[<span class="number">0</span>], <span class="string">&quot;cd&quot;</span>) == <span class="number">0</span>) <span class="comment">// cd命令用chdir函数</span></span><br><span class="line">        chdir(command[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        execvp(command[<span class="number">0</span>], command);</span><br><span class="line">        perror(<span class="string">&quot;fork error&quot;</span>); <span class="comment">// execvp未执行成功，fork失败</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wait(<span class="literal">NULL</span>); <span class="comment">// 子进程死亡回收</span></span><br></pre></td></tr></table></figure><h3 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework2$ g++ MyShell.cpp -o SHELL</span><br><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework2$ ./SHELL </span><br><span class="line">Shell&gt;&gt; pwd</span><br><span class="line">/home/lyz/Desktop/LinuxHomework2</span><br><span class="line">Shell&gt;&gt; ls </span><br><span class="line">MyShell.cpp  SHELL</span><br><span class="line">Shell&gt;&gt; cd ..</span><br><span class="line">Shell&gt;&gt; pwd</span><br><span class="line">/home/lyz/Desktop</span><br><span class="line">Shell&gt;&gt; exit</span><br><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework2$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们的shell运行正常</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯分类器</title>
      <link href="/2021/12/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
      <url>/2021/12/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="朴素贝叶斯分类器"><a href="#朴素贝叶斯分类器" class="headerlink" title="朴素贝叶斯分类器"></a>朴素贝叶斯分类器</h1><p><strong>完整代码：<a href="https://github.com/JiaZhengJingXianSheng/Naive-Bayes-Classify">https://github.com/JiaZhengJingXianSheng/Naive-Bayes-Classify</a></strong></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况下，如何完成推理和决策任务。 而朴素贝叶斯分类器是基于独立假设的，即假设样本每个特 征与其他特征都不相关。 朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习 的样本集中能获取得非常好的分类效果。</p><hr><h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><p>假设A,B是两个随机变量，它们的联合概率 <strong>P(A&#x3D;x,B&#x3D;y)</strong> 是指 <strong>A&#x3D;x和B&#x3D;y同时</strong> 发生的概率。</p><p>如果A和B是两个随机变量，且 <strong>P(B)≠0</strong> 。那么B条件下，A 的条件概率为<br>$$<br>P(A|B)&#x3D;\frac{P(A,B)}{P(B)}<br>$$<br>我们用Ω代表总样本空间，P(A|B)的隐含假设是，B确定要发生。当确定B发生时， 样本空间不再是Ω，而是缩小成B。我们在B样本空间中 寻找A发生的概率。</p><hr><h2 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h2><p>贝叶斯定理 <strong>（Bayes theorem）</strong> ，是一种对属性集 <strong>X</strong>（现象，事件，特征向量）和类变量 <strong>Y</strong>（条件，原因，类）的概率关系建模的方法，是一种把类的先验知识和从数据中收集的新证据相结合的统计原理。</p><h3 id="基础原理"><a href="#基础原理" class="headerlink" title="基础原理"></a>基础原理</h3><p>$$<br>P(X|Y)P(Y)&#x3D;P(X,Y)&#x3D;P(Y|X)P(X)<br>$$</p><h3 id="贝叶斯定理-1"><a href="#贝叶斯定理-1" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h3><p>$$<br>P(Y|X)&#x3D;\frac{P(X|Y)P(X)}{P(X)}<br>$$</p><hr><h2 id="贝叶斯分类"><a href="#贝叶斯分类" class="headerlink" title="贝叶斯分类"></a>贝叶斯分类</h2><p>利用贝叶斯公式来计算样本属于各类的后验概率 $P(w_i |x)$<br>$$<br>P(w_i|x)&#x3D;\frac{P(x|w_i)P(w_i)}{P(x)}<br>$$<br>其中，x是特征向量， $w_i$ 是类标签。</p><p><strong>先验概率：</strong>   $P(w_i)$ 可以由大量的重复实验所获得的各类样本出 现的频率来近似获得，其基础是“大数定律”。</p><p>从测量中获得了样本的特征向量后，依照 $x和w_i$ 的组合确定似然函数 $P(x|w_i)$  ，再运用贝叶斯公式计算后验概率 $P(x|w_i)$ ，通过找出使后验概率 $P(x|w_i)$  最大的类 $w_i$ ，对样本进行分类； </p><p><strong>前提条件：</strong> 假设属性之间条件独立。</p><h3 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h3><p>已知样本分为 m 类 $w_1,w_2,…,w_m$ ，各类的先验概 率 $P(w_1),P(w_2),…,P(w_m)$  </p><p><strong>核心步骤：</strong> </p><ol><li><p>计算对应的各类条件概率 $P(x|w_k)$ </p></li><li><p>求出对应的后验概率 $P(w_k|x)$  ，即M 个判别函数 </p></li><li><p>寻找最大值：<br>$$<br>P(w_k|x) &#x3D; P(w_k)P(x|w_k)&#x3D;max{ P(w_j)P(x|w_j) }  \qquad 1 \le j \le m<br>$$</p></li><li><p>把x归于概率最大的那个类。</p></li></ol><hr><h2 id="代码实现-手写数字识别"><a href="#代码实现-手写数字识别" class="headerlink" title="代码实现 - 手写数字识别"></a>代码实现 - 手写数字识别</h2><h3 id="一、-准备工作"><a href="#一、-准备工作" class="headerlink" title="一、 准备工作"></a>一、 准备工作</h3><p>我们需要调用 <strong>sklearn.naive_bayes</strong> 下 <strong>GaussianNB</strong> 的包</p><p> <strong>GaussianNB</strong> 的定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">    --------</span><br><span class="line">    &gt;&gt;&gt; import numpy as np</span><br><span class="line">    &gt;&gt;&gt; X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])</span><br><span class="line">    &gt;&gt;&gt; Y = np.array([1, 1, 1, 2, 2, 2])</span><br><span class="line">    &gt;&gt;&gt; from sklearn.naive_bayes import GaussianNB</span><br><span class="line">    &gt;&gt;&gt; clf = GaussianNB()</span><br><span class="line">    &gt;&gt;&gt; clf.fit(X, Y)</span><br><span class="line">    GaussianNB()</span><br><span class="line">    &gt;&gt;&gt; print(clf.predict([[-0.8, -1]]))</span><br></pre></td></tr></table></figure><p>可以看出是将image和对应的label 分别传入fit函数，而fit函数定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def fit(self, X, y, sample_weight=None):</span><br><span class="line">    &quot;&quot;&quot;Fit Gaussian Naive Bayes according to X, y.</span><br><span class="line"></span><br><span class="line">    Parameters</span><br><span class="line">    ----------</span><br><span class="line">    X : array-like of shape (n_samples, n_features)</span><br><span class="line">        Training vectors, where `n_samples` is the number of samples</span><br><span class="line">        and `n_features` is the number of features.</span><br><span class="line"></span><br><span class="line">    y : array-like of shape (n_samples,)</span><br><span class="line">        Target values.</span><br></pre></td></tr></table></figure><p>这意味着我们必须把单个图片tensor全部转为一行，再把所有的图片拼接起来。</p><hr><h3 id="二、-具体实施"><a href="#二、-具体实施" class="headerlink" title="二、 具体实施"></a>二、 具体实施</h3><h4 id="1-导入相关包"><a href="#1-导入相关包" class="headerlink" title="1.导入相关包"></a>1.导入相关包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.naive_bayes import GaussianNB</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import torchvision</span><br><span class="line">import torch</span><br><span class="line">from torchvision import transforms</span><br></pre></td></tr></table></figure><h4 id="2-设定相关参数"><a href="#2-设定相关参数" class="headerlink" title="2. 设定相关参数"></a>2. 设定相关参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">batch_size = 32</span><br></pre></td></tr></table></figure><h4 id="3-下载数据集"><a href="#3-下载数据集" class="headerlink" title="3. 下载数据集"></a>3. 下载数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data = torchvision.datasets.MNIST(<span class="string">&quot;data&quot;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transforms.ToTensor())</span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">val_data = torchvision.datasets.MNIST(<span class="string">&quot;data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transforms.ToTensor())</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>这边我们使用pytorch下载并读取数据集，并转为tensor -&gt; <strong>transform&#x3D;transforms.ToTensor()</strong> 。</p><h4 id="4-数据预处理"><a href="#4-数据预处理" class="headerlink" title="4. 数据预处理"></a>4. 数据预处理</h4><p><strong>MNIST数据集</strong> 包含 <strong>60000个训练样本和10000个测试样本</strong> ，每张图片都是 <strong>28x28</strong> 像素。事实上，上面的数据集尺寸并不是我们想要的，以训练集距离我们的尺寸是 <strong>[60000&#x2F;batch_size ， batch_size , 28 , 28 ]</strong> 的数据，我们要将其转换为 <strong>[60000, 28x28 ]</strong> 的形式。<strong>label的尺寸为60000行</strong>。</p><p>接下来我们定义预处理函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pretreatment</span>(<span class="params">data, batch_size</span>):</span><br><span class="line">    image = []</span><br><span class="line">    label = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        x, y = <span class="built_in">next</span>(<span class="built_in">iter</span>(data))</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">            image.append(x[ii].reshape(<span class="number">1</span>, -<span class="number">1</span>)[<span class="number">0</span>].tolist())</span><br><span class="line">            label.append(y[ii].item())</span><br><span class="line"></span><br><span class="line">    image = np.array(image)</span><br><span class="line">    label = np.array(label)</span><br><span class="line">    <span class="keyword">return</span> image, label</span><br></pre></td></tr></table></figure><p>我们对每一个迭代出的 <strong>x，y</strong> 实际上是 <strong>batch_size张图片</strong> ，我们遍历图片并将每张图片<strong>展平成一行</strong>。对于label我们只需要拿出他们的值即可，最终 <strong>转为numpy并返回</strong> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_image, train_label = pretreatment(train_loader, batch_size)</span><br><span class="line">val_image, val_label = pretreatment(val_loader, batch_size)</span><br></pre></td></tr></table></figure><p>至此我们就可以得到所需格式的数据</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211208_1.png"></p><h4 id="5-训练"><a href="#5-训练" class="headerlink" title="5. 训练"></a>5. 训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classify = GaussianNB().fit(train_image, train_label)</span><br></pre></td></tr></table></figure><p>训练相对容易，只需要将对应值传入即可。</p><hr><h4 id="6-预测"><a href="#6-预测" class="headerlink" title="6. 预测"></a>6. 预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_label = classify.predict(val_image)</span><br></pre></td></tr></table></figure><p>调用predict函数并传入预测数据集即可得到预测结果</p><p>我们这边打印10张图片，并在前面打印预测结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(1)</span><br><span class="line">print(&quot;预测结果为：&quot;,end=&quot; &quot;)</span><br><span class="line">for i in range(10):</span><br><span class="line">    plt.subplot(1, 10, i + 1)</span><br><span class="line">    plt.imshow(val_image[i].flatten().reshape(28, 28))</span><br><span class="line">    print(predict_label[i], end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;\n初始标签为：&quot;,end=&quot; &quot;)</span><br><span class="line">for i in range(10):</span><br><span class="line">    print(val_label[i],end=&quot; &quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211208_2.png"></p><h4 id="7-评估"><a href="#7-评估" class="headerlink" title="7. 评估"></a>7. 评估</h4><p>我们计算预测结果等于本身label的数量，除以总数即为预测精度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(val_loader)):</span><br><span class="line">    <span class="keyword">if</span> val_label[i] == predict_label[i]:</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测精度为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>/<span class="built_in">len</span>(val_loader))</span><br></pre></td></tr></table></figure><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211208_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 贝叶斯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉SLAM十四讲 Chapter4</title>
      <link href="/2021/12/07/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-4/"/>
      <url>/2021/12/07/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-4/</url>
      
        <content type="html"><![CDATA[<h1 id="李群与李代数"><a href="#李群与李代数" class="headerlink" title="李群与李代数"></a>李群与李代数</h1><p><strong>参考书目 《视觉SLAM十四讲》 高翔 张涛 等著</strong> </p><p><strong>参考链接： <a href="https://zhuanlan.zhihu.com/p/33156814">https://zhuanlan.zhihu.com/p/33156814</a></strong> </p><hr><h2 id="一、-李群与李代数基础"><a href="#一、-李群与李代数基础" class="headerlink" title="一、 李群与李代数基础"></a>一、 李群与李代数基础</h2><h3 id="1-李群"><a href="#1-李群" class="headerlink" title="1. 李群"></a>1. 李群</h3><p>三维旋转矩阵构成了 <strong>特殊正交群</strong>  $SO(3)$ ，变换矩阵构成了 <strong>特殊欧式群</strong> $SE(3)$<br>$$<br>SO(3)&#x3D;{R \in R^{3 \times 3} |RR^T&#x3D;I,det(R)&#x3D;1}<br>$$</p><p>$$<br>SE(3)&#x3D;{ T &#x3D; \begin{bmatrix} R &amp; t \ 0^T &amp; 1 \end{bmatrix} \in R^{4\times4} | R \in SO(3),t \in R^3}<br>$$</p><p><strong>它们对于加法是不封闭的</strong>，换句话说两个变换矩阵相加后得到的矩阵并不是一个变换矩阵。</p><p><strong>定义</strong>：<em>李群</em>就是具有 <strong>连续（光滑）</strong> 性质的群。</p><p>前面举的整数的加法的例子显然不是连续的，因而它不是李群。但SO(3) 和SE(3) 在实数空间上是<strong>连续</strong>的（机器人在三维空间中显然是连续地运动，而不会进行“瞬移”）。</p><p><strong>问题：</strong> 为什么要用到李群和李代数？避免一直是数学上的推导。我们用一个比较实际的例子。假设某个时刻我们预测机器人的位姿为  $T$ （待定值）, 它观测到了一个惯性坐标系下的点  $p$ 而产生了一个观测数据 $z$ ，它是该点在相机坐标系下的坐标，则可得<br>$$<br>z&#x3D;Tp+w<br>$$</p><p>其中，$w$ 是观测噪声。由于观测噪声的存在， $z$  无法严格满足式 $z&#x3D;Tp$  。因此而产生的误差  $e$  为<br>$$<br>e&#x3D;z-Tp<br>$$<br>若共有N 个观测值，那么就有N 个这样的式子。机器人的位姿估计就转变成寻找一个最优的 $T$ 使得整体的误差最小化：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathop%7B%5Cmin%7D_%7BT%7D+J(%5Cmathbf%7BT%7D)=%5Csum%5Climits%5EN_%7Bi=1%7D%7C%7C%5Cmathbf%7Bz%7D_i-%5Cmathbf%7BT%7D%5Cmathbf%7Bp%7D_i%7C%7C%5E2_2" alt="[公式]"></p><p>通常，直接求解上式得出最优的 $T$ 是很困难的（或计算量很大）。我们常常先给定一个猜测值（初始值） $T_0$  ，然后不断地对它进行迭代更新。而这个过程需要用到导数（可以想想梯度下降法)。</p><p>导数的定义，</p><p> <img src="https://www.zhihu.com/equation?tex=%5Cdot%7Bf(x)%7D=%5Clim_%7B%5CDelta+x+%5Cto+0%7D+%5Cfrac%7Bf(x+%5CDelta+x)-f(x)%7D%7B%5CDelta+x%7D" alt="[公式]"> </p><p>显然计算导数和进行更新时都要用到加法。但SO(3) 和SE(3) 上对矩阵加法的运算并不封闭。如果要继续采取这个迭代更新的策略势必要再想想办法，使得导数“可行”。而这就可以通过李群及其对应的李代数来实现。</p><h3 id="2-李代数"><a href="#2-李代数" class="headerlink" title="2. 李代数"></a>2. 李代数</h3>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> SLAM </tag>
            
            <tag> 视觉SLAM十四讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉SLAM十四讲 Chapter3</title>
      <link href="/2021/12/03/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-3/"/>
      <url>/2021/12/03/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2-3/</url>
      
        <content type="html"><![CDATA[<h1 id="三维空间刚体运动"><a href="#三维空间刚体运动" class="headerlink" title="三维空间刚体运动"></a>三维空间刚体运动</h1><p><strong>参考书目 《视觉SLAM十四讲》 高翔 张涛 等著</strong> </p><p><strong>参考链接 <a href="https://zhuanlan.zhihu.com/p/32937868">https://zhuanlan.zhihu.com/p/32937868</a></strong> </p><hr><h2 id="一、-旋转矩阵"><a href="#一、-旋转矩阵" class="headerlink" title="一、 旋转矩阵"></a>一、 旋转矩阵</h2><h3 id="1-点、向量和坐标系"><a href="#1-点、向量和坐标系" class="headerlink" title="1. 点、向量和坐标系"></a>1. 点、向量和坐标系</h3><p>我们一般用三维空间中的点来表示我们的物体，向量来表示点在空间中的移动，简单定义在这边不再赘述。</p><p>假定我们现在有向量 $a和b$ 用 <strong>$&lt;a,b&gt;$</strong> 表示向量之间夹角，那么对外积而言我们定义 <strong>a与b的外积 &#x3D; a^b</strong> ，外积的结果是一个向量，根据右手定则方向垂直于这两向量形成的平面，大小为 <strong>$|a||b|sin&lt;a,b&gt;$</strong>  ,我们把 <strong>a^</strong> 称为 <strong>反对称矩阵</strong> 。</p><h3 id="2-坐标系间的欧式变换"><a href="#2-坐标系间的欧式变换" class="headerlink" title="2. 坐标系间的欧式变换"></a>2. 坐标系间的欧式变换</h3><p>对于两个坐标系之间的变化，我们可以用 <strong>一个旋转和一个平移</strong> 表示，这种运动称为 <strong>刚体运动</strong> 。</p><p>我们的 <strong>欧式变换</strong> 就是由 <strong>旋转和平移</strong> 组成。假定我们某点在 $[e_1,e_2,e_3]^T$ 坐标系下坐标为 $[a_1,a_2,a_3]^T$ , 在 $[{e_1}^{‘},{e_2}^{‘},{e_3}^{‘}]$ 下坐标为 $[{a_1}^{‘},{a_2}^{‘},{a_3}^{‘}]^T$ 。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_1.png" alt="1.PNG"></p><p>我们对左右两边同乘 $[{e_1}^{T},{e_2}^{T},{e_3}^{T}]^T$  ,左边的系数就变成了单位矩阵。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_2.png" alt="2.PNG"></p><p>我们把中间的矩阵定义为 <strong>$R旋转矩阵(Rotation \quad Matrix)$</strong>  , 该矩阵各分量是两个坐标系基的内积，由于基向量模长为1，所以实际上为各基向量夹角的余弦值，所以这个矩阵也称为 <strong>方向余弦矩阵(Direction  Cosine Matrix)</strong> ，或者 <strong>旋转矩阵</strong> 。</p><p>旋转矩阵是行列式为1的正交矩阵，反之，行列式为1的矩阵也是一个旋转矩阵。 我们可以将旋转矩阵的集合定义如下，称为 <strong>特殊正交群</strong> 。<br>$$<br>SO(n) &#x3D; { R \in R^{n \times n} |RR^T&#x3D;I, det(R)&#x3D;1 }<br>$$<br>通过旋转矩阵，就可以直接谈论两个坐标系之间的旋转变化，而不用再从基谈起。</p><p>在欧式变换中当我们把旋转和平移写在一个式子中，如下<br>$$<br>a_1 &#x3D; R_{12} a_2 + t_{12}<br>$$<br>其中 <strong>$a_1,a_2$</strong> 分别代表 <strong>a</strong> 在两个坐标系下的坐标， <strong>$R_{12}$</strong> 为把坐标系2的向量变换到坐标系1， <strong>$t_{12}$</strong> 代表平移向量。这样我们就可以实现一个点在两个坐标系下的转换。</p><h3 id="3-变换矩阵和齐次坐标"><a href="#3-变换矩阵和齐次坐标" class="headerlink" title="3. 变换矩阵和齐次坐标"></a>3. 变换矩阵和齐次坐标</h3><p>我们上面引入的变换公式不是线性关系，当进行多次变换的话，算出的结果会很复杂，所以我们引入齐次坐标和变换矩阵。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_3.png" alt="3.PNG"></p><p>这样写的好处是可以把旋转和平移写在一个矩阵内，使得整个关系变成线性关系。矩阵 <strong>T</strong> 称为 <strong>变换矩阵（Transform Matrix）</strong> 。这个矩阵又被称为 <strong>特殊欧式群（Special Euclidean Group）</strong> 。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_4.png" alt="4.PNG"></p><hr><h2 id="二、-旋转向量和欧拉角"><a href="#二、-旋转向量和欧拉角" class="headerlink" title="二、 旋转向量和欧拉角"></a>二、 旋转向量和欧拉角</h2><h3 id="1-旋转向量"><a href="#1-旋转向量" class="headerlink" title="1. 旋转向量"></a>1. 旋转向量</h3><p>在三维空间中，任意旋转都可以用 <strong>一个旋转轴和一个旋转角</strong> 来刻画，我们定义一个向量，方向与旋转轴一致，长度等于旋转角，这种向量被称为 <strong>旋转向量（轴角&#x2F;角轴，Axis-Angle）</strong> ，只需要一个三维向量即可描述旋转。</p><p>假定旋转轴为一个单位长度的向量 <strong>n</strong> ，角度为 <strong>$\theta$</strong> ,那么向量 <strong>$\theta n$</strong>  可表示这个旋转。从旋转向量到旋转矩阵的转换公式由 <strong>罗德里格斯公式（Rodrigues’s Formula）</strong> 表明。<br>$$<br>R &#x3D; cos \theta I + (1-cos \theta )nn^T+ sin \theta \hat n<br>$$<br>我们也可以反推出 <strong>$ \theta $</strong>  公式。<br>$$<br>\theta &#x3D; arccos \frac {tr(R)-1}{2}<br>$$<br>关于转轴 <strong>n</strong> 在旋转之后不发生改变<br>$$<br>Rn &#x3D; n<br>$$</p><h3 id="2-欧拉角"><a href="#2-欧拉角" class="headerlink" title="2. 欧拉角"></a>2. 欧拉角</h3><p>除了旋转向量，我们也可以用 <strong>欧拉角</strong> 来紧凑地描述旋转。一个旋转可以分解成3次分别绕X，Y，Z 轴的旋转来表示，在航空摄影测量中，一般用 <strong>“翻转 - 航偏 - 俯仰”（roll - yaw - pitch)</strong> ，也即 <strong>XZY</strong> 来表示。先绕X 轴旋转roll 角度，再绕Y 轴旋转yaw 角度，最后按照Z 轴旋转pitch 角度。这三个旋转矩阵相乘就得到了总的旋转矩阵。</p><p>此时，就可以用 <strong>$[r,p,y]^T$</strong> 这三个量来描述任意旋转，这种表示方式会比其他方式更直观、更易理解。</p><p>但欧拉角会有一个重大缺点，就是著名的 <strong>万向锁问题（Gimbal Lock）</strong> ，在俯仰角为正负90度时，第一次旋转与第三次旋转将使用同一个轴，使得系统失去一个自由度，这被称为 <strong>奇异性</strong> 问题。</p><hr><h2 id="三、-四元数"><a href="#三、-四元数" class="headerlink" title="三、 四元数"></a>三、 四元数</h2><p>既然我们已经有了旋转向量和欧拉角，为什么还有个四元数（Quaternion）？因为欧拉角和旋转向量具有奇异性（万向锁问题）。<strong>不存在不带有奇异性的三维向量描述方式</strong>。因此我们需要用到四元数，<strong>它既是紧凑的，也没有奇异性</strong>。</p><p><strong>定义</strong>：一个四元数包含一个实部和三个虚部。<br>$$<br>q &#x3D; q_0 + q_1i + q_2j + q_3k &#x3D; [s,v]<br>$$<br>其中，后面的等式将四元数表达成一个标量和一个向量， $i,j,k$  表示四元数的三个虚部，满足：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_5.png" alt="5.PNG"></p><p>若一个四元数虚部全为0，则它是一个<strong>实四元数</strong>；如其实部为零，则称它为<strong>虚四元素</strong>。而且，<strong>一个虚四元数对应一个空间点</strong>。</p><p>我们能用<strong>单位四元数</strong>来表示三维空间中的任意一个旋转。我们先考虑下复数。在负数中，乘以i 表示在复平面内旋转90度。但在四元数中，情形却有微妙的不同：乘以i 表示旋转180度，这样才能保证 <strong>$ij&#x3D;-k$</strong>  的性质。而 <strong>$i^2 &#x3D; -1$</strong>  ，说明绕i 轴旋转360度后得到一个相反的东西，而要旋转720度（两周）才能得到它原先的样子。</p><p>假设某个旋转的旋转向量为 <strong>$ \theta n$</strong>  , 则<br>$$<br>q&#x3D;[cos \frac {\theta}{2} ,n_x sin \frac {\theta}{2}, n_ysin \frac {\theta}{2},n_zsin\frac {\theta}{2}]^T<br>$$<br>反之则有<br>$$<br>\theta &#x3D; 2 arccosq_0<br>$$</p><p>$$<br>[n_x,n_y,n_z]^T&#x3D;[q_1,q_2,q_3]^T&#x2F;sin \frac {\theta}{2}<br>$$</p><p>上式给人一种“转了一半”的感觉。将上式中的 $\theta$ 加上 $2\pi$ 后得到一个相同的旋转，但是对应的四元数却变成了 $-q$  . 所以，在四元数中，<strong>任意的旋转都可以由两个互为相反数的四元数表示</strong>。</p><p>而四元数和旋转矩阵的关系为：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_6.png" alt="6.PNG"></p><p>设矩阵 <strong>$ R&#x3D;{m_{ij},i,j \in [1,2,3]} $</strong>  , 则由上式可以推得：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211203_7.png" alt="7.PNG"></p><p><strong>NOTE</strong>: 由于 <strong>q和-q</strong> 表示同一个旋转，所以一个旋转矩阵对应的四元数表示<strong>并不惟一</strong>且存在其他转换公式。在实际中，如果 $q_0$ 接近于0，会造成其他3个数的解<strong>不稳定</strong>，应采用其他公式。</p><p><strong>总之：</strong> 四元数到旋转向量的转换公式为<br>$$<br>\theta &#x3D; 2arccosq_0<br>$$</p><p>$$<br>[n_x,n_y,n_z]^T &#x3D; [q_1,q_2,q_3]^T&#x2F;sin \frac {\theta}{2}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> SLAM </tag>
            
            <tag> 视觉SLAM十四讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下模仿实现readelf部分功能</title>
      <link href="/2021/12/02/Linux%E4%B8%8B%E6%A8%A1%E4%BB%BF%E5%AE%9E%E7%8E%B0ReadELF%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/12/02/Linux%E4%B8%8B%E6%A8%A1%E4%BB%BF%E5%AE%9E%E7%8E%B0ReadELF%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="模仿实现Linux下-readelf-工具部分功能"><a href="#模仿实现Linux下-readelf-工具部分功能" class="headerlink" title="模仿实现Linux下 $readelf$ 工具部分功能"></a>模仿实现Linux下 $readelf$ 工具部分功能</h1><h4 id="完整实现："><a href="#完整实现：" class="headerlink" title="完整实现："></a>完整实现：</h4><p><strong><a href="https://github.com/JiaZhengJingXianSheng/ReadELF">https://github.com/JiaZhengJingXianSheng/ReadELF</a></strong> </p><p><strong>ELF</strong> 目标文件格式的最前部是 <strong>ELF文件头 (ELF  Header)</strong> ,它包含了描述整个文件的基本属性，比如 ELF 文件版本、目标机器型号、程序入口地址等。紧接是 ELF 文件各个段。其中ELF 文件中与段有关的重要结构就是 <strong>段表 (Section Header Table)</strong> ,该表描述了ELF 文件包含的所有段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其他属性。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211202_1.png"></p><p>在 <strong>linux</strong> 下elf的定义存放在  $&#x2F;usr&#x2F;include$ 下, 我们可以用 $readelf -h$ 命令加上文件来查看ELF头文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/include/elf.h</span><br></pre></td></tr></table></figure><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211202_2.png"></p><p>ELF 的文件头中定义了 ELF 魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF 重定位类型、硬件平台、硬件平台版本，入口地址、程序头入口和长度、段表的位置和长度及段的数量等。</p><p><strong>详细请参照： <a href="https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow">https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow</a></strong> </p><hr><h2 id="头文件-h功能"><a href="#头文件-h功能" class="headerlink" title="头文件 -h功能"></a>头文件 -h功能</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211202_3.png"></p><p>我们拿 ELF 文件头结构跟前面readelf输出的 ELF 文件头信息相比照，可以看到输出的信息与 ELF 文件头中的结构很多都一一对应。有点例外的是 “Elf64_ Ehdr” 中的e_ident这个成员对应了readelf 输出结果中的“Class”、Data”、“Version”、“OS&#x2F;ABI”和“ABI Version”这5个参数。剩下的参数与“EIf64_ Ehdr”中的成员都一一对应。</p><p><strong>细节请参照：<a href="https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html">https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html</a></strong> </p><p>所以我们在c语言实现时，只需要按照结构体定义依次取值，并判断输出。下面提供简单部分代码，完整代码会附在文章开头。其中reinterpret_cast运算符是用来处理无关类型之间的转换；它会产生一个新的值，这个值会有与原始参数（expression）有完全相同的比特位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> Elf64_Ehdr *header;</span><br><span class="line">      header = reinterpret_cast&lt;Elf64_Ehdr *&gt;(programMMap);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Magic:\t\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, header-&gt;e_ident[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;类型:\t\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="keyword">switch</span> (header-&gt;e_ident[<span class="number">4</span>])</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;无效\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;ELF32\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Elf64\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;错误\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;数据存储方式:\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="keyword">switch</span> (header-&gt;e_ident[<span class="number">5</span>])</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;未知格式\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;二进制补码 小端存储\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;二进制补码 大端存储\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;错误\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;版本:\t\t\t\t\t&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="type">int</span>)header-&gt;e_ident[<span class="number">8</span>]);</span><br><span class="line">      <span class="comment">//部分代码</span></span><br></pre></td></tr></table></figure><hr><h2 id="段表-S功能"><a href="#段表-S功能" class="headerlink" title="段表 -S功能"></a>段表 -S功能</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211202_4.png"></p><p>ELF 文件中有很多各种各样的段，这个段表 (Section Header Table）就是保存这些段的基本属性的结构。段表是 ELF 文件中除了文件头以外最重要的结构，它描述了ELF 的各个段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其他属性。也就是说，ELF 文件的段结构就是由段表决定的，编译器、链接器和装载器都是依靠段表来定位和访问各个段的属性的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">lyz@ubuntu:~/Desktop/LinuxHomework1/build$ readelf -S print </span><br><span class="line">There are 31 section headers, starting at offset 0x3978:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .interp           PROGBITS         0000000000000318  00000318</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     1</span><br><span class="line">  [ 2] .note.gnu.propert NOTE             0000000000000338  00000338</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     8</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE             0000000000000358  00000358</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 4] .note.ABI-tag     NOTE             000000000000037c  0000037c</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="line">  [ 5] .gnu.hash         GNU_HASH         00000000000003a0  000003a0</span><br><span class="line">       0000000000000024  0000000000000000   A       6     0     8</span><br><span class="line">  [ 6] .dynsym           DYNSYM           00000000000003c8  000003c8</span><br><span class="line">       00000000000000a8  0000000000000018   A       7     1     8</span><br><span class="line">  [ 7] .dynstr           STRTAB           0000000000000470  00000470</span><br><span class="line">       00000000000000b7  0000000000000000   A       0     0     1</span><br><span class="line">  [ 8] .gnu.version      VERSYM           0000000000000528  00000528</span><br><span class="line">       000000000000000e  0000000000000002   A       6     0     2</span><br><span class="line">  [ 9] .gnu.version_r    VERNEED          0000000000000538  00000538</span><br><span class="line">       0000000000000020  0000000000000000   A       7     1     8</span><br><span class="line">  [10] .rela.dyn         RELA             0000000000000558  00000558</span><br><span class="line">       00000000000000c0  0000000000000018   A       6     0     8</span><br><span class="line">  [11] .rela.plt         RELA             0000000000000618  00000618</span><br><span class="line">       0000000000000018  0000000000000018  AI       6    24     8</span><br><span class="line">  [12] .init             PROGBITS         0000000000001000  00001000</span><br><span class="line">       000000000000001b  0000000000000000  AX       0     0     4</span><br><span class="line">  [13] .plt              PROGBITS         0000000000001020  00001020</span><br><span class="line">       0000000000000020  0000000000000010  AX       0     0     16</span><br><span class="line">  [14] .plt.got          PROGBITS         0000000000001040  00001040</span><br><span class="line">       0000000000000010  0000000000000010  AX       0     0     16</span><br><span class="line">  [15] .plt.sec          PROGBITS         0000000000001050  00001050</span><br><span class="line">       0000000000000010  0000000000000010  AX       0     0     16</span><br><span class="line">  [16] .text             PROGBITS         0000000000001060  00001060</span><br><span class="line">       0000000000000185  0000000000000000  AX       0     0     16</span><br><span class="line">  [17] .fini             PROGBITS         00000000000011e8  000011e8</span><br><span class="line">       000000000000000d  0000000000000000  AX       0     0     4</span><br><span class="line">  [18] .rodata           PROGBITS         0000000000002000  00002000</span><br><span class="line">       0000000000000004  0000000000000004  AM       0     0     4</span><br><span class="line">  [19] .eh_frame_hdr     PROGBITS         0000000000002004  00002004</span><br><span class="line">       0000000000000044  0000000000000000   A       0     0     4</span><br><span class="line">  [20] .eh_frame         PROGBITS         0000000000002048  00002048</span><br><span class="line">       0000000000000108  0000000000000000   A       0     0     8</span><br><span class="line">  [21] .init_array       INIT_ARRAY       0000000000003d98  00002d98</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [22] .fini_array       FINI_ARRAY       0000000000003da0  00002da0</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [23] .dynamic          DYNAMIC          0000000000003da8  00002da8</span><br><span class="line">       0000000000000210  0000000000000010  WA       7     0     8</span><br><span class="line">  [24] .got              PROGBITS         0000000000003fb8  00002fb8</span><br><span class="line">       0000000000000048  0000000000000008  WA       0     0     8</span><br><span class="line">  [25] .data             PROGBITS         0000000000004000  00003000</span><br><span class="line">       0000000000000010  0000000000000000  WA       0     0     8</span><br><span class="line">  [26] .bss              NOBITS           0000000000004010  00003010</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     1</span><br><span class="line">  [27] .comment          PROGBITS         0000000000000000  00003010</span><br><span class="line">       000000000000002a  0000000000000001  MS       0     0     1</span><br><span class="line">  [28] .symtab           SYMTAB           0000000000000000  00003040</span><br><span class="line">       0000000000000618  0000000000000018          29    46     8</span><br><span class="line">  [29] .strtab           STRTAB           0000000000000000  00003658</span><br><span class="line">       0000000000000203  0000000000000000           0     0     1</span><br><span class="line">  [30] .shstrtab         STRTAB           0000000000000000  0000385b</span><br><span class="line">       000000000000011a  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure><p>我们通过起始地址加上e_shoff来指向我们的段表，并根据具体细节判断输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sTable = <span class="built_in">reinterpret_cast</span>&lt;Elf64_Shdr *&gt;(programMMap + header-&gt;e_shoff);</span><br></pre></td></tr></table></figure><hr><h2 id="s-功能"><a href="#s-功能" class="headerlink" title="-s 功能"></a>-s 功能</h2><p>ELF符号表定义如下</p><p>接下来我们用段表的段偏移当作索引去找拿出他的symbol_table，并判断是否为 $.dynamic和.symtab$ 根据具体对应值输出即可。</p><p>详细对应关系在 $&#x2F;usr&#x2F;include&#x2F;elf.h$ 宏定义的备注。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202112/20211202_5.png"></p><p>细节可参考：<a href="https://bbs.pediy.com/thread-255670.htm">https://bbs.pediy.com/thread-255670.htm</a></p><hr><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><strong><a href="https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow">https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow</a></strong> </p><p><strong><a href="https://bbs.pediy.com/thread-255670.htm">https://bbs.pediy.com/thread-255670.htm</a></strong> </p><p><strong><a href="https://github.com/cyyzero/readelf">https://github.com/cyyzero/readelf</a></strong> </p><p><strong><a href="https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html">https://www.cnblogs.com/jiqingwu/p/elf_explore_2.html</a></strong> </p><h2 id="参考书目："><a href="#参考书目：" class="headerlink" title="参考书目："></a>参考书目：</h2><p><strong>《程序员的自我修养》 俞甲子、石凡、潘爱民著</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简单策略模式</title>
      <link href="/2021/11/30/Java%E7%AE%80%E5%8D%95%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/11/30/Java%E7%AE%80%E5%8D%95%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java策略模式"><a href="#Java策略模式" class="headerlink" title="Java策略模式"></a>Java策略模式</h1><p>参考书目 《大话设计模式》 程杰 清华大学出版社</p><p><strong>代码链接</strong> <strong><a href="https://github.com/JiaZhengJingXianSheng/Calculate_By_Java_Version2">https://github.com/JiaZhengJingXianSheng/Calculate_By_Java_Version2</a></strong></p><p>本文是对上篇 <strong>Java简单工厂模式</strong> 的重写，以达到代码更易于维护的目的。</p><hr><h2 id="一、-定义接口"><a href="#一、-定义接口" class="headerlink" title="一、 定义接口"></a>一、 定义接口</h2><p>与上篇不同，这篇我们选择定义接口，并在后续功能实现中， $implement$ 我们的接口。</p><p>接口定义加上参数，方便后期调用，定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、-定义运算"><a href="#二、-定义运算" class="headerlink" title="二、 定义运算"></a>二、 定义运算</h2><p>接下来定义各种方法，来实现我们的接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class OperationAdd implements OperationInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getResult(double A, double B) &#123;</span><br><span class="line">        return A + B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSub</span> <span class="keyword">implements</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A - B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationMul</span> <span class="keyword">implements</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A * B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationDiv</span> <span class="keyword">implements</span> <span class="title class_">OperationInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (B == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;除数不能为0 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A / B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，还是去判断除数是否为0，为零抛出异常。</p><hr><h2 id="三、-策略定义"><a href="#三、-策略定义" class="headerlink" title="三、 策略定义"></a>三、 策略定义</h2><p>接下来我们在策略结构体中，定义我们的操作接口，并书写构造函数。</p><p>再根据我们的具体策略，返回其对应计算函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    OperationInterface strategy;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Operation</span><span class="params">(OperationInterface strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据具体策略对象，调用其方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">ContextInterface</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.getResult(A,B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、-测试"><a href="#四、-测试" class="headerlink" title="四、 测试"></a>四、 测试</h2><p>在主函数中定义策略，并传入数值 $A,B$ 与操作符 $operate$ 。</p><p>根据操作符，生成对应运算，并构造策略。</p><p>最终调用具体策略对应的计算函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Operation</span> <span class="variable">operation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">A</span> <span class="operator">=</span> in.nextDouble();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operate</span> <span class="operator">=</span> in.next();</span><br><span class="line">        <span class="type">double</span> <span class="variable">B</span> <span class="operator">=</span> in.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (operate) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationAdd</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationSub</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationMul</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                operation = <span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="keyword">new</span> <span class="title class_">OperationDiv</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(A + <span class="string">&quot; + &quot;</span> + B + <span class="string">&quot; = &quot;</span> + operation.ContextInterface(A, B));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line">1 + 2</span><br><span class="line">1.0 + 2.0=3.0</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式和工厂模式是比较类似的，工厂模式是通过继承抽象计算函数，并实现，本质来说和接口基本一样。 <strong>策略模式是用来封装算法的，但在实际中，我们发现可以用它来封装几乎任何类型的规则。</strong></p><p> <strong>在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的 $Context$  对象。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简单工厂模式</title>
      <link href="/2021/11/26/Java%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/11/26/Java%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java简单工厂模式"><a href="#Java简单工厂模式" class="headerlink" title="Java简单工厂模式"></a>Java简单工厂模式</h1><p>参考书目 《大话设计模式》 程杰 清华大学出版社</p><p><strong>代码链接</strong>  <strong><a href="https://github.com/JiaZhengJingXianSheng/Calculator_By_Java">https://github.com/JiaZhengJingXianSheng/Calculator_By_Java</a></strong> </p><p>我们在编写程序时为了容易修改，通常会用 <strong>封装、继承、多态</strong> 来降低程序的耦合度。</p><p>比如我们要实现一个简单的计算器功能，具体功能为传入两个数值和一个操作符，返回计算结果。</p><hr><h2 id="一、-抽象类创建"><a href="#一、-抽象类创建" class="headerlink" title="一、 抽象类创建"></a>一、 抽象类创建</h2><p>通常我们会在一个抽象类内部定义主要的信息，比如输出输出等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">_numberA</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">_numberB</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get_numberA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _numberA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_numberA</span><span class="params">(<span class="type">double</span> _numberA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._numberA = _numberA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get_numberB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _numberB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_numberB</span><span class="params">(<span class="type">double</span> _numberB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._numberB = _numberB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义一个抽象计算函数，方便我们在不同操作下覆写这个操作。</p><hr><h2 id="二、-定义运算"><a href="#二、-定义运算" class="headerlink" title="二、 定义运算"></a>二、 定义运算</h2><p>接下来我们分别定义各种运算，继承Operation的信息，并覆写计算函数 $getResult()$ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationAdd</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() + get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSub</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() - get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationMul</span> <span class="keyword">extends</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() * get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationDiv</span> <span class="keyword">extends</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(get_numberB() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;除数不能为0 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() / get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在除法过程中判断被除数是否为0，为零抛出异常。</p><hr><h2 id="三、-工厂定义"><a href="#三、-工厂定义" class="headerlink" title="三、 工厂定义"></a>三、 工厂定义</h2><p>接下来定义一个简单的工厂，传入我们的运算符，进行判断，并返回第二步所定义的操作类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title function_">createOperation</span><span class="params">(String operate)</span> &#123;</span><br><span class="line">        <span class="type">Operation</span> <span class="variable">oper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operate) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationAdd</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationSub</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationMul</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                oper = <span class="keyword">new</span> <span class="title class_">OperationDiv</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、-计算函数"><a href="#四、-计算函数" class="headerlink" title="四、 计算函数"></a>四、 计算函数</h2><p>定义计算函数，传入操作数以及操作符，在函数内部用第三步的工厂生成操作类，并设置 _ $ numberA$  和 _ $numberB$  ，最终调用计算函数并返回，即可实现所有功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> numberA , <span class="type">double</span> numberB, String operate)</span>&#123;</span><br><span class="line">        Operation oper;</span><br><span class="line">        oper = SimpleFactory.createOperation(operate);</span><br><span class="line">        oper.set_numberA(numberA);</span><br><span class="line">        oper.set_numberB(numberB);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> oper.getResult();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、-测试"><a href="#五、-测试" class="headerlink" title="五、 测试"></a>五、 测试</h2><p>在主函数中调用 $calculate()$ 函数并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(calculate(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;+&quot;</span>));</span><br><span class="line">        System.out.println(calculate(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        System.out.println(calculate(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 运行结果</span><br><span class="line">3.0</span><br><span class="line">0.5</span><br><span class="line">0.0</span><br><span class="line">java.lang.Exception: 除数不能为0 </span><br><span class="line">at OperationDiv.getResult(OperationDiv.java:9)</span><br><span class="line">at Calculator.calculate(Calculator.java:12)</span><br><span class="line">at Calculator.main(Calculator.java:22)</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用工厂模式我们可以降低维护成本，比如我们想增加一种运算，只需要用新运算去继承我们初始的抽象类，覆写计算函数，并在工厂中加入我们的操作即可，这大大降低了我们代码的耦合度。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2021/11/25/%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/11/25/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="C-常用排序"><a href="#C-常用排序" class="headerlink" title="C++常用排序"></a>C++常用排序</h1><p><strong>代码链接</strong> <strong><a href="https://github.com/JiaZhengJingXianSheng/SortByCPlusPlus">https://github.com/JiaZhengJingXianSheng/SortByCPlusPlus</a></strong></p><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序可以将序列看作有序序列和无序序列的结合。如何理解这句话，我们拿第一个值当作标定，和后面所有值对比，找出小于标定的结果并进行交换。那么一轮交换就可以选出一个最小值，当我们标定不断后移就可实现排序。<strong>当然，标定应该在倒数第二个值终止，因为最后一个值并无后续。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectSort</span><span class="params">(<span class="type">int</span>* &amp;arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到第一层遍历，是从第一个值到倒数第二个值，第二层遍历是从 $i+1$ 的值到最后一个值。对内部进行判断，如果$i$对应的结果大于 $j$ 的结果，进行交换。当然如果想逆序，只需要将 $&lt;$ 改为 $&gt;$ </p><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是用相邻的两个值不断比较，将两个相邻的结果按照 <strong>[由大到小、由小到大]</strong> 交换 ，那么每次都可一冒出一个最小的结果，或最大的结果，这也是冒泡排序名字的由来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span>* &amp;arr,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;len<span class="number">-1</span>-i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层遍历的 $i$ 和上面的选择排序不同，这边 $i$ 的含义是需要对长度为 $len$ 的数组冒泡 $len-1$ 次。</p><hr><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>直接插入排序是从第二个值开始，不断去前面有序序列中寻找自己位置并插入的过程，原理比较简单。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">directInsertSort</span><span class="params">(<span class="type">int</span> *&amp;arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, pivot;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        pivot = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> <span class="keyword">and</span> pivot &lt; arr[j]; j--) &#123; <span class="comment">// 后移并判断位置</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = pivot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现是从第2个值开始遍历，不断去寻找自己所在位置。其中第二个 $for$ 循环，是  $arr[i]$ 从后往前找应该插入的位置，并实现后移操作，把插入的位置让出来。</p><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是选取一个数当作基准 $pivot$ ，原理是将比他大的值放在 $pivot$ 右边，小的值放在左边。具体如何实现，比如我们常用第一个值当作初始基准，<strong>从右边往左找，找到第一个小于基准的值</strong>，将他与基准交换，然后从基准交换前的位置，<strong>从左往右找第一个大于基准的值</strong>，进行交换，依次往复，基准的位置就可以确定。<strong>所有左边的结果都小于他，右边都大于他</strong>。</p><p>而事实上我们真正使用时并不需要实时交换，我们用一个变量 $pivot$ 备份了基准，当最终结束的时候才写入确定的位置，然后换个基准，重复上述操作。有点类似于 $cache-memory$ 系统中的写回法。当然在实际实现中，我们一般选择对左右两边进行递归，这样能大大减少代码量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span>* &amp;arr,<span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left&lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = left, j = right, pivot = arr[left];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j]&gt;= pivot) <span class="comment">// 从右向左找第一个小于基准的值</span></span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) <span class="comment">//防止越过自己本身</span></span><br><span class="line">                arr[i++] = arr[j];</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i]&lt; pivot) <span class="comment">// 从左向右找第一个大于等于基准的值</span></span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) <span class="comment">//防止越过自己本身</span></span><br><span class="line">                arr[j--] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = pivot;</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, left, i - <span class="number">1</span>); <span class="comment">//左边递归</span></span><br><span class="line">        <span class="built_in">quickSort</span>(arr, i + <span class="number">1</span>, right); <span class="comment">//右边递归</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中 $i$ 和 $j$ 是用来查找位置，我们没有必要来回写入 $pivot$ 的值，只需要记录他的位置，最终写入就可以。而 $left$ 和 $right$ 是记录标定的，在这个代码里因为我们的初始标定选择是最左边的值，所以 $left$ 就是我们基准交换前的位置。</p><hr><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>我们对于堆排序算法，本质上是通过调整 <strong>[大根堆&#x2F;小根堆]</strong> 来寻找 <strong>[最大值&#x2F;最小值]</strong> 的过程。</p><p>对于二叉树而言，我们如果根节点索引从 $1$ 开始，那么左子树索引等于双亲索引 $&#x2F;2$ ，右子树索引等于双亲索引 $&#x2F;2$ 向下取整。如果根节点索引从 $0$ 开始，那么左子树索引等于双亲索引 $&#x2F;2+1$ ， 右子树索引为双亲索引 $&#x2F;2+2$ 。</p><p>我们以大根堆的调整算法举例，我们令 $i$ 等于最后一个无序值的双亲索引，查看左右子树中键值大于双亲的节点，与双亲交换，然后 $i$ - -  ，我们就可以将最大的值调整到根节点。然后将根节点的值与最后一个无序节点交换，将换下来的最大值记录为有序序列。这样每次都可以找到一个最值，有点类似于选择排序，只不过选取最值的方法不同，这样不断重复就可以得到有序序列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adjust</span><span class="params">(<span class="type">int</span>* &amp;arr, <span class="type">int</span> len, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span>*index + <span class="number">1</span>; <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span>*index + <span class="number">2</span>;<span class="comment">// 右孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> midIndex = index;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;len &amp;&amp; arr[left] &gt; arr[midIndex])</span><br><span class="line">        midIndex = left;</span><br><span class="line">    <span class="keyword">if</span>(right&lt;len &amp;&amp; arr[right] &gt; arr[midIndex])</span><br><span class="line">        midIndex = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(midIndex != index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = arr[midIndex];</span><br><span class="line">        arr[midIndex] = arr[index];</span><br><span class="line">        arr[index] = temp;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, len, midIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让 $left$ 和 $right$ 分别指向左右孩子，判断左右孩子是否大于双亲节点，大于则更新 $midIndex$  <strong>[ 下移，并指向大于自己的子节点索引 ]</strong> ，并将交换两值，在对更新后的 $midIndex$ 递归，就可以得出完整的大根堆。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span>* &amp;arr, <span class="type">int</span> len )</span></span>&#123;</span><br><span class="line">    <span class="comment">// 从最后一个无序节点双亲开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, len, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 根节点和最后一个无序节点交换</span></span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, i, <span class="number">0</span>);    <span class="comment">// 对无序节点继续生成大根堆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序时从最后一个无序节点的双亲开始，调整大根堆。 因为 $len$ 个节点我们原则上只需要遍历 $len-1$ 次即可，将生成的大根堆根节点和最后一个无序节点交换，再对剩下的无序节点生成大根堆。通过 $len-1$ 次循环就可以得到最终的序列。</p><p>我们本质上是借用二叉树，实现普通顺序表的排序。</p><hr><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><p>其实我们可以通过使用 $algorithm$ 内的 $sort$ 函数自定义规则，具体实现如下。</p><p>比如我们有一个学生的结构体，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们希望按照自己的规则对学生进行排名，比如我们希望在正常按成绩排序的过程中，碰到成绩相同的学生我们认为你年纪更小一点的同学应该排名靠前一点，那么如何定义规则。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(stu a, stu b )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 成绩相同用年龄从小往大排序</span></span><br><span class="line">    <span class="keyword">if</span>(a.score == b.score)</span><br><span class="line">        <span class="keyword">return</span> a.age&lt;b.age;</span><br><span class="line">    <span class="comment">//成绩不同，直接根据成绩好坏排序</span></span><br><span class="line">    <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以写一个 $bool$ 返回值的函数，传入两学生，根据预先希望的规则返回 $a$ 和 $b$ 的状态情况。</p><p>当然调用比较容易传入起始地址以及偏移量即可，这边偏移量并非实打实的偏移量，排序函数会用偏移量这个值乘以 $sizeof(STU)$ 当作真实偏移量。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seq2Seq</title>
      <link href="/2021/11/24/Seq2Seq/"/>
      <url>/2021/11/24/Seq2Seq/</url>
      
        <content type="html"><![CDATA[<h1 id="Seq2Seq"><a href="#Seq2Seq" class="headerlink" title="Seq2Seq"></a>Seq2Seq</h1><p>以往的循环神经网络，输入的是不定长的序列，输出确是定长的，我们选取最长词并通过对短的词扩充来实现输出定长。但有些问题的输出不是定长的，以机器翻译为例，输入一段英语，输出对应法文，输入和输出大概率不定长，比如</p><blockquote><p>英文：Beat it.      法文：Dégage !<br>英文：Call me.    法文：Appelle-moi !</p></blockquote><p>当输入输出序列不定长时，我们可以采用编码器-解码器（encoder-decoder）或Seq2Seq实现。</p><p>论文参考：<strong><a href="https://arxiv.org/abs/1409.3215">https://arxiv.org/abs/1409.3215</a></strong></p><hr><h2 id="编码器-解码器"><a href="#编码器-解码器" class="headerlink" title="编码器-解码器"></a>编码器-解码器</h2><p>编码器和解码器分别对应输入序列和输出序列的两个循环神经网络。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211124_1.png"></p><h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><p>编码器将长度可变的输入序列转换成形状固定的上下文变量，并且将输入序列的信息在该上下文变量中进行编码。</p><p>假设输入序列是$x_1,x_2,x_3…x_T$ ,其中$x_t$是输入文本序列中第t个词原，用$h_t$ 来表示上一时间的隐藏状态，用函数$f$来描述为<br>$$<br>h_t&#x3D;f(x_t,h_t−1)<br>$$<br>编码器的背景向量<br>$$<br>c &#x3D; q(h_1,…,h_T)<br>$$<br>如果我们希望编码器既包含正向传递的信息，又包含反向传递的信息，可以使用双向循环神经网络。</p><h3 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h3><p>通过编码器，假定我们的输入序列为 $x_1,x_2,…,x_T$ 。输出序列为$y_1，y_2,…,y_T$ ,我们希望每个时刻的输出向量，既取决于之前的输出又取决于背景向量。所以我们可以用循环神经网络$g$ 来实现，其中$s_t$ 为$t’$ 世界的解码器隐藏变量，该隐藏变量为  $s_{t’} &#x3D; g(y_{t’-1},c,s_{t’-1})$  一般编码器和解码器会使用<strong>多层</strong>循环神经网络。</p><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>通常我们会在解码器后面增加一个FC，并且现在我们实现中一般采用嵌入层（Embedding）来获得输入序列中每个词元的特征向量。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211124_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoEncoder</title>
      <link href="/2021/11/22/AutoEncoder/"/>
      <url>/2021/11/22/AutoEncoder/</url>
      
        <content type="html"><![CDATA[<h1 id="AutoEncoder"><a href="#AutoEncoder" class="headerlink" title="AutoEncoder"></a>AutoEncoder</h1><p>自编码 AutoEncoder 是一种无监督学习的算法，他利用反向传播算法，让目标值等于输入值。</p><p>比如对于一个神经网络，输入一张图片，通过一个 Encoder 神经网络，输出一个比较 “浓缩的”feature map。之后将这个 feature map 通过一个 Decoder 网络，结果又将这张图片恢复。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com//202110/20211122_1.png"></p><p><img src="D:\Images\202111\20211122_1.png"></p><p>如果说我们的数据集特别大，对于直接训练而言性能肯定较低。但如果我们对数据特征进行提取，缩减输入信息量，学习起来就相对轻松。</p><hr><h2 id="简单模型"><a href="#简单模型" class="headerlink" title="简单模型"></a>简单模型</h2><p>下面是一个AutoEncoder的三层模型，其中 $W^* &#x3D; W^T$ </p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_2.png"></p><p>2010年，Vincent 在论文中表明，只用单组W就可以，所以W*没有必要去训练。</p><p><strong><a href="http://jmlr.org/papers/volume11/vincent10a/vincent10a.pdf">http://jmlr.org/papers/volume11/vincent10a/vincent10a.pdf</a></strong></p><p>如果实数作为输入，损失函数为  $L(f(x)) &#x3D; {1\over2}\sum_{k}(\hat x_k - x_k)^2$</p><hr><h2 id="PCA-和-AutoEncoder"><a href="#PCA-和-AutoEncoder" class="headerlink" title="PCA 和 AutoEncoder"></a>PCA 和 AutoEncoder</h2><p><strong>PCA又叫主成分分析法，是将n维特征映射到k维上</strong>，本质上是个线性变化。而AutoEncoder是基于DNN的，因为有激活函数，所以可以进行非线性变换。下图是MNIST数据集经过 PCA 和AutoEncoder 降维再还原后的效果。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_3.png"></p><p>可以看到AutoEncoder效果是明显优于PCA。</p><h2 id="Dropout-AutoEncoder"><a href="#Dropout-AutoEncoder" class="headerlink" title="Dropout AutoEncoder"></a>Dropout AutoEncoder</h2><p>Dropout AutoEncoder是不断让神经元死亡以达到缩减特征的效果。</p><p>下图是一个简单的神经元图。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_4.png"></p><hr><h2 id="Adversarial-AutoEncoders"><a href="#Adversarial-AutoEncoders" class="headerlink" title="Adversarial AutoEncoders"></a>Adversarial AutoEncoders</h2><p>Adversarial AutoEncoders是利用GAN网络的思想，利用一个生成器 G 和一个判别器 D 进行对抗学习，以区分 Real data 和 Fake data。</p><p>具体思路是这样的，我现在需要一个满足 p(z) 概率分布的 z 向量，但是 z 实际上满足 q(z) 分布。那么我就首先生成一个满足 p(z) 分布的 z′ 向量，打上 Real data 的标签，然后将 z 向量打上 Fake data 的标签，将它们俩送入判别器 D。判别器 D 通过不断学习，预测输入 input 是来自于 Real data（服从预定义的 p(z) 分布）还是 Fake data（服从 q(z) 分布）。由于这里的 p(z) 可以是我们定义的任何一个概率分布，因此整个对抗学习的过程实际上可以认为是通过调整 Encoder 不断让其产生数据的概率分布 q(z) 接近我们预定义的 p(z)。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_5.png"></p><hr><h2 id="AutoEncoder代码实现"><a href="#AutoEncoder代码实现" class="headerlink" title="AutoEncoder代码实现"></a>AutoEncoder代码实现</h2><p><strong><a href="https://github.com/JiaZhengJingXianSheng/AutoEncoder">https://github.com/JiaZhengJingXianSheng/AutoEncoder</a></strong></p><hr><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>下面这张图是原本mnist数据集的图。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_6.png" alt="结果1"></p><p>在epochs &#x3D; 1 情况下，在经过编码器编码，解码器恢复的结果为下图。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_7.png" alt="结果2"></p><p>因为DNN是有损失的，所以在恢复的过程中肯定是有部分信息丢失。但可以通过训练次数的提升，来减少信息丢失，下图为epochs &#x3D; 50 情况下恢复出来的结果，可以看到效果明显优于上图。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211122_8.png" alt="结果3"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux CMake工程目录结构</title>
      <link href="/2021/11/18/CMake%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2021/11/18/CMake%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-CMake工程目录结构"><a href="#Linux-CMake工程目录结构" class="headerlink" title="Linux CMake工程目录结构"></a>Linux CMake工程目录结构</h1><h2 id="主文件目录"><a href="#主文件目录" class="headerlink" title="主文件目录"></a>主文件目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./lib/</span><br><span class="line">./src/</span><br><span class="line">./build</span><br><span class="line">./CMakeLists.txt</span><br></pre></td></tr></table></figure><h2 id="x2F-CMakeLists-txt"><a href="#x2F-CMakeLists-txt" class="headerlink" title=".&#x2F;CMakeLists.txt"></a>.&#x2F;CMakeLists.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMAKE_MINIMUM_REQUIRED( VERSION 3.10 )</span><br><span class="line"></span><br><span class="line">PROJECT(MAIN)</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./lib )</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./src)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="x2F-lib-x2F-CMakeLists-txt"><a href="#x2F-lib-x2F-CMakeLists-txt" class="headerlink" title=".&#x2F;lib&#x2F;CMakeLists.txt"></a>.&#x2F;lib&#x2F;CMakeLists.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AUX_SOURCE_DIRECTORY(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line">SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line">ADD_LIBRARY(LIB STATIC $&#123;DIR_LIB_SRCS&#125;)</span><br></pre></td></tr></table></figure><h2 id="x2F-src-x2F-CMakeLists-txt"><a href="#x2F-src-x2F-CMakeLists-txt" class="headerlink" title=".&#x2F;src&#x2F;CMakeLists.txt"></a>.&#x2F;src&#x2F;CMakeLists.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE_DIRECTORIES($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line">  </span><br><span class="line">SET(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line">AUX_SOURCE_DIRECTORY(./ DIR_SRCS)</span><br><span class="line"></span><br><span class="line">ADD_EXECUTABLE(MAIN $&#123;DIR_SRCS&#125;)</span><br><span class="line"></span><br><span class="line">TARGET_LINK_LIBRARIES(MAIN LIB)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="vscode调试"><a href="#vscode调试" class="headerlink" title="vscode调试"></a>vscode调试</h2><h3 id="x2F-CMakeLists-txt-1"><a href="#x2F-CMakeLists-txt-1" class="headerlink" title=".&#x2F;CMakeLists.txt"></a>.&#x2F;CMakeLists.txt</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CMAKE_MINIMUM_REQUIRED( VERSION 3.10 )</span><br><span class="line"></span><br><span class="line">PROJECT(MAIN)</span><br><span class="line"></span><br><span class="line">add_definitions(-std=c++14)</span><br><span class="line">SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAG_DEBUG &quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g -ggdb&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAG_RELEASE &quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;)</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./lib )</span><br><span class="line"></span><br><span class="line">ADD_SUBDIRECTORY(./src)</span><br></pre></td></tr></table></figure><h3 id="修改launch-json"><a href="#修改launch-json" class="headerlink" title="修改launch.json"></a>修改launch.json</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/build/bin/MAIN&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CMake </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++主存层面数据交换</title>
      <link href="/2021/11/17/CPP%E4%B8%BB%E5%AD%98%E5%B1%82%E9%9D%A2%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/"/>
      <url>/2021/11/17/CPP%E4%B8%BB%E5%AD%98%E5%B1%82%E9%9D%A2%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="C-互换指针指向内存结果"><a href="#C-互换指针指向内存结果" class="headerlink" title="C++ 互换指针指向内存结果"></a>C++ 互换指针指向内存结果</h1><h2 id="1-互换指针指向内存结果"><a href="#1-互换指针指向内存结果" class="headerlink" title="1. 互换指针指向内存结果"></a>1. 互换指针指向内存结果</h2><p><strong>将命令参数前两个值在主存中互换并输出。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mySwap.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Origin info is: &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;argv[<span class="number">1</span>]&lt;&lt;<span class="string">&quot; \tb: &quot;</span>&lt;&lt;argv[<span class="number">2</span>]&lt;&lt;std::endl;</span><br><span class="line">        <span class="built_in">mySwap</span>(argv[<span class="number">1</span>],argv[<span class="number">2</span>]);</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Has been swaped info is: &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;argv[<span class="number">1</span>]&lt;&lt;<span class="string">&quot; \tb: &quot;</span>&lt;&lt;argv[<span class="number">2</span>]&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">char</span>* &amp;a,<span class="type">char</span>*  &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">char</span>* temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211117_1.png" alt="结果1"></p><h2 id="2-简单变量交换"><a href="#2-简单变量交换" class="headerlink" title="2. 简单变量交换"></a>2. 简单变量交换</h2><p><strong>下面提供了一个简单的变量互换代码。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = a;</span><br><span class="line">        a= b;</span><br><span class="line">        b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        std::cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Original info is &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;std::endl;</span><br><span class="line">        <span class="built_in">swap</span>(a,b);</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;Has been swaped info is &quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211117_2.png" alt="结果2"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不变风险最小化</title>
      <link href="/2021/11/12/%E4%B8%8D%E5%8F%98%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
      <url>/2021/11/12/%E4%B8%8D%E5%8F%98%E9%A3%8E%E9%99%A9%E6%9C%80%E5%B0%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Invariant-Risk-Minimization"><a href="#Invariant-Risk-Minimization" class="headerlink" title="Invariant Risk Minimization"></a>Invariant Risk Minimization</h1><h1 id="不变风险最小化"><a href="#不变风险最小化" class="headerlink" title="不变风险最小化"></a>不变风险最小化</h1><h2 id="论文链接"><a href="#论文链接" class="headerlink" title="论文链接"></a>论文链接</h2><p><strong><a href="https://arxiv.org/abs/1907.02893">https://arxiv.org/abs/1907.02893</a></strong></p><hr><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>现有机器学习是通过不断减小训练误差，来实现复杂的预测模型，但计算机是不加选择的提取训练数据的相关性， <strong>correlation-versus-causation</strong>【相关性和因果性】有时并不一样，此论文是在研究利用因果关系拓展不变相关性的问题。</p><hr><h2 id="文中例子"><a href="#文中例子" class="headerlink" title="文中例子"></a>文中例子</h2><p>文中提到一个例子，是对奶牛和骆驼分类。但由于数据集中，大多数奶牛照片是在牧场拍摄的，背景色为绿色，骆驼是在沙漠中。因此神经网络在训练时，不断降低loss值，最终其实是将绿色背景归类为奶牛，米色背景归为骆驼。所以<strong>训练出来的结果是不具有泛化性的</strong>。</p><hr><h2 id="IRM"><a href="#IRM" class="headerlink" title="IRM"></a>IRM</h2><p><strong>不变风险最小化 (IRM)</strong> 是从多次训练中估计非线性、不变、因果预测因子来实现分布外泛化。</p><p><strong>重点：为训练引入约束，将约束表述为惩罚。IRM的目标是构建泛化分布外的预测器。</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉域泛化</title>
      <link href="/2021/11/11/%E8%A7%86%E8%A7%89%E5%9F%9F%E6%B3%9B%E5%8C%96/"/>
      <url>/2021/11/11/%E8%A7%86%E8%A7%89%E5%9F%9F%E6%B3%9B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Domain-Generalization-in-Vision-A-Survey"><a href="#Domain-Generalization-in-Vision-A-Survey" class="headerlink" title="Domain Generalization in Vision: A Survey"></a>Domain Generalization in Vision: A Survey</h1><h1 id="视觉域泛化"><a href="#视觉域泛化" class="headerlink" title="视觉域泛化"></a>视觉域泛化</h1><h2 id="论文地址"><a href="#论文地址" class="headerlink" title="论文地址"></a>论文地址</h2><p><strong><a href="https://arxiv.org/abs/2103.02503">https://arxiv.org/abs/2103.02503</a></strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>大多数统计学习算法强烈依赖过于简化的假设，即源数据和目标数据是独立的同分布，而忽略了实践中常见的分布外（OOD）场景。为了克服域转移问题以及目标数据的缺失，引入了域泛化（DG）问题，DG 的目标是使用来自单个或多个相关但不同的源域的数据来学习模型，以便该模型可以很好地泛化到任何 OOD 目标域。</p><p>研究 DG 的最初动机是利用多源数据来学习对不同边际分布具有不变性的表示，使用多个域允许模型发现跨源域的稳定模式，从而更好地泛化到看不见的域。然而，单源 DG 方法不需要用于学习的领域标签，因此它们也适用于多源场景。</p><p>给定标记的源域 S，DG 的目标是使用来自 S 的数据学习模型 f，以便该模型可以很好地泛化到一个看不见的域 T。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentiment Analysis For RNN</title>
      <link href="/2021/11/08/Sentiment-Analysis-For-RNN/"/>
      <url>/2021/11/08/Sentiment-Analysis-For-RNN/</url>
      
        <content type="html"><![CDATA[<h1 id="Sentiment-Analysis-For-RNN"><a href="#Sentiment-Analysis-For-RNN" class="headerlink" title="Sentiment Analysis For RNN"></a>Sentiment Analysis For RNN</h1><h1 id="循环神经网络进行情感分析"><a href="#循环神经网络进行情感分析" class="headerlink" title="循环神经网络进行情感分析"></a>循环神经网络进行情感分析</h1><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a><strong>引言：</strong></h2><p>对于情感分析，如果简化来看可以分为<strong>正向情绪</strong>和<strong>负向情绪</strong>，我们可以将情感分析视为文本分类任务，因此我们可以将预训练的词向量应用于情感分析。我们可以用预训练的GloVe模型表示每个标记，并反馈到RNN中。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211108_1.png"></p><hr><h2 id="RNN表征文本"><a href="#RNN表征文本" class="headerlink" title="RNN表征文本"></a>RNN表征文本</h2><p>在文本分类任务中，要将可变长度的文本序列转为固定长度。可以通过<strong>nn.Embedding()<strong>函数获得单独的预训练GloVe，再去通过</strong>双向LSTM</strong>，最后在去通过一个<strong>全连接层</strong>做一个二分类，即可实现RNN表征文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.embedding = nn.Embedding(vocab_size, embed_size)</span><br><span class="line">self.encoder = nn.LSTM(embed_size, num_hiddens, num_layers=num_layers,bidirectional=<span class="literal">True</span>)</span><br><span class="line">self.decoder = nn.Linear(<span class="number">4</span> * num_hiddens, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">embeddings = self.embedding(inputs.T)</span><br><span class="line">outputs, _ = self.encoder(embeddings)</span><br><span class="line">encoding = torch.cat((outputs[<span class="number">0</span>], outputs[-<span class="number">1</span>]), dim=<span class="number">1</span>)</span><br><span class="line">outs = self.decoder(encoding)</span><br></pre></td></tr></table></figure><hr><h2 id="训练和评估模型"><a href="#训练和评估模型" class="headerlink" title="训练和评估模型"></a>训练和评估模型</h2><p>选用<strong>IMDB数据集</strong>，该数据集包含<strong>50 000 条严重两极分化的评论。 训练集 测试集各 25000 条评论，并都包含 50% 的正面评论和 50% 的负面评论。</strong>加载我们预训练的GloVe模型后调用训练函数进行训练，用100维GloVe下方展示模型情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(embedding): Embedding(49346, 100)</span><br><span class="line">(encoder): LSTM(100, 100, num_layers=2, bidirectional=True)</span><br><span class="line">(decoder): Linear(in_features=400, out_features=2, bias=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="训练情况"><a href="#训练情况" class="headerlink" title="训练情况"></a>训练情况</h2><p><img src="D:\Images\202111\20211108_2.png"></p><p>用训练好的模型预测两个简单的句子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_sentiment(net, vocab, <span class="string">&#x27;this movie is so great&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>‘positive’</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_sentiment(net, vocab, &#x27;this movie is so bad&#x27;)</span><br></pre></td></tr></table></figure><p><strong>‘negative’</strong></p><hr><h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><p><strong><a href="https://github.com/JiaZhengJingXianSheng/Sentiment-Analysis-For-RNN">https://github.com/JiaZhengJingXianSheng/Sentiment-Analysis-For-RNN</a></strong></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><strong><a href="https://d2l.ai/chapter_natural-language-processing-applications/sentiment-analysis-rnn.html">https://d2l.ai/chapter_natural-language-processing-applications/sentiment-analysis-rnn.html</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG16实现分类任务</title>
      <link href="/2021/11/07/VGG16%E5%AE%9E%E7%8E%B0%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/"/>
      <url>/2021/11/07/VGG16%E5%AE%9E%E7%8E%B0%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="VGG16实现分类任务"><a href="#VGG16实现分类任务" class="headerlink" title="VGG16实现分类任务"></a>VGG16实现分类任务</h1><p>VGG是2014年由牛津大学著名研究组VGG(Visual Geometry Group)提出，斩获当年ImageNet竞赛中定位任务第一名和分类任务第二名。</p><hr><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211107_1.png" alt="20211107_1"></p><hr><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>例如有张224x224的RGB图片，我们让他通过两个卷积核为3的卷积层，再通过最大池化层<strong>（核尺寸为2，步距为2）</strong>。至于卷积层的输入输出维度，参考下图，我们一般常用VGG16模型，<strong>最终用多个FC实现分类，也可将FC换成卷积核为1的卷积层</strong>。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211107_2.png"></p><hr><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>同样选用本人常用的海贼王数据集来测试，可以根据个人需求修改。</p><p><strong>下面提供一个简单数据集。</strong></p><p>Kaggle的鸟儿分类数据集，共315个分类</p><p><a href="https://www.kaggle.com/gpiosenka/100-bird-species">https://www.kaggle.com/gpiosenka/100-bird-species</a></p><p><strong>可以用kaggle命令选择下载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle datasets download -d gpiosenka/100-bird-species</span><br></pre></td></tr></table></figure><hr><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>讲图片预resize为224x224的图片，并进行随机翻转，<strong>可参考图像增广</strong></p><p><strong><a href="https://www.quarkhackers.space/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/">https://www.quarkhackers.space/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/</a></strong></p><p>最终转为Tensor，并进行归一化处理。</p><p><strong>参考代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transforms.Compose([transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                                 transforms.RandomHorizontalFlip(),</span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br></pre></td></tr></table></figure><hr><h2 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h2><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211107_3.png"></p><p><strong>结果分析</strong></p><p>在训练过程，针对此数据集，VGG16的学习率不宜过高，过高会出现loss不收敛</p><p><strong>在loss为0.01时结果如下</strong></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202111/20211107_4.png"></p><p><strong>VGG网络acc可达到百分之90以上，只是对于小数据集而言，模型过于繁重，可选用层数少的模型，并且在后面3层FC，可根据个人需求修改。</strong></p><hr><h2 id="完整代码链接"><a href="#完整代码链接" class="headerlink" title="完整代码链接"></a>完整代码链接</h2><p><strong><a href="https://github.com/JiaZhengJingXianSheng/VGG16">https://github.com/JiaZhengJingXianSheng/VGG16</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类 </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近似训练</title>
      <link href="/2021/10/18/%E8%BF%91%E4%BC%BC%E8%AE%AD%E7%BB%83/"/>
      <url>/2021/10/18/%E8%BF%91%E4%BC%BC%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="近似训练"><a href="#近似训练" class="headerlink" title="近似训练"></a>近似训练</h1><p>​        在对跳元模型和连续词袋模型的梯度计算过程中需要求和，所以对于词典而言，求和的梯度计算成本十分巨大。所以我们可以采用负采样和分层softmax</p><hr><h2 id="负采样"><a href="#负采样" class="headerlink" title="负采样"></a>负采样</h2><p>​        负采样修改了原目标函数，放弃softmax转而使用sigmoid来实现。</p><p>​        sigmoid的函数定义如下：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211018_1.jpg"></p><p>​        我们从最大化文本序列中所有这些事件的联合概率开始训练词嵌入，如果只算正向部分，那对于给定长度为TT的文本序列，以<strong>w^(t)<strong>表示时间步</strong>t</strong>的词，并使上下文窗口为<strong>m</strong>，最大化联合概率为：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211018_2.jpg"></p><p>​        <strong>而负采样添加从预定义分布中采样的负样本。</strong></p><p>​        用Wk表示噪声词，则Wk与中心词的窗口内上下文词的条件概率为：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211018_3.jpg"></p><p>​        用<strong>v和u</strong>分别表示中心词和上下文词的两个向量，用<strong>it和hk</strong>分别表示窗口内词与噪声词在时间步<strong>t</strong>处的索引，则件概率的对数损失为：</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211018_4.jpg"></p><p>​        <strong>总结：每个训练步的梯度计算成本与词表大小无关，而是线性依赖于采样K。当将超参数K设置为较小的值时，在负采样的每个训练步处的梯度的计算成本较小。</strong></p><hr><h2 id="分层SoftMax"><a href="#分层SoftMax" class="headerlink" title="分层SoftMax"></a>分层SoftMax</h2><p>​        <strong>分层softmax</strong>使用二叉树，其中树的每个叶节点表示词表中的一个词。原理图如下</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211018_5.jpg"></p><p>​        若用二叉树来实现中心词和上下次的分割，那在寻找的时候会议二的n次方的形式缩减计算成本，因为二叉树查找的时间复杂度为log以2为底 n，所以我们的运算数量级可以减小到log以2为底的结点个数数量级，计算成本显著降低。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perceptron</title>
      <link href="/2021/10/17/Perceptron/"/>
      <url>/2021/10/17/Perceptron/</url>
      
        <content type="html"><![CDATA[<h1 id="Perceptron"><a href="#Perceptron" class="headerlink" title="Perceptron"></a>Perceptron</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简单的感知机可以看作一个二分类，假定我们的公式为 </p><p> <strong>f(x) &#x3D; sign(w *x + b)</strong> </p><p>我们把 <strong>-b</strong> 做为一个标准，<strong>w* x</strong>  的结果与 <strong>-b</strong> 这个标准比较，</p><blockquote><p><strong>w*x &gt; -b,  f(x) &#x3D; +1</strong> </p><p><strong>w *x &lt; -b, f(x) &#x3D; -1</strong></p></blockquote><p> 不难看出<strong>w</strong>是超平面的法向量，超平面上的向量与<strong>w</strong>的数量积为0。因此这个超平面就可以很好的区分我们的数据集。</p><p>而感知机就是来寻找<strong>w和b</strong></p><hr><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><p>优化方法我们现有的方法比较多，诸如<strong>GD、SGD、Minibatch、Adam</strong></p><p>当然我们的损失函数也包含多种，常见的有MSE, CrossEntropy. </p><p>这边简单展示一下MSE以及GD原理。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_1.jpg"></p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_2.jpg"></p><hr><h2 id="SoftMax"><a href="#SoftMax" class="headerlink" title="SoftMax"></a>SoftMax</h2><p>如果我们输出为多分类，那就成为一个SoftMax回归。</p><p>SoftMax回归和线性回归一样将输入特征与权重做线性叠加。与线性回归的一个主要不同在于，SoftMax回归的输出值个数等于标签里的类别数。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_3.jpg"></p><hr><h2 id="MLP"><a href="#MLP" class="headerlink" title="MLP"></a>MLP</h2><p>而我们给SoftMax回归增加<strong>隐藏层</strong>，就是我们所说的多层感知机，而</p><p>全连接层只是对数据做仿射变换，我们的方法是引入非线性变换，就是激活函数。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_4.jpg"></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这边选用CIFAR10数据集来做演示。CIFAR10包含10个类别，每个类别600张32x32的彩色图像。</p><p><strong>1.导入依赖包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br></pre></td></tr></table></figure><p><strong>2.加载数据集</strong></p><p>这边对图片进行归一化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>),(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))]</span><br><span class="line">    )</span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>,download=<span class="literal">True</span>,train=<span class="literal">True</span>,transform=transform)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">val_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;data&quot;</span>,download=<span class="literal">True</span>,train=<span class="literal">False</span>,transform=transform)</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><strong>3.定义模型及参数</strong></p><p>用Sequential快速构建，<strong>对数据进行展平处理</strong>输入尺寸为图片尺寸 x 通道数，输出10分类，hidden layer设置为512。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Flatten(),</span><br><span class="line">    nn.Linear(<span class="number">1024</span>*<span class="number">3</span>, <span class="number">512</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Linear(<span class="number">512</span>,<span class="number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>4.训练</strong></p><p>损失计算选用交叉熵函数，优化器选用SGD，调用显卡运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr = <span class="number">0.01</span>)</span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">device = <span class="string">&quot;cuda:0&quot;</span></span><br><span class="line">train(net,train_loader,val_loader,epochs,optimizer,loss,device)</span><br></pre></td></tr></table></figure><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_5.jpg"></p><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>可以看出我们的验证准确值过低，这主要是因为数据集特征不明显，我们在更换数据集验证。</p><p><strong>更换数据集</strong></p><p>选用7分类的海贼王图片进行训练，可以看出训练结果明显优于CIFAR数据集。</p><p><img src="/!%5B%5D(https:/whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_6.jpg)"></p><p>同时我们再挑选一张不在训练集的图片进行验证，发现结果正确。</p><p><img src="/!%5B%5D(https:/whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211017_7.jpg)"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像增广</title>
      <link href="/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/"/>
      <url>/2021/10/15/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%B9%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="图像增广"><a href="#图像增广" class="headerlink" title="图像增广"></a>图像增广</h1><p>​    图像增广在对训练图像进行一系列的随机变化之后，生成相似但不同的训练样本，从而扩大了训练集的规模，提高泛化能力。</p><hr><h2 id="随机翻转"><a href="#随机翻转" class="headerlink" title="随机翻转"></a>随机翻转</h2><p>​    例如，现在有一张小狗的照片，我们可以借助transforms的RandomHorizontalFlip()来翻转。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com//202110/20211015_1.jpg"></p><p>​    翻转之后的结果如下图。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com//202110/20211015_2.jpg"></p><hr><h2 id="随机裁剪"><a href="#随机裁剪" class="headerlink" title="随机裁剪"></a>随机裁剪</h2><p>​    我们可以通过随机裁剪降低模型对目标的敏感性，可用RandomResizedCrop()来实现。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com//202110/20211015_3.jpg"></p><hr><h2 id="改变颜色"><a href="#改变颜色" class="headerlink" title="改变颜色"></a>改变颜色</h2><p>​    我们也可以通过调整图片亮度、对比度、饱和度、色调来扩充数据集。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com//202110/20211015_4.jpg"></p><hr><h2 id="结合"><a href="#结合" class="headerlink" title="结合"></a>结合</h2><p>​    我们结合前面的多种方法可以扩充我们的数据集，以实现训练精度提升的效果。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com//202110/20211015_5.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoftMax指北</title>
      <link href="/2021/10/14/SoftMax/"/>
      <url>/2021/10/14/SoftMax/</url>
      
        <content type="html"><![CDATA[<h2 id="SoftMax指北"><a href="#SoftMax指北" class="headerlink" title="SoftMax指北"></a>SoftMax指北</h2><p>​    softmax函数，又称归一化<strong>指数函数</strong>。是将多分类的结果用概率的形式表示出来，而各种预测结果概率和为1，下图为SoftMax的计算方法。</p><p><img src="https://whiskey-1307771980.cos.ap-beijing.myqcloud.com/202110/20211014_1.jpg"></p><p>​    e的zi次方保证了结果非负，除以总和保证了总和为1，这样就可以得出近似的概率。</p><hr><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>​    这边选用Fashion-Mnist作为示例.</p><h3 id="第一步下载数据集"><a href="#第一步下载数据集" class="headerlink" title="第一步下载数据集"></a>第一步下载数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data = torchvision.datasets.FashionMNIST(<span class="string">&quot;./data/mnist&quot;</span>,train=<span class="literal">True</span>,download=<span class="literal">True</span>)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_data,batch_size = <span class="number">8</span>, shuffle = <span class="literal">True</span>)</span><br><span class="line">val_data = torchvision.datasets.FashionMNIST(<span class="string">&quot;./data/mnist&quot;</span>,train=<span class="literal">False</span>,download=<span class="literal">True</span>)</span><br><span class="line">val_loader = torch.utils.data.DataLoader(val_data,batch_size = <span class="number">8</span>, shuffle = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="第二步设置各种函数"><a href="#第二步设置各种函数" class="headerlink" title="第二步设置各种函数"></a>第二步设置各种函数</h3><p>简单设置了一个线性层，输入维度784，输出维度10</p><p>损失函数使用交叉熵</p><p>优化器用随机梯度下降法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(nn.Linear(<span class="number">784</span>,<span class="number">10</span>))</span><br><span class="line">net.to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(),lr = <span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
